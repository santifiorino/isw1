

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (30 May 2023 16:58:19) as /home/clinux01/Descargas/linux64/CuisUniversity-5832.image!


----End fileIn of /home/clinux01/Descargas/2023-1c/06-Portfolio1/Portfolio-Solucion.st----!

TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransactionTest category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 16:59:33'!
TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransactionTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:01:39'!
test01

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	senderAccount transfer: 100 to: receiverAccount.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !

!testRun: #TransactionTest #test01 stamp: 'SF 5/30/2023 17:01:43'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:02:06'!
transfer: aRenameMe1 to: receiverAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:02:27' prior: 50625113!
transfer: anAmountToTransfer to: anAccountToTransferTo

	 
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:03:57' prior: 50625119!
transfer: anAmountToTransfer to: anAccountToTransferTo

	Withdraw register: anAmountToTransfer on: self.
	Deposit register: anAmountToTransfer on: anAccountToTransferTo.
	
	 
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #TransactionTest #test01 stamp: 'SF 5/30/2023 17:04:04'!
PASSED!

!classRenamed: #TransactionTest as: #TransferenceTest stamp: 'SF 5/30/2023 17:11:36'!
Smalltalk renameClassNamed: #TransactionTest as: #TransferenceTest!

!classRenamed: #TransferenceTest as: #TransferTest stamp: 'SF 5/30/2023 17:11:46'!
Smalltalk renameClassNamed: #TransferenceTest as: #TransferTest!

Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:12:33'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:12:57' prior: 50625099!
test01

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !
!Transfer methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:13:32'!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	! !

!methodRemoval: ReceptiveAccount #transfer:to: stamp: 'SF 5/30/2023 17:13:40'!
transfer: anAmountToTransfer to: anAccountToTransferTo

	Withdraw register: anAmountToTransfer on: self.
	Deposit register: anAmountToTransfer on: anAccountToTransferTo.
	
	 
	!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:14:09' prior: 50625194!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	Withdraw register: aTransferValue on: aReceiverAccount.
	Deposit register: aTransferValue on: aSenderAccount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:14:15' prior: 50625208!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	Withdraw register: aTransferValue on: aSenderAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:14:18'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:19:22'!
test02

	| senderAccount receiverAccount transfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: transfer withdrawalLeg transfer equals: transfer! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:20:03' prior: 50625228!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:20:08' prior: 50625240!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:20:31'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:20:30' prior: 50625217!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := Withdraw register: aTransferValue on: aSenderAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:20:43'!
withdrawalLeg

	^ withdrawalLeg! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:21:08'!
transfer

	^ self! !

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:21:09'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:21:09'!
ERROR!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:21:09'!
ERROR!

Transfer subclass: #WithdrawalLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:21:44'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:23:57' prior: 50625272!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andReceiver: aReceiverAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:24:47'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:24:46'!
from: aTransfer withSender: aSenderAccount andReceiver: aReceiverAccount

	parentTransfer := aTransfer.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:26:29' prior: 50625308!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	Deposit register: aTransferValue on: aReceiverAccount.! !

!methodRemoval: WithdrawalLeg #from:withSender:andReceiver: stamp: 'SF 5/30/2023 17:26:32'!
from: aTransfer withSender: aSenderAccount andReceiver: aReceiverAccount

	parentTransfer := aTransfer.
	!
!WithdrawalLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:26:44'!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:27:14' prior: 50625349!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	Withdraw register: aTransferValue on: aSenderAccount.! !

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:27:44'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:27:44'!
FAILURE!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:27:44'!
FAILURE!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:28:02' overrides: 50625285!
transfer

	^ parentTransfer! !

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:28:17'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:28:17'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:28:20'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:28:22'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:28:23'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:28:23'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:28:45' prior: 50625252!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.! !

Transfer subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:28:55'!
Transfer subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:29:25'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:29:23' prior: 50625333!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	depositLeg := DepositLeg new from: self withReceiver: aReceiverAccount andValue: aTransferValue.! !
!DepositLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:29:49'!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.

! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:30:07' prior: 50625432!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	Deposit register: aTransferValue on: aReceiverAccount.
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:30:21' overrides: 50625285!
transfer

	^ parentTransfer
! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:30:46' prior: 50625388!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.! !

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:30:47'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:30:47'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:30:47'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:30:56'!
test03

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer transferLeg transfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:31:15' prior: 50625471!
test03

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:31:26'!
depositLeg

	^ depositLeg! !

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:31:27'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:31:27'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'SF 5/30/2023 17:31:27'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:31:29'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:31:29'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'SF 5/30/2023 17:31:29'!
PASSED!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:33:32'!
Transfer subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:33:31' prior: 50625439!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:33:44'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:33:43' prior: 50625355!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:34:34'!
transaction

	^ transaction
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:34:39' prior: 50625370 overrides: 50625285!
transfer

	^ transaction! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:07'!
test01ATransactionModifiesBothAccountsBalances

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !

!methodRemoval: TransferTest #test01 stamp: 'SF 5/30/2023 17:37:10'!
test01

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:41'!
test02AWithdrawalKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.! !

!methodRemoval: TransferTest #test02 stamp: 'SF 5/30/2023 17:37:44'!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:53'!
test03ADepositKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.! !

!methodRemoval: TransferTest #test03 stamp: 'SF 5/30/2023 17:37:56'!
test03

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:38:47'!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer value equals: 100.! !

Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:39:08'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:39:50'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:39:53'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:04' prior: 50625538!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.
	value := aTransferValue.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:10' prior: 50625684!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	value := aTransferValue.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.
	! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:25' overrides: 16902254!
value
	
	^ value
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:33' overrides: 16902254!
value

	self subclassResponsibility.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:40:55' prior: 50625627!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:41:01'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:41:01'!
FAILURE!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:41:01'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:41:01'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:41:01'!
FAILURE!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:41:09'!
FAILURE!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:42:37' prior: 50625551 overrides: 50625285!
transfer

	^ parentTransfer ! !

AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:45:58'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:46:24'!
AccountTransaction subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:46:27'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:46:27'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:46:27'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:46:27'!
PASSED!

AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:47:31'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:47:53'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:47:58'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: WithdrawalLeg #value stamp: 'SF 5/30/2023 17:48:06'!
value
	
	^ value
	!

!methodRemoval: Withdraw #value stamp: 'SF 5/30/2023 17:48:09'!
value

	^ value!

!methodRemoval: Deposit #value stamp: 'SF 5/30/2023 17:48:13'!
value

	^ value!
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/30/2023 17:48:18' prior: 50624984 overrides: 16902254!
value 

	^ value ! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:48:22'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:48:22'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:48:22'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:48:22'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:48:26'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:48:26'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:48:26'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:48:26'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:48:41' prior: 50625712!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.! !

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:48:42'!
FAILURE!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:49:08' prior: 50625521!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	value := aTransferValue.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
	
! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:49:11'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:49:11'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:49:11'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:49:11'!
PASSED!

Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:49:46'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:49:51'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:49:53'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:50:06' overrides: 50625838!
value

	parentTransfer value.
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:50:13' overrides: 50625838!
value

	parentTransfer value.! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:20' prior: 50625838 overrides: 16902254!
value 

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:40' overrides: 50625952!
value

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:47' overrides: 50625952!
value

	^ value! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:50:52'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:50:52'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:50:52'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:50:52'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:50:52'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:05'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:05'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:51:21'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:51:20' prior: 50625708 overrides: 16902254!
value

	^ value.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:51:29' prior: 50625421!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	depositLeg := DepositLeg new from: self withReceiver: aReceiverAccount andValue: aTransferValue.! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:51:31'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:31'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:31'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:31'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:31'!
FAILURE!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:41'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:51:41'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:41'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:41'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:41'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:41'!
FAILURE!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:51:44'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:45'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:46'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:47'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:47'!
FAILURE!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:52:04' prior: 50625942 overrides: 50625952!
value

	^ parentTransfer value.
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:52:08' prior: 50625947 overrides: 50625952!
value

	^ parentTransfer value.! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:52:11'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:52:11'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:52:11'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:52:11'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:52:21'!
test04TransferLegsKnowTheirValue

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.! !

!methodRemoval: TransferTest #test04 stamp: 'SF 5/30/2023 17:52:22'!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:07'!
parentTransfer

	^ parentTransfer
! !

!methodRemoval: DepositLeg #transfer stamp: 'SF 5/30/2023 17:53:07'!
transfer

	^ parentTransfer
!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:20'!
parentTransfer

	^ parentTransfer ! !

!methodRemoval: WithdrawalLeg #transfer stamp: 'SF 5/30/2023 17:53:20'!
transfer

	^ parentTransfer !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:28' prior: 50625603!
test03ADepositKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg parentTransfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:34' prior: 50625579!
test02AWithdrawalKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg parentTransfer equals: aTransfer.! !

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:53:35'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:53:35'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:53:35'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:53:35'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 5/30/2023 17:53:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:53:43'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:53:43'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:53:43'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 5/30/2023 17:53:43'!
PASSED!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:54:36' prior: 50625883!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
	
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:54:40' prior: 50625694!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.
	! !

TestCase subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:57:46'!
TestCase subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:58:34'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'SF 5/30/2023 17:58:36'!
TestCase subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

OrderedCollection new with: 'Balance = 0'!

OrderedCollection!

OrderedCollection new with: 'Balance = 0'!

OrderedCollection with: 'Balance = 0'!

OrderedCollection with: 'Balance = 0'!

OrderedCollection with: 'Balance = 0'!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:02:45'!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	"accountSummary := AccountSummary new ofAccount: account."
	
	self assert: accountSummary print equals: (OrderedCollection with: 'Balance = 0')
	! !

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 18:02:58'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'no messages' stamp: 'SF 5/30/2023 18:03:11' overrides: 16902957!
print

	^'Balance = 0'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:03:14' prior: 50626362 overrides: 16902957!
print

	^ 'Balance = 0'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:03:29' prior: 50626367 overrides: 16902957!
print

	^ OrderedCollection with: 'Balance = 0'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:03:57'!
ofAccount: anAccount
! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:04:06' prior: 50626340!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: accountSummary print equals: (OrderedCollection with: 'Balance = 0')
	! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:04:07'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:04:07'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:05:51'!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: accountSummary print equals: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 0')
	! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:05:59'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:05:59'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:05:59'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:06:05'!
PASSED!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 18:23:41'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:23:39' prior: 50626377!
ofAccount: anAccount

	account := anAccount ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:23:42' prior: 50626426!
ofAccount: anAccount

	account := anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:27:11' prior: 50626372 overrides: 16902957!
print

	^ account printTransactions! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:30:30'!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		aTransaction appendToSummary: printedTransactions 
		].! !

'hola', 1!

'hola', 1 asString!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:36:21' prior: 50626441!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [printedTransactions add: 'Depósito por ', aTransaction value asString, '.'].
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:36:29'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:36:29'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:37:23' prior: 50626437 overrides: 16902957!
print

	^ account printTransactions add: 'Balance: ', account balance asString.! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:37:24'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:24'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:28'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:37:46' prior: 50626494 overrides: 16902957!
print

	^ account printTransactions add: ('Balance: ', account balance asString).! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:37:48'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:48'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:51'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:51'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:38:14' prior: 50626511 overrides: 16902957!
print

	^ (account printTransactions) add: ('Balance: ', account balance asString).! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:38:15'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:38:15'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:38:53'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:38:53'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:39:39' prior: 50626528 overrides: 16902957!
print

	^ account printTransactions.! !

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:39:41'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:39:41'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:40:29' prior: 50626545 overrides: 16902957!
print

	^ (account printTransactions) add: 'test'.! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:40:30'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:40:30'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:40:32'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:41:00' prior: 50626555 overrides: 16902957!
print

	^ (account printTransactions) add: 'Balance: ', account balance.! !

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:41:09'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:41:09'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:41:19' prior: 50626568 overrides: 16902957!
print

	^ (account printTransactions) add: 'Balance: ', account balance asString .! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:41:20' prior: 50626579 overrides: 16902957!
print

	^ (account printTransactions) add: 'Balance: ', account balance asString.! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:41:21'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:41:21'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:41:22'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:41:48' prior: 50626396!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: accountSummary print equals: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100')
	! !

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:41:52'!
ERROR!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:42:07' prior: 50626599!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:42:08'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:42:28' prior: 50626586 overrides: 16902957!
print

	^ (account printTransactions) add: ('Balance: ', account balance asString).! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:42:29'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:42:29'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:42:30'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:42:48' prior: 50626630 overrides: 16902957!
print

	^ (account printTransactions) add: ('Balance = ', account balance asString).! !

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:42:53'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:43:47' prior: 50626451!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [printedTransactions add: ('Depósito por ', aTransaction value asString, '.')].
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:43:51'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:43:51'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:44:25' prior: 50626653!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [printedTransactions add: ('Depósito por ', (aTransaction value asString), '.')].
		].! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:44:30'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:44:30'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:44:32'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:44:32'!
ERROR!

(account printTransactions)!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:45:17' prior: 50626695!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: ['Depósito por ', (aTransaction value asString), '.'].
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:22'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:45:22'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:23'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:37'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:37'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:41'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:41'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:45:43'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:45:43'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:46:21' prior: 50626717!
printTransactions
	
	| res |
	res := OrderedCollection new.
	^transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:46:28' prior: 50626776!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		].
	^res.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:46:37'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:46:37'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:46:40'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:46:40'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:47:01' prior: 50626381!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:47:01'!
FAILURE!

----SNAPSHOT----(30 May 2023 18:47:18) CuisUniversity-5832.image priorSource: 9366758!

----STARTUP---- (31 May 2023 15:19:40) as /home/clinux01/Descargas/linux64/linux64/CuisUniversity-5832.image!


----End fileIn of /home/clinux01/Descargas/linux64/linux64/Portfolio-Solucion.st----!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:20:08'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:20:08'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:20:11'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:20:11'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:20:33'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:20:33'!
FAILURE!

accountSummary print!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:22:55' prior: 50627580 overrides: 16902957!
print
	
	| res |
	res := account printTransactions.
	res add: 'Balance = ', account balance asString.
	^ res.! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:22:56'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:22:56'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:23:39'!
test03

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100') equals: accountSummary print
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:24:09' prior: 50627520!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		].
	^res.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:24:15'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:24:17'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:24:17'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:24:17'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:27:39'!
test04

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: senderAccount.
	
	self assert: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:27:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:28:05' prior: 50627845!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		].
	^res.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sf 5/31/2023 15:28:06'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:28:19' prior: 50627913!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de', (aTransaction value asString), '.')].
		].
	^res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:28:30' prior: 50627957!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de ', (aTransaction value asString), '.')].
		].
	^res.! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:28:33'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:28:33'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:28:34'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:28:34'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:28:34'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:29' prior: 50627779!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	depositLeg := DepositLeg new from: self withReceiver: aReceiverAccount andValue: aTransferValue.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:36' prior: 50627745!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:44'!
from: aTransfer

	parentTransfer := aTransfer.
	! !

!methodRemoval: WithdrawalLeg #from:withSender:andValue: stamp: 'sf 5/31/2023 15:31:48'!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:55'!
from: aTransfer

	parentTransfer := aTransfer.
	
! !

!methodRemoval: DepositLeg #from:withReceiver:andValue: stamp: 'sf 5/31/2023 15:31:58'!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
	
!
!Transfer methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:08' prior: 50628005!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new from: self.
	depositLeg := DepositLeg new from: self.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:17' prior: 50628050!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new fromTransfer: self.
	depositLeg := DepositLeg new fromTransfer: self.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:24'!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
	! !

!methodRemoval: WithdrawalLeg #from: stamp: 'sf 5/31/2023 15:32:26'!
from: aTransfer

	parentTransfer := aTransfer.
	!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:31'!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
	
! !

!methodRemoval: DepositLeg #from: stamp: 'sf 5/31/2023 15:32:33'!
from: aTransfer

	parentTransfer := aTransfer.
	
!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'sf 5/31/2023 15:33:06'!
ERROR!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'sf 5/31/2023 15:33:06'!
ERROR!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:33:35' overrides: 50627602!
affectBalance: aBalance

	^aBalance + self value ! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:33:48' overrides: 50627602!
affectBalance: aBalance

	^aBalance - self value! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'sf 5/31/2023 15:33:54'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'sf 5/31/2023 15:33:54'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'sf 5/31/2023 15:33:54'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'sf 5/31/2023 15:33:54'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:33:58'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:33:58'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:33:58'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:33:58'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:34:48'!
test05

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:34:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:35:19' prior: 50627975!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: DepositLeg) ifTrue: [res add: ('Entrada por transferencia de ', (aTransaction value asString), '.')].
		].
	^res.! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:35:25'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:35:25'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:35:25'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:35:25'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:35:25'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:35:25'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:35:37' prior: 50628132!
test05

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:39:06' prior: 50628151!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		
		"(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: DepositLeg) ifTrue: [res add: ('Entrada por transferencia de ', (aTransaction value asString), '.')]."
		].
	^res.! !
!AccountTransaction methodsFor: 'value' stamp: 'sf 5/31/2023 15:39:16'!
asAccountSummaryEntry

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 15:40:05' overrides: 50628242!
asAccountSummaryEntry

	^ 'Depósito por ', (self value asString), '.'! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 15:40:29' prior: 50628247 overrides: 50628242!
asAccountSummaryEntry

	^ 'Depósito por ', (value asString), '.'! !
!DepositLeg methodsFor: 'value' stamp: 'sf 5/31/2023 15:41:09' overrides: 50628242!
asAccountSummaryEntry

	^ 'Entrada por transferencia de ', (self value asString), '.'
! !
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 15:41:47' overrides: 50628242!
asAccountSummaryEntry
	
	^ 'Salida por transferencia de ', (value asString), '.'! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:42:09' overrides: 50628242!
asAccountSummaryEntry
	
	^ 'Entrada por transferencia de ', (self value asString), '.'! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:42:11'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:42:11'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:42:11'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:42:11'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:42:11'!
PASSED!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:42:28' prior: 50628270 overrides: 50628242!
asAccountSummaryEntry
	
	^ 'Salida por transferencia de ', (self value asString), '.'! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:42:30'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:42:30'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:42:30'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:42:30'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:42:30'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:42:30'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:42:38'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:42:39'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:42:41'!
FAILURE!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:42:41'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 15:43:06' prior: 50628264 overrides: 50628242!
asAccountSummaryEntry
	
	^ 'Extracción por ', (value asString), '.'! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:43:13'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:43:13'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:43:13'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:43:13'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:43:13'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:43:24' prior: 50628219!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	^res.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:45:55'!
test06

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:46:55'!
test07

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:48:15' prior: 50628346!
test06

	| emptyPortfolio accountSummary |

	
	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:48:47' prior: 50628381!
test06

	| emptyPortfolio accountSummary |

	
	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:48:57' prior: 50628393!
test06

	| emptyPortfolio accountSummary |

	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:48:58'!
ERROR!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:49:04' prior: 50628362!
test07

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	"self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print"
	! !

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:49:08'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:49:08'!
ERROR!
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:49:49'!
printTransactions

	^ OrderedCollection with: 'Balance = 0'! !

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:49:54'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:49:54'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:20'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:20'!
FAILURE!
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:50:49' prior: 50628440!
printTransactions! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:51'!
ERROR!

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:51'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:56'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:56'!
ERROR!
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:51:19' prior: 50628455!
printTransactions

	^ OrderedCollection new.! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:51:57' prior: 50628417!
test07

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:52:10' prior: 50628505!
test07

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:52:12'!
FAILURE!
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:53:19' prior: 50628483!
printTransactions

	
	accounts do: [ :anAccount
		
		]
	
	"res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	^res."
	^ OrderedCollection new.! !
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:54:18' prior: 50628543!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	^ res.! !

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:54:30'!
FAILURE!

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:54:30'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:54:51' prior: 50628524!
test07

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:55:23'!
test01SummaryOfEmptyAccountOnlyShowsBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:55:26'!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:55:53'!
test02SummaryOfAccountWithDepositShowsDepositAndBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:55:56'!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:56:12'!
test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:56:14'!
test03

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:22'!
test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: senderAccount.
	
	self assert: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:57:24'!
test04

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: senderAccount.
	
	self assert: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:40'!
test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:57:41'!
test05

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:59'!
test06SummaryOfEmptyPortfolioOnlyShowsBalance

	| emptyPortfolio accountSummary |

	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:58:01'!
test06

	| emptyPortfolio accountSummary |

	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:59:15'!
test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:59:17'!
test07

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	!

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:02:29'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:02:37'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'no messages' stamp: 'sf 5/31/2023 16:04:21'!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.! !
!TransferNet methodsFor: 'no messages' stamp: 'sf 5/31/2023 16:04:30'!
ofAccount: anAccount! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:04:36' overrides: 16902957!
print

	^ 0! !

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:04:39'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:06:05'!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:06:08'!
FAILURE!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:06:33'!
Object subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:06:32' prior: 50628823!
ofAccount: anAccount

	account := anAccount.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:06:47' prior: 50628827 overrides: 16902957!
print

	^ account balance.! !

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:06:48'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:06:48'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:07:03'!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:07:19' prior: 50628871!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:07:21'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:09:53'!
transferNet
	
	| res |
	res := 0.
	transactions do:  [ :aTransaction | 
		res := aTransaction affectTransferNet: res.
		].
	^res.! !
!AccountTransaction methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:14'!
affectTransferNet: aTransferNetValue

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:32' overrides: 50628909!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.! !
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:36' overrides: 50628909!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:07' overrides: 50628909!
affectTransferNet: aTransferNetValue

	^aTransferNetValue + self value ! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:26' overrides: 50628909!
affectTransferNet: aTransferNetValue

	^aTransferNetValue - self value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:35' overrides: 16902254!
value

	^ account balance.! !

!methodRemoval: TransferNet #print stamp: 'sf 5/31/2023 16:11:37'!
print

	^ account balance.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:42' prior: 50628815!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet value.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:49' prior: 50628833!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet value.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:52' prior: 50628885!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet value.! !

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:11:52'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:12:20' prior: 50628937 overrides: 16902254!
value

	^ account transferNet.! !

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:12:21'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:12:21'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:12:21'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:14:09'!
test04

	| emptyPortfolio transfernet |

	emptyPortfolio := Portfolio new.
	
	transfernet := TransferNet new ofAccount: emptyPortfolio.
	
	self assert: 0 equals: transfernet value.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:14:52'!
transferNet

	^0! !

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:14:58'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:15:01'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:15:01'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:15:01'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:15:01'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:18:10'!
test05

	| simplePortfolio senderAccount receiverAccount transfernet |

	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	simplePortfolio := Portfolio with: senderAccount.
	
	transfernet := TransferNet new ofAccount: simplePortfolio.
		
	self assert: -100 equals: transfernet value! !

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:18:12'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:19:09' prior: 50628553!
printTransactions

	| res |
	res := 0.
	accounts do: [ :anAccount |
		res := anAccount affectTransferNet: res.
		].
	^ res.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:20:28' prior: 50629039!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	^ res.! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:21:11' prior: 50629005!
transferNet

	| res |
	res := 0.
	accounts do: [ :anAccount |
		res := res + anAccount transferNet.
		].
	^ res.! !

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:21:19'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:21:19'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:21:19'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:21:19'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:21:19'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:22:34' prior: 50627822 overrides: 16902957!
print
	
	| res |
	res := account printTransactions.
	^ res.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:22:43' prior: 50629102 overrides: 16902957!
print
	
	^ account printTransactions.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:22:55' prior: 50628338!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	res add: 'Balance = ', self balance asString.
	^res.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:23:10' prior: 50629046!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:23:12'!
FAILURE!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:23:12'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:24:07' prior: 50629122!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		res removeLast.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:24:16'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:24:16'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:24:16'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:24:16'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:24:16'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:25:05' prior: 50629113!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:25:27'!
printBalance

	^ OrderedCollection with: 'Balance = ', self balance asString.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:25:52' prior: 50629164!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:26:39'!
printTransactionsAndBalance
	
	^ self printTransactions addAll: self printBalance ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:27:12' prior: 50629108 overrides: 16902957!
print
	
	^ account printTransactionsAndBalance.
	! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:27:41'!
printTransactionsAndBalance

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !

!methodRemoval: Portfolio #printTransactions stamp: 'sf 5/31/2023 16:27:43'!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:27:45'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:27:45'!
FAILURE!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:27:45'!
FAILURE!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:27:45'!
FAILURE!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:27:45'!
FAILURE!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:27:45'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:27:45'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:27:51'!
FAILURE!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:27:51'!
FAILURE!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:28:06'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:28:57' prior: 50629321!
printTransactionsAndBalance
	
	| res |
	res := self printTransactions.
	res addAll: self printBalance.
	^ res.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:29:17'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:29:17'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:29:17'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:29:17'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:29:17'!
PASSED!

----SNAPSHOT----(31 May 2023 16:29:41) CuisUniversity-5832.image priorSource: 9366758!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:31:21'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:31:36'!
Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:31:44'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:32:03'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:32:05'!
Report subclass: #TransferNet
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:32:09'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:32:14'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:32:17'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'no messages' stamp: 'sf 5/31/2023 16:32:25'!
ofAccount: anAccount

	account := anAccount.! !

!methodRemoval: AccountSummary #ofAccount: stamp: 'sf 5/31/2023 16:32:29'!
ofAccount: anAccount

	account := anAccount.!

!methodRemoval: TransferNet #ofAccount: stamp: 'sf 5/31/2023 16:32:32'!
ofAccount: anAccount

	account := anAccount.!
!Report methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:32:46' overrides: 16902957!
print

	self subclassResponsibility.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:01' overrides: 50629573!
print

	^ account transferNet.! !

!methodRemoval: TransferNet #value stamp: 'sf 5/31/2023 16:33:01'!
value

	^ account transferNet.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:17' prior: 50628945!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:20' prior: 50628954!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:23' prior: 50628968!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:25' prior: 50628997!
test04

	| emptyPortfolio transfernet |

	emptyPortfolio := Portfolio new.
	
	transfernet := TransferNet new ofAccount: emptyPortfolio.
	
	self assert: 0 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:27' prior: 50629021!
test05

	| simplePortfolio senderAccount receiverAccount transfernet |

	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	simplePortfolio := Portfolio with: senderAccount.
	
	transfernet := TransferNet new ofAccount: simplePortfolio.
		
	self assert: -100 equals: transfernet print! !

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:33:29'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:33:29'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:33:29'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:33:29'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:33:29'!
PASSED!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:34:02'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportTest subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:34:10'!
ReportTest subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:34:17'!
ReportTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:34:43'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:34:43'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:34:43'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:34:43'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:34:43'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:36:42' prior: 50629298!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction |
		report add: aTransaction asAccountSummaryEntry.
		]! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:36:45'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:36:45'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:36:45'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:36:45'!
ERROR!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:36:45'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:36:45'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:36:45'!
FAILURE!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:36:56'!
ERROR!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:36:56'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:37:24' prior: 50629737!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :aTransaction :report |
		report add: aTransaction asAccountSummaryEntry.
		]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:37:28'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:37:28'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:37:32'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:37:32'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:37:32'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:37:32'!
ERROR!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:37:32'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:37:32'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:37:32'!
ERROR!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:37:35'!
ERROR!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:37:35'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:37:54' prior: 50629786!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction  |
		report add: aTransaction asAccountSummaryEntry.
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:38:02' prior: 50629889!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction  |
		aTransaction asAccountSummaryEntry.
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:39:37' prior: 50629902!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction  |
		report add: aTransaction asAccountSummaryEntry.
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:41:44' prior: 50629914!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions collect: [ :aTransaction | aTransaction asAccountSummaryEntry ].! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:42:02' prior: 50629927!
printTransactions
	
	^ transactions collect: [ :aTransaction | aTransaction asAccountSummaryEntry ].! !

----SNAPSHOT----(31 May 2023 16:43:53) CuisUniversity-5832.image priorSource: 9530019!

----STARTUP---- (31 May 2023 19:39:43) as C:\Users\005675613\Documents\Inge 1\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\005675613\Documents\Inge 1\windows64\Portfolio-Solucion.st----!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 19:41:14'!
Report subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:41:10' prior: 50638202 overrides: 50638185!
print
	
	account addTransactionsToReport: self.
	^report.
	! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 19:41:31'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 19:41:31'!
Object subclass: #Report
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 19:42:14'!
addTransactionsToReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/31/2023 19:42:31'!
addToReport: aReport

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'SF 5/31/2023 19:42:51' overrides: 50638302!
addToReport: aReport

	aReport addDeposit: self.! !
!DepositLeg methodsFor: 'value' stamp: 'SF 5/31/2023 19:43:06' overrides: 50638302!
addToReport: aReport

	aReport addDepositLeg: self.! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/31/2023 19:43:21' overrides: 50638302!
addToReport: aReport

	aReport addWithdraw: self! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:43:47' overrides: 50638302!
addToReport: aReport

	aReport addWithdrawLeg: self.! !

!classRenamed: #WithdrawalLeg as: #WithdrawLeg stamp: 'SF 5/31/2023 19:43:55'!
Smalltalk renameClassNamed: #WithdrawalLeg as: #WithdrawLeg!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:43:55' prior: 50638240!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawLeg new fromTransfer: self.
	depositLeg := DepositLeg new fromTransfer: self.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:37'!
addDeposit: aDeposit

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:43'!
addDepositLeg: aDepositLeg

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:55'!
addWithdraw: aWithdraw
	
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:45:04'!
addWithdrawLeg: aWithdrawLeg
	
	self subclassResponsibility ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:46:04' overrides: 50638344!
addDeposit: aDeposit

	report add: 'Depósito por ', aDeposit value, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:46:41' overrides: 50638349!
addDepositLeg: aDepositLeg

	report add: 'Entrada por transferencia de ', aDepositLeg value, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:47:03' overrides: 50638354!
addWithdraw: aWithdraw

	report add: 'Extracción por ', aWithdraw value, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:47:26' overrides: 50638359!
addWithdrawLeg: aWithdrawLeg

	report add: 'Salida por transferencia de ', aWithdrawLeg value, '.'.! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:47:40'!
FAILURE!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:47:40'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:47:57' prior: 50638180!
ofAccount: anAccount
	account := anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:48:10' prior: 50638276 overrides: 50638185!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	^report.
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:48:21' prior: 50638404 overrides: 50638185!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 19:48:41'!
addBalanceToReport: aReport

	aReport addBalance: self balance.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:49:18'!
addBalance: aBalanceValue

	report add: 'Balance = ', aBalanceValue.! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:49:29'!
ERROR!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:49:29'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:49:55' prior: 50638411 overrides: 50638185!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	
	^report.
	! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:50:04'!
FAILURE!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:50:04'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:50:39' prior: 50638437 overrides: 50638185!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:09' prior: 50638423!
addBalance: aBalanceValue

	report add: 'Balance = ', aBalanceValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:27' prior: 50638365 overrides: 50638344!
addDeposit: aDeposit

	report add: 'Depósito por ', aDeposit value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:31' prior: 50638371 overrides: 50638349!
addDepositLeg: aDepositLeg

	report add: 'Entrada por transferencia de ', aDepositLeg value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:36' prior: 50638378 overrides: 50638354!
addWithdraw: aWithdraw

	report add: 'Extracción por ', aWithdraw value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:40' prior: 50638384 overrides: 50638359!
addWithdrawLeg: aWithdrawLeg

	report add: 'Salida por transferencia de ', aWithdrawLeg value asString, '.'.! !

----SNAPSHOT----(31 May 2023 19:51:54) CuisUniversity-5832.image priorSource: 9366758!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:52:00'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 19:52:05'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 5/31/2023 19:52:14'!
ERROR!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 19:52:14'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 19:52:19'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 19:52:22'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 19:52:25'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 19:53:40'!
addTransactionsToReport: aReport

	accounts do: [ :anAccount | anAccount addTransactionsToReport: aReport ].! !

!methodRemoval: ReceptiveAccount #addBalanceToReport: stamp: 'SF 5/31/2023 19:53:57'!
addBalanceToReport: aReport

	aReport addBalance: self balance.!
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 19:54:02'!
addBalanceToReport: aReport

	aReport addBalance: self balance.! !

----SNAPSHOT----(31 May 2023 19:54:13) CuisUniversity-5832.image priorSource: 9818991!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:54:39' overrides: 50638344!
addDeposit: aDeposit! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:54:43' prior: 50638597 overrides: 50638344!
addDeposit: aWithdraw! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:54:50' prior: 50638602 overrides: 50638344!
addDeposit: aDeposit! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:00' overrides: 50638354!
addWithdraw: aWithdraw! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:08' overrides: 50638349!
addDepositLeg: aDepositLeg

	report add: 'Entrada por transferencia de ', aDepositLeg value asString, '.'.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:18' overrides: 50638359!
addWithdrawLeg: aWithdrawLeg

	report add: 'Salida por transferencia de ', aWithdrawLeg value asString, '.'.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:30' prior: 50638219 overrides: 50638185!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:55:34'!
FAILURE!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 19:55:34'!
FAILURE!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 19:55:34'!
FAILURE!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 19:55:34'!
FAILURE!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 19:55:34'!
FAILURE!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:55:39'!
FAILURE!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:55:39'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:57:27' prior: 50638630 overrides: 50638185!
print
	
	report := 0.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:57:45' prior: 50638615 overrides: 50638349!
addDepositLeg: aDepositLeg

	report + aDepositLeg value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:57:53' prior: 50638663 overrides: 50638349!
addDepositLeg: aDepositLeg

	report := report + aDepositLeg value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:58:10' prior: 50638622 overrides: 50638359!
addWithdrawLeg: aWithdrawLeg

	report := report + aWithdrawLeg value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:58:18' prior: 50638655 overrides: 50638185!
print
	
	report := 0.
	account addTransactionsToReport: self.
	^report.
	! !

----SNAPSHOT----(31 May 2023 19:58:31) CuisUniversity-5832.image priorSource: 9821250!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:58:34'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 19:58:34'!
FAILURE!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 19:58:34'!
FAILURE!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 19:58:34'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 19:58:34'!
FAILURE!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:58:43'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 19:58:45'!
FAILURE!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 19:58:45'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:59:07' prior: 50638675 overrides: 50638359!
addWithdrawLeg: aWithdrawLeg

	report := report - aWithdrawLeg value! !

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:59:10'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 19:59:10'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 19:59:10'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 19:59:10'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 19:59:10'!
PASSED!

!methodRemoval: Portfolio #printTransactionsAndBalance stamp: 'SF 5/31/2023 19:59:20'!
printTransactionsAndBalance

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.!

!methodRemoval: Portfolio #transferNet stamp: 'SF 5/31/2023 19:59:25'!
transferNet

	| res |
	res := 0.
	accounts do: [ :anAccount |
		res := res + anAccount transferNet.
		].
	^ res.!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'SF 5/31/2023 19:59:31'!
transferNet
	
	| res |
	res := 0.
	transactions do:  [ :aTransaction | 
		res := aTransaction affectTransferNet: res.
		].
	^res.!

!methodRemoval: ReceptiveAccount #printTransactionsAndBalance stamp: 'SF 5/31/2023 19:59:33'!
printTransactionsAndBalance
	
	| res |
	res := self printTransactions.
	res addAll: self printBalance.
	^ res.!

!methodRemoval: ReceptiveAccount #printTransactions stamp: 'SF 5/31/2023 19:59:34'!
printTransactions
	
	^ transactions collect: [ :aTransaction | aTransaction asAccountSummaryEntry ].!

!methodRemoval: ReceptiveAccount #printBalance stamp: 'SF 5/31/2023 19:59:38'!
printBalance

	^ OrderedCollection with: 'Balance = ', self balance asString.!

----SNAPSHOT----(31 May 2023 20:02:52) CuisUniversity-5832.image priorSource: 9825132!