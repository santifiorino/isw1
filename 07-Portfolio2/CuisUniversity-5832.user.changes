

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (30 May 2023 16:58:19) as /home/clinux01/Descargas/linux64/CuisUniversity-5832.image!


----End fileIn of /home/clinux01/Descargas/2023-1c/06-Portfolio1/Portfolio-Solucion.st----!

TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransactionTest category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 16:59:33'!
TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransactionTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:01:39'!
test01

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	senderAccount transfer: 100 to: receiverAccount.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !

!testRun: #TransactionTest #test01 stamp: 'SF 5/30/2023 17:01:43'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:02:06'!
transfer: aRenameMe1 to: receiverAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:02:27' prior: 50625113!
transfer: anAmountToTransfer to: anAccountToTransferTo

	 
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:03:57' prior: 50625119!
transfer: anAmountToTransfer to: anAccountToTransferTo

	Withdraw register: anAmountToTransfer on: self.
	Deposit register: anAmountToTransfer on: anAccountToTransferTo.
	
	 
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 17:03:59'!
PASSED!

!testRun: #TransactionTest #test01 stamp: 'SF 5/30/2023 17:04:04'!
PASSED!

!classRenamed: #TransactionTest as: #TransferenceTest stamp: 'SF 5/30/2023 17:11:36'!
Smalltalk renameClassNamed: #TransactionTest as: #TransferenceTest!

!classRenamed: #TransferenceTest as: #TransferTest stamp: 'SF 5/30/2023 17:11:46'!
Smalltalk renameClassNamed: #TransferenceTest as: #TransferTest!

Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:12:33'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:12:57' prior: 50625099!
test01

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !
!Transfer methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:13:32'!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	! !

!methodRemoval: ReceptiveAccount #transfer:to: stamp: 'SF 5/30/2023 17:13:40'!
transfer: anAmountToTransfer to: anAccountToTransferTo

	Withdraw register: anAmountToTransfer on: self.
	Deposit register: anAmountToTransfer on: anAccountToTransferTo.
	
	 
	!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:14:09' prior: 50625194!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	Withdraw register: aTransferValue on: aReceiverAccount.
	Deposit register: aTransferValue on: aSenderAccount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:14:15' prior: 50625208!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	Withdraw register: aTransferValue on: aSenderAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:14:18'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:19:22'!
test02

	| senderAccount receiverAccount transfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: transfer withdrawalLeg transfer equals: transfer! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:20:03' prior: 50625228!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:20:08' prior: 50625240!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:20:31'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:20:30' prior: 50625217!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := Withdraw register: aTransferValue on: aSenderAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:20:43'!
withdrawalLeg

	^ withdrawalLeg! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:21:08'!
transfer

	^ self! !

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:21:09'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:21:09'!
ERROR!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:21:09'!
ERROR!

Transfer subclass: #WithdrawalLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:21:44'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:23:57' prior: 50625272!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andReceiver: aReceiverAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:24:47'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:24:46'!
from: aTransfer withSender: aSenderAccount andReceiver: aReceiverAccount

	parentTransfer := aTransfer.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:26:29' prior: 50625308!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	Deposit register: aTransferValue on: aReceiverAccount.! !

!methodRemoval: WithdrawalLeg #from:withSender:andReceiver: stamp: 'SF 5/30/2023 17:26:32'!
from: aTransfer withSender: aSenderAccount andReceiver: aReceiverAccount

	parentTransfer := aTransfer.
	!
!WithdrawalLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:26:44'!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:27:14' prior: 50625349!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	Withdraw register: aTransferValue on: aSenderAccount.! !

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:27:44'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:27:44'!
FAILURE!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:27:44'!
FAILURE!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:28:02' overrides: 50625285!
transfer

	^ parentTransfer! !

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:28:17'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:28:17'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:28:20'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:28:22'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:28:23'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:28:23'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:28:45' prior: 50625252!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.! !

Transfer subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:28:55'!
Transfer subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:29:25'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:29:23' prior: 50625333!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	depositLeg := DepositLeg new from: self withReceiver: aReceiverAccount andValue: aTransferValue.! !
!DepositLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:29:49'!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.

! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:30:07' prior: 50625432!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	Deposit register: aTransferValue on: aReceiverAccount.
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:30:21' overrides: 50625285!
transfer

	^ parentTransfer
! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:30:46' prior: 50625388!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.! !

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:30:47'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:30:47'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:30:47'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:30:56'!
test03

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer transferLeg transfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:31:15' prior: 50625471!
test03

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:31:26'!
depositLeg

	^ depositLeg! !

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:31:27'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:31:27'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'SF 5/30/2023 17:31:27'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'SF 5/30/2023 17:31:29'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'SF 5/30/2023 17:31:29'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'SF 5/30/2023 17:31:29'!
PASSED!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:33:32'!
Transfer subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:33:31' prior: 50625439!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:33:44'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:33:43' prior: 50625355!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:34:34'!
transaction

	^ transaction
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:34:39' prior: 50625370 overrides: 50625285!
transfer

	^ transaction! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:07'!
test01ATransactionModifiesBothAccountsBalances

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !

!methodRemoval: TransferTest #test01 stamp: 'SF 5/30/2023 17:37:10'!
test01

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:41'!
test02AWithdrawalKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.! !

!methodRemoval: TransferTest #test02 stamp: 'SF 5/30/2023 17:37:44'!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:53'!
test03ADepositKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.! !

!methodRemoval: TransferTest #test03 stamp: 'SF 5/30/2023 17:37:56'!
test03

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:38:47'!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer value equals: 100.! !

Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:39:08'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:39:50'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:39:53'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:04' prior: 50625538!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.
	value := aTransferValue.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:10' prior: 50625684!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	value := aTransferValue.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.
	! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:25' overrides: 16902254!
value
	
	^ value
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:33' overrides: 16902254!
value

	self subclassResponsibility.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:40:55' prior: 50625627!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:41:01'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:41:01'!
FAILURE!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:41:01'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:41:01'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:41:01'!
FAILURE!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:41:09'!
FAILURE!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:42:37' prior: 50625551 overrides: 50625285!
transfer

	^ parentTransfer ! !

AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:45:58'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:46:24'!
AccountTransaction subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:46:27'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:46:27'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:46:27'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:46:27'!
PASSED!

AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:47:31'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:47:53'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:47:58'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: WithdrawalLeg #value stamp: 'SF 5/30/2023 17:48:06'!
value
	
	^ value
	!

!methodRemoval: Withdraw #value stamp: 'SF 5/30/2023 17:48:09'!
value

	^ value!

!methodRemoval: Deposit #value stamp: 'SF 5/30/2023 17:48:13'!
value

	^ value!
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/30/2023 17:48:18' prior: 50624984 overrides: 16902254!
value 

	^ value ! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:48:22'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:48:22'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:48:22'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:48:22'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:48:26'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:48:26'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:48:26'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:48:26'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:48:41' prior: 50625712!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.! !

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:48:42'!
FAILURE!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:49:08' prior: 50625521!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	value := aTransferValue.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
	
! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:49:11'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:49:11'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:49:11'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:49:11'!
PASSED!

Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:49:46'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:49:51'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:49:53'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:50:06' overrides: 50625838!
value

	parentTransfer value.
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:50:13' overrides: 50625838!
value

	parentTransfer value.! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:20' prior: 50625838 overrides: 16902254!
value 

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:40' overrides: 50625952!
value

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:47' overrides: 50625952!
value

	^ value! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 5/30/2023 17:50:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 17:50:50'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:50:52'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:50:52'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:50:52'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:50:52'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:50:52'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:05'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:05'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:51:21'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:51:20' prior: 50625708 overrides: 16902254!
value

	^ value.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:51:29' prior: 50625421!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	depositLeg := DepositLeg new from: self withReceiver: aReceiverAccount andValue: aTransferValue.! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:51:31'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:31'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:31'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:31'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:31'!
FAILURE!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:41'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:51:41'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:41'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:41'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:41'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:41'!
FAILURE!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:51:44'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:45'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:51:46'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:47'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:51:47'!
FAILURE!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:52:04' prior: 50625942 overrides: 50625952!
value

	^ parentTransfer value.
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:52:08' prior: 50625947 overrides: 50625952!
value

	^ parentTransfer value.! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:52:11'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:52:11'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:52:11'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'SF 5/30/2023 17:52:11'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:52:21'!
test04TransferLegsKnowTheirValue

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.! !

!methodRemoval: TransferTest #test04 stamp: 'SF 5/30/2023 17:52:22'!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:07'!
parentTransfer

	^ parentTransfer
! !

!methodRemoval: DepositLeg #transfer stamp: 'SF 5/30/2023 17:53:07'!
transfer

	^ parentTransfer
!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:20'!
parentTransfer

	^ parentTransfer ! !

!methodRemoval: WithdrawalLeg #transfer stamp: 'SF 5/30/2023 17:53:20'!
transfer

	^ parentTransfer !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:28' prior: 50625603!
test03ADepositKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg parentTransfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:34' prior: 50625579!
test02AWithdrawalKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg parentTransfer equals: aTransfer.! !

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:53:35'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:53:35'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:53:35'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:53:35'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 5/30/2023 17:53:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 17:53:38'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/30/2023 17:53:43'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:53:43'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/30/2023 17:53:43'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 5/30/2023 17:53:43'!
PASSED!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:54:36' prior: 50625883!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
	
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:54:40' prior: 50625694!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.
	! !

TestCase subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:57:46'!
TestCase subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 17:58:34'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'SF 5/30/2023 17:58:36'!
TestCase subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

OrderedCollection new with: 'Balance = 0'!

OrderedCollection!

OrderedCollection new with: 'Balance = 0'!

OrderedCollection with: 'Balance = 0'!

OrderedCollection with: 'Balance = 0'!

OrderedCollection with: 'Balance = 0'!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:02:45'!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	"accountSummary := AccountSummary new ofAccount: account."
	
	self assert: accountSummary print equals: (OrderedCollection with: 'Balance = 0')
	! !

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 18:02:58'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'no messages' stamp: 'SF 5/30/2023 18:03:11' overrides: 16902957!
print

	^'Balance = 0'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:03:14' prior: 50626362 overrides: 16902957!
print

	^ 'Balance = 0'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:03:29' prior: 50626367 overrides: 16902957!
print

	^ OrderedCollection with: 'Balance = 0'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:03:57'!
ofAccount: anAccount
! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:04:06' prior: 50626340!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: accountSummary print equals: (OrderedCollection with: 'Balance = 0')
	! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:04:07'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:04:07'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:05:51'!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: accountSummary print equals: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 0')
	! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:05:59'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:05:59'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:05:59'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:06:05'!
PASSED!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'SF 5/30/2023 18:23:41'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:23:39' prior: 50626377!
ofAccount: anAccount

	account := anAccount ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:23:42' prior: 50626426!
ofAccount: anAccount

	account := anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:27:11' prior: 50626372 overrides: 16902957!
print

	^ account printTransactions! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:30:30'!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		aTransaction appendToSummary: printedTransactions 
		].! !

'hola', 1!

'hola', 1 asString!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:36:21' prior: 50626441!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [printedTransactions add: 'Depósito por ', aTransaction value asString, '.'].
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 18:36:23'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:36:29'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:36:29'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:37:23' prior: 50626437 overrides: 16902957!
print

	^ account printTransactions add: 'Balance: ', account balance asString.! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:37:24'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:24'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:28'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:37:46' prior: 50626494 overrides: 16902957!
print

	^ account printTransactions add: ('Balance: ', account balance asString).! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:37:48'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:48'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:51'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:37:51'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:38:14' prior: 50626511 overrides: 16902957!
print

	^ (account printTransactions) add: ('Balance: ', account balance asString).! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:38:15'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:38:15'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:38:53'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:38:53'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:39:39' prior: 50626528 overrides: 16902957!
print

	^ account printTransactions.! !

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:39:41'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:39:41'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:40:29' prior: 50626545 overrides: 16902957!
print

	^ (account printTransactions) add: 'test'.! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:40:30'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:40:30'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:40:32'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:41:00' prior: 50626555 overrides: 16902957!
print

	^ (account printTransactions) add: 'Balance: ', account balance.! !

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:41:09'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:41:09'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:41:19' prior: 50626568 overrides: 16902957!
print

	^ (account printTransactions) add: 'Balance: ', account balance asString .! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:41:20' prior: 50626579 overrides: 16902957!
print

	^ (account printTransactions) add: 'Balance: ', account balance asString.! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:41:21'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:41:21'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:41:22'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:41:48' prior: 50626396!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: accountSummary print equals: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100')
	! !

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:41:52'!
ERROR!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:42:07' prior: 50626599!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:42:08'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:42:28' prior: 50626586 overrides: 16902957!
print

	^ (account printTransactions) add: ('Balance: ', account balance asString).! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:42:29'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:42:29'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:42:30'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:42:48' prior: 50626630 overrides: 16902957!
print

	^ (account printTransactions) add: ('Balance = ', account balance asString).! !

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:42:53'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:43:47' prior: 50626451!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [printedTransactions add: ('Depósito por ', aTransaction value asString, '.')].
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 18:43:48'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:43:51'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:43:51'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:44:25' prior: 50626653!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [printedTransactions add: ('Depósito por ', (aTransaction value asString), '.')].
		].! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:44:30'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:44:30'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:44:32'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:44:32'!
ERROR!

(account printTransactions)!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:45:17' prior: 50626695!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: ['Depósito por ', (aTransaction value asString), '.'].
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 18:45:20'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:22'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:45:22'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:23'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:37'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:37'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:41'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:45:41'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:45:43'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:45:43'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:46:21' prior: 50626717!
printTransactions
	
	| res |
	res := OrderedCollection new.
	^transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:46:28' prior: 50626776!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		].
	^res.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/30/2023 18:46:34'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:46:37'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'SF 5/30/2023 18:46:37'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:46:40'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:46:40'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:47:01' prior: 50626381!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test01 stamp: 'SF 5/30/2023 18:47:01'!
FAILURE!

----SNAPSHOT----(30 May 2023 18:47:18) CuisUniversity-5832.image priorSource: 9366758!

----STARTUP---- (31 May 2023 15:19:40) as /home/clinux01/Descargas/linux64/linux64/CuisUniversity-5832.image!


----End fileIn of /home/clinux01/Descargas/linux64/linux64/Portfolio-Solucion.st----!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:20:08'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:20:08'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:20:11'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:20:11'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:20:33'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:20:33'!
FAILURE!

accountSummary print!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:22:55' prior: 50627580 overrides: 16902957!
print
	
	| res |
	res := account printTransactions.
	res add: 'Balance = ', account balance asString.
	^ res.! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:22:56'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:22:56'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:23:39'!
test03

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100') equals: accountSummary print
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:24:09' prior: 50627520!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		].
	^res.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sf 5/31/2023 15:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:24:15'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:24:17'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:24:17'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:24:17'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:27:39'!
test04

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: senderAccount.
	
	self assert: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:27:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:28:05' prior: 50627845!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		].
	^res.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sf 5/31/2023 15:28:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sf 5/31/2023 15:28:06'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:28:19' prior: 50627913!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de', (aTransaction value asString), '.')].
		].
	^res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:28:30' prior: 50627957!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de ', (aTransaction value asString), '.')].
		].
	^res.! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:28:33'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:28:33'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:28:34'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:28:34'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:28:34'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:29' prior: 50627779!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	depositLeg := DepositLeg new from: self withReceiver: aReceiverAccount andValue: aTransferValue.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:36' prior: 50627745!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:44'!
from: aTransfer

	parentTransfer := aTransfer.
	! !

!methodRemoval: WithdrawalLeg #from:withSender:andValue: stamp: 'sf 5/31/2023 15:31:48'!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:55'!
from: aTransfer

	parentTransfer := aTransfer.
	
! !

!methodRemoval: DepositLeg #from:withReceiver:andValue: stamp: 'sf 5/31/2023 15:31:58'!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
	
!
!Transfer methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:08' prior: 50628005!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new from: self.
	depositLeg := DepositLeg new from: self.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:17' prior: 50628050!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new fromTransfer: self.
	depositLeg := DepositLeg new fromTransfer: self.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:24'!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
	! !

!methodRemoval: WithdrawalLeg #from: stamp: 'sf 5/31/2023 15:32:26'!
from: aTransfer

	parentTransfer := aTransfer.
	!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:31'!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
	
! !

!methodRemoval: DepositLeg #from: stamp: 'sf 5/31/2023 15:32:33'!
from: aTransfer

	parentTransfer := aTransfer.
	
!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'sf 5/31/2023 15:33:06'!
ERROR!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'sf 5/31/2023 15:33:06'!
ERROR!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:33:35' overrides: 50627602!
affectBalance: aBalance

	^aBalance + self value ! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:33:48' overrides: 50627602!
affectBalance: aBalance

	^aBalance - self value! !

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'sf 5/31/2023 15:33:54'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'sf 5/31/2023 15:33:54'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'sf 5/31/2023 15:33:54'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'sf 5/31/2023 15:33:54'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:33:58'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:33:58'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:33:58'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:33:58'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:34:48'!
test05

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:34:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:35:19' prior: 50627975!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: DepositLeg) ifTrue: [res add: ('Entrada por transferencia de ', (aTransaction value asString), '.')].
		].
	^res.! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:35:25'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:35:25'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:35:25'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:35:25'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:35:25'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:35:25'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:35:37' prior: 50628132!
test05

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:35:39'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:39:06' prior: 50628151!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		
		"(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: DepositLeg) ifTrue: [res add: ('Entrada por transferencia de ', (aTransaction value asString), '.')]."
		].
	^res.! !
!AccountTransaction methodsFor: 'value' stamp: 'sf 5/31/2023 15:39:16'!
asAccountSummaryEntry

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 15:40:05' overrides: 50628242!
asAccountSummaryEntry

	^ 'Depósito por ', (self value asString), '.'! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 15:40:29' prior: 50628247 overrides: 50628242!
asAccountSummaryEntry

	^ 'Depósito por ', (value asString), '.'! !
!DepositLeg methodsFor: 'value' stamp: 'sf 5/31/2023 15:41:09' overrides: 50628242!
asAccountSummaryEntry

	^ 'Entrada por transferencia de ', (self value asString), '.'
! !
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 15:41:47' overrides: 50628242!
asAccountSummaryEntry
	
	^ 'Salida por transferencia de ', (value asString), '.'! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:42:09' overrides: 50628242!
asAccountSummaryEntry
	
	^ 'Entrada por transferencia de ', (self value asString), '.'! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:42:11'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:42:11'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:42:11'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:42:11'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:42:11'!
PASSED!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:42:28' prior: 50628270 overrides: 50628242!
asAccountSummaryEntry
	
	^ 'Salida por transferencia de ', (self value asString), '.'! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:42:30'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:42:30'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:42:30'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:42:30'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:42:30'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:42:30'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:42:38'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:42:39'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:42:41'!
FAILURE!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:42:41'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 15:43:06' prior: 50628264 overrides: 50628242!
asAccountSummaryEntry
	
	^ 'Extracción por ', (value asString), '.'! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:43:13'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:43:13'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:43:13'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:43:13'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:43:13'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:43:24' prior: 50628219!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	^res.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:45:55'!
test06

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:46:55'!
test07

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:48:15' prior: 50628346!
test06

	| emptyPortfolio accountSummary |

	
	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:48:47' prior: 50628381!
test06

	| emptyPortfolio accountSummary |

	
	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:48:57' prior: 50628393!
test06

	| emptyPortfolio accountSummary |

	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:48:58'!
ERROR!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:49:04' prior: 50628362!
test07

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	"self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print"
	! !

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:49:08'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:49:08'!
ERROR!
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:49:49'!
printTransactions

	^ OrderedCollection with: 'Balance = 0'! !

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:49:54'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:49:54'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:20'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:20'!
FAILURE!
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:50:49' prior: 50628440!
printTransactions! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:51'!
ERROR!

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:50:51'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:51'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:56'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:50:56'!
ERROR!
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:51:19' prior: 50628455!
printTransactions

	^ OrderedCollection new.! !

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:51:21'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:51:57' prior: 50628417!
test07

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:52:10' prior: 50628505!
test07

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:52:12'!
FAILURE!
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:53:19' prior: 50628483!
printTransactions

	
	accounts do: [ :anAccount
		
		]
	
	"res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	^res."
	^ OrderedCollection new.! !
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:54:18' prior: 50628543!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	^ res.! !

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:54:30'!
FAILURE!

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:54:30'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:54:51' prior: 50628524!
test07

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:54:52'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:55:23'!
test01SummaryOfEmptyAccountOnlyShowsBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test01 stamp: 'sf 5/31/2023 15:55:26'!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:55:53'!
test02SummaryOfAccountWithDepositShowsDepositAndBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test02 stamp: 'sf 5/31/2023 15:55:56'!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:56:12'!
test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test03 stamp: 'sf 5/31/2023 15:56:14'!
test03

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:22'!
test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: senderAccount.
	
	self assert: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test04 stamp: 'sf 5/31/2023 15:57:24'!
test04

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: senderAccount.
	
	self assert: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:40'!
test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test05 stamp: 'sf 5/31/2023 15:57:41'!
test05

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:59'!
test06SummaryOfEmptyPortfolioOnlyShowsBalance

	| emptyPortfolio accountSummary |

	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test06 stamp: 'sf 5/31/2023 15:58:01'!
test06

	| emptyPortfolio accountSummary |

	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:59:15'!
test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test07 stamp: 'sf 5/31/2023 15:59:17'!
test07

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	!

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:02:29'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:02:37'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'no messages' stamp: 'sf 5/31/2023 16:04:21'!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.! !
!TransferNet methodsFor: 'no messages' stamp: 'sf 5/31/2023 16:04:30'!
ofAccount: anAccount! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:04:36' overrides: 16902957!
print

	^ 0! !

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:04:39'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:06:05'!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:06:08'!
FAILURE!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:06:33'!
Object subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:06:32' prior: 50628823!
ofAccount: anAccount

	account := anAccount.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:06:47' prior: 50628827 overrides: 16902957!
print

	^ account balance.! !

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:06:48'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:06:48'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:07:03'!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:07:19' prior: 50628871!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:07:21'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:09:53'!
transferNet
	
	| res |
	res := 0.
	transactions do:  [ :aTransaction | 
		res := aTransaction affectTransferNet: res.
		].
	^res.! !
!AccountTransaction methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:14'!
affectTransferNet: aTransferNetValue

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:32' overrides: 50628909!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.! !
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:36' overrides: 50628909!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:07' overrides: 50628909!
affectTransferNet: aTransferNetValue

	^aTransferNetValue + self value ! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:26' overrides: 50628909!
affectTransferNet: aTransferNetValue

	^aTransferNetValue - self value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:35' overrides: 16902254!
value

	^ account balance.! !

!methodRemoval: TransferNet #print stamp: 'sf 5/31/2023 16:11:37'!
print

	^ account balance.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:42' prior: 50628815!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet value.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:49' prior: 50628833!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet value.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:52' prior: 50628885!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet value.! !

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:11:52'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:12:20' prior: 50628937 overrides: 16902254!
value

	^ account transferNet.! !

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:12:21'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:12:21'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:12:21'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:14:09'!
test04

	| emptyPortfolio transfernet |

	emptyPortfolio := Portfolio new.
	
	transfernet := TransferNet new ofAccount: emptyPortfolio.
	
	self assert: 0 equals: transfernet value.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:14:52'!
transferNet

	^0! !

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:14:58'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:15:01'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:15:01'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:15:01'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:15:01'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:18:10'!
test05

	| simplePortfolio senderAccount receiverAccount transfernet |

	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	simplePortfolio := Portfolio with: senderAccount.
	
	transfernet := TransferNet new ofAccount: simplePortfolio.
		
	self assert: -100 equals: transfernet value! !

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:18:12'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:19:09' prior: 50628553!
printTransactions

	| res |
	res := 0.
	accounts do: [ :anAccount |
		res := anAccount affectTransferNet: res.
		].
	^ res.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:20:28' prior: 50629039!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	^ res.! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:20:39'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:21:11' prior: 50629005!
transferNet

	| res |
	res := 0.
	accounts do: [ :anAccount |
		res := res + anAccount transferNet.
		].
	^ res.! !

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:21:19'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:21:19'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:21:19'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:21:19'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:21:19'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:22:34' prior: 50627822 overrides: 16902957!
print
	
	| res |
	res := account printTransactions.
	^ res.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:22:43' prior: 50629102 overrides: 16902957!
print
	
	^ account printTransactions.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:22:55' prior: 50628338!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	res add: 'Balance = ', self balance asString.
	^res.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:23:10' prior: 50629046!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:23:12'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:23:12'!
FAILURE!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:23:12'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:24:07' prior: 50629122!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		res removeLast.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'sf 5/31/2023 16:24:08'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sf 5/31/2023 16:24:14'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:24:16'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:24:16'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:24:16'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:24:16'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:24:16'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:25:05' prior: 50629113!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:25:27'!
printBalance

	^ OrderedCollection with: 'Balance = ', self balance asString.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:25:52' prior: 50629164!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:26:39'!
printTransactionsAndBalance
	
	^ self printTransactions addAll: self printBalance ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:27:12' prior: 50629108 overrides: 16902957!
print
	
	^ account printTransactionsAndBalance.
	! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:27:41'!
printTransactionsAndBalance

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !

!methodRemoval: Portfolio #printTransactions stamp: 'sf 5/31/2023 16:27:43'!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:27:45'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:27:45'!
FAILURE!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:27:45'!
FAILURE!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:27:45'!
FAILURE!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:27:45'!
FAILURE!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:27:45'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:27:45'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:27:51'!
FAILURE!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:27:51'!
FAILURE!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:28:06'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:28:57' prior: 50629321!
printTransactionsAndBalance
	
	| res |
	res := self printTransactions.
	res addAll: self printBalance.
	^ res.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sf 5/31/2023 16:29:07'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:29:09'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:29:17'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:29:17'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:29:17'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:29:17'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:29:17'!
PASSED!

----SNAPSHOT----(31 May 2023 16:29:41) CuisUniversity-5832.image priorSource: 9366758!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:31:21'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:31:36'!
Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:31:44'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:32:03'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:32:05'!
Report subclass: #TransferNet
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:32:09'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:32:14'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:32:17'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'no messages' stamp: 'sf 5/31/2023 16:32:25'!
ofAccount: anAccount

	account := anAccount.! !

!methodRemoval: AccountSummary #ofAccount: stamp: 'sf 5/31/2023 16:32:29'!
ofAccount: anAccount

	account := anAccount.!

!methodRemoval: TransferNet #ofAccount: stamp: 'sf 5/31/2023 16:32:32'!
ofAccount: anAccount

	account := anAccount.!
!Report methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:32:46' overrides: 16902957!
print

	self subclassResponsibility.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:01' overrides: 50629573!
print

	^ account transferNet.! !

!methodRemoval: TransferNet #value stamp: 'sf 5/31/2023 16:33:01'!
value

	^ account transferNet.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:17' prior: 50628945!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:20' prior: 50628954!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:23' prior: 50628968!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:25' prior: 50628997!
test04

	| emptyPortfolio transfernet |

	emptyPortfolio := Portfolio new.
	
	transfernet := TransferNet new ofAccount: emptyPortfolio.
	
	self assert: 0 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:27' prior: 50629021!
test05

	| simplePortfolio senderAccount receiverAccount transfernet |

	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	simplePortfolio := Portfolio with: senderAccount.
	
	transfernet := TransferNet new ofAccount: simplePortfolio.
		
	self assert: -100 equals: transfernet print! !

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:33:29'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:33:29'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:33:29'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:33:29'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:33:29'!
PASSED!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:34:02'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportTest subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:34:10'!
ReportTest subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 16:34:17'!
ReportTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:34:42'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'sf 5/31/2023 16:34:43'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'sf 5/31/2023 16:34:43'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'sf 5/31/2023 16:34:43'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'sf 5/31/2023 16:34:43'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'sf 5/31/2023 16:34:43'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:36:42' prior: 50629298!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction |
		report add: aTransaction asAccountSummaryEntry.
		]! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:36:45'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:36:45'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:36:45'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:36:45'!
ERROR!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:36:45'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:36:45'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:36:45'!
FAILURE!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:36:56'!
ERROR!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:36:56'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:37:24' prior: 50629737!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :aTransaction :report |
		report add: aTransaction asAccountSummaryEntry.
		]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sf 5/31/2023 16:37:26'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:37:28'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:37:28'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:37:28'!
ERROR!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:37:32'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:37:32'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:37:32'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:37:32'!
ERROR!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:37:32'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:37:32'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:37:32'!
ERROR!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:37:35'!
ERROR!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:37:35'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:37:54' prior: 50629786!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction  |
		report add: aTransaction asAccountSummaryEntry.
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:38:02' prior: 50629889!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction  |
		aTransaction asAccountSummaryEntry.
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:39:37' prior: 50629902!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction  |
		report add: aTransaction asAccountSummaryEntry.
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:41:44' prior: 50629914!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions collect: [ :aTransaction | aTransaction asAccountSummaryEntry ].! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'sf 5/31/2023 16:41:52'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:42:02' prior: 50629927!
printTransactions
	
	^ transactions collect: [ :aTransaction | aTransaction asAccountSummaryEntry ].! !

----SNAPSHOT----(31 May 2023 16:43:53) CuisUniversity-5832.image priorSource: 9530019!

----STARTUP---- (31 May 2023 19:39:43) as C:\Users\005675613\Documents\Inge 1\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\005675613\Documents\Inge 1\windows64\Portfolio-Solucion.st----!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 19:41:14'!
Report subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:41:10' prior: 50638202 overrides: 50638185!
print
	
	account addTransactionsToReport: self.
	^report.
	! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 19:41:31'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 19:41:31'!
Object subclass: #Report
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 19:42:14'!
addTransactionsToReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/31/2023 19:42:31'!
addToReport: aReport

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'SF 5/31/2023 19:42:51' overrides: 50638302!
addToReport: aReport

	aReport addDeposit: self.! !
!DepositLeg methodsFor: 'value' stamp: 'SF 5/31/2023 19:43:06' overrides: 50638302!
addToReport: aReport

	aReport addDepositLeg: self.! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/31/2023 19:43:21' overrides: 50638302!
addToReport: aReport

	aReport addWithdraw: self! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:43:47' overrides: 50638302!
addToReport: aReport

	aReport addWithdrawLeg: self.! !

!classRenamed: #WithdrawalLeg as: #WithdrawLeg stamp: 'SF 5/31/2023 19:43:55'!
Smalltalk renameClassNamed: #WithdrawalLeg as: #WithdrawLeg!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:43:55' prior: 50638240!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawLeg new fromTransfer: self.
	depositLeg := DepositLeg new fromTransfer: self.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:37'!
addDeposit: aDeposit

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:43'!
addDepositLeg: aDepositLeg

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:55'!
addWithdraw: aWithdraw
	
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:45:04'!
addWithdrawLeg: aWithdrawLeg
	
	self subclassResponsibility ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:46:04' overrides: 50638344!
addDeposit: aDeposit

	report add: 'Depósito por ', aDeposit value, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:46:41' overrides: 50638349!
addDepositLeg: aDepositLeg

	report add: 'Entrada por transferencia de ', aDepositLeg value, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:47:03' overrides: 50638354!
addWithdraw: aWithdraw

	report add: 'Extracción por ', aWithdraw value, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:47:26' overrides: 50638359!
addWithdrawLeg: aWithdrawLeg

	report add: 'Salida por transferencia de ', aWithdrawLeg value, '.'.! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:47:40'!
FAILURE!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:47:40'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:47:57' prior: 50638180!
ofAccount: anAccount
	account := anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:48:10' prior: 50638276 overrides: 50638185!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	^report.
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:48:21' prior: 50638404 overrides: 50638185!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 19:48:41'!
addBalanceToReport: aReport

	aReport addBalance: self balance.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:49:18'!
addBalance: aBalanceValue

	report add: 'Balance = ', aBalanceValue.! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:49:29'!
ERROR!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:49:29'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:49:55' prior: 50638411 overrides: 50638185!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	
	^report.
	! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:50:04'!
FAILURE!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:50:04'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:50:39' prior: 50638437 overrides: 50638185!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:09' prior: 50638423!
addBalance: aBalanceValue

	report add: 'Balance = ', aBalanceValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:27' prior: 50638365 overrides: 50638344!
addDeposit: aDeposit

	report add: 'Depósito por ', aDeposit value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:31' prior: 50638371 overrides: 50638349!
addDepositLeg: aDepositLeg

	report add: 'Entrada por transferencia de ', aDepositLeg value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:36' prior: 50638378 overrides: 50638354!
addWithdraw: aWithdraw

	report add: 'Extracción por ', aWithdraw value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:40' prior: 50638384 overrides: 50638359!
addWithdrawLeg: aWithdrawLeg

	report add: 'Salida por transferencia de ', aWithdrawLeg value asString, '.'.! !

----SNAPSHOT----(31 May 2023 19:51:54) CuisUniversity-5832.image priorSource: 9366758!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:52:00'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 19:52:05'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 19:52:14'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 5/31/2023 19:52:14'!
ERROR!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 19:52:14'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 19:52:19'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 19:52:22'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 19:52:25'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 19:53:40'!
addTransactionsToReport: aReport

	accounts do: [ :anAccount | anAccount addTransactionsToReport: aReport ].! !

!methodRemoval: ReceptiveAccount #addBalanceToReport: stamp: 'SF 5/31/2023 19:53:57'!
addBalanceToReport: aReport

	aReport addBalance: self balance.!
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 19:54:02'!
addBalanceToReport: aReport

	aReport addBalance: self balance.! !

----SNAPSHOT----(31 May 2023 19:54:13) CuisUniversity-5832.image priorSource: 9818991!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 19:54:17'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:54:39' overrides: 50638344!
addDeposit: aDeposit! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:54:43' prior: 50638597 overrides: 50638344!
addDeposit: aWithdraw! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:54:50' prior: 50638602 overrides: 50638344!
addDeposit: aDeposit! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:00' overrides: 50638354!
addWithdraw: aWithdraw! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:08' overrides: 50638349!
addDepositLeg: aDepositLeg

	report add: 'Entrada por transferencia de ', aDepositLeg value asString, '.'.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:18' overrides: 50638359!
addWithdrawLeg: aWithdrawLeg

	report add: 'Salida por transferencia de ', aWithdrawLeg value asString, '.'.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:30' prior: 50638219 overrides: 50638185!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:55:34'!
FAILURE!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 19:55:34'!
FAILURE!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 19:55:34'!
FAILURE!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 19:55:34'!
FAILURE!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 19:55:34'!
FAILURE!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:55:39'!
FAILURE!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:55:39'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:57:27' prior: 50638630 overrides: 50638185!
print
	
	report := 0.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:57:45' prior: 50638615 overrides: 50638349!
addDepositLeg: aDepositLeg

	report + aDepositLeg value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:57:53' prior: 50638663 overrides: 50638349!
addDepositLeg: aDepositLeg

	report := report + aDepositLeg value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:58:10' prior: 50638622 overrides: 50638359!
addWithdrawLeg: aWithdrawLeg

	report := report + aWithdrawLeg value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:58:18' prior: 50638655 overrides: 50638185!
print
	
	report := 0.
	account addTransactionsToReport: self.
	^report.
	! !

----SNAPSHOT----(31 May 2023 19:58:31) CuisUniversity-5832.image priorSource: 9821250!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:58:34'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 19:58:34'!
FAILURE!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 19:58:34'!
FAILURE!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 19:58:34'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 19:58:34'!
FAILURE!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:58:43'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 19:58:45'!
FAILURE!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 19:58:45'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:59:07' prior: 50638675 overrides: 50638359!
addWithdrawLeg: aWithdrawLeg

	report := report - aWithdrawLeg value! !

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 19:59:10'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 19:59:10'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 19:59:10'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 19:59:10'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 19:59:10'!
PASSED!

!methodRemoval: Portfolio #printTransactionsAndBalance stamp: 'SF 5/31/2023 19:59:20'!
printTransactionsAndBalance

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.!

!methodRemoval: Portfolio #transferNet stamp: 'SF 5/31/2023 19:59:25'!
transferNet

	| res |
	res := 0.
	accounts do: [ :anAccount |
		res := res + anAccount transferNet.
		].
	^ res.!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'SF 5/31/2023 19:59:31'!
transferNet
	
	| res |
	res := 0.
	transactions do:  [ :aTransaction | 
		res := aTransaction affectTransferNet: res.
		].
	^res.!

!methodRemoval: ReceptiveAccount #printTransactionsAndBalance stamp: 'SF 5/31/2023 19:59:33'!
printTransactionsAndBalance
	
	| res |
	res := self printTransactions.
	res addAll: self printBalance.
	^ res.!

!methodRemoval: ReceptiveAccount #printTransactions stamp: 'SF 5/31/2023 19:59:34'!
printTransactions
	
	^ transactions collect: [ :aTransaction | aTransaction asAccountSummaryEntry ].!

!methodRemoval: ReceptiveAccount #printBalance stamp: 'SF 5/31/2023 19:59:38'!
printBalance

	^ OrderedCollection with: 'Balance = ', self balance asString.!

----SNAPSHOT----(31 May 2023 20:02:52) CuisUniversity-5832.image priorSource: 9825132!

----STARTUP---- (31 May 2023 22:34:07) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\Santii\Desktop\UBA\inge1\windows64\Portfolio-Solucion.st----!

TestCase subclass: #AccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTest category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 22:35:19'!
TestCase subclass: #AccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTest subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 22:35:31'!
AccountTest subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTest subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 22:35:38'!
AccountTest subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 22:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 22:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 22:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 22:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 22:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 5/31/2023 22:35:48'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 22:35:48'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 22:35:49'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 22:35:49'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 22:35:49'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 22:35:49'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 22:35:49'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/31/2023 22:35:51'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/31/2023 22:35:51'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/31/2023 22:35:51'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 5/31/2023 22:35:51'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 5/31/2023 22:35:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/31/2023 22:35:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 22:35:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 22:35:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/31/2023 22:35:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/31/2023 22:35:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/31/2023 22:35:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/31/2023 22:35:56'!
PASSED!
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 22:36:05' prior: 50639470!
addBalanceToReport: aReport

	aReport addBalance: self balance.! !
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 22:36:11' prior: 50639475!
addedTo: aPortfolio

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:36:17' prior: 50639461!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:36:21' prior: 50639466!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'SF 5/31/2023 22:36:27' prior: 50639457!
balance

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 5/31/2023 22:36:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/31/2023 22:36:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 22:36:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 22:36:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/31/2023 22:36:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/31/2023 22:36:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/31/2023 22:36:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/31/2023 22:36:32'!
PASSED!
!Account methodsFor: 'testing' stamp: 'SF 5/31/2023 22:36:40' prior: 50639453!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'SF 5/31/2023 22:36:46' prior: 50639449!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Portfolio methodsFor: 'accounts management' stamp: 'SF 5/31/2023 22:37:02' prior: 50639492!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'SF 5/31/2023 22:37:06' prior: 50639497!
accountsIsEmpty

	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'SF 5/31/2023 22:37:10' prior: 50639501!
accountsSize

	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'SF 5/31/2023 22:37:25' prior: 50639505!
add: accountToAdd

	self assertCanAdd: accountToAdd.
	
	accounts add: accountToAdd.
	
	accountToAdd addedTo: self	! !
!Portfolio methodsFor: 'accounts management' stamp: 'SF 5/31/2023 22:37:41' prior: 50639512!
rootParents

	| rootParents |
	
	rootParents := Set new.
	
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'account management - private' stamp: 'SF 5/31/2023 22:38:10' prior: 50639581!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ]
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:38:25' prior: 50639537 overrides: 50640312!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 22:38:30' prior: 50639524!
addTransactionsToReport: aReport

	accounts do: [ :anAccount | anAccount addTransactionsToReport: aReport ].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:38:46' prior: 50639652!
addTransactionsToReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:38:51' prior: 50639665 overrides: 50640318!
transactions 

	^ transactions copy! !
!Portfolio methodsFor: 'composition' stamp: 'SF 5/31/2023 22:39:09' prior: 50639554 overrides: 50640307!
addedTo: aPortfolio 

	parents add: aPortfolio ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'SF 5/31/2023 22:39:14' prior: 50639688 overrides: 50640307!
addedTo: aPortfolio
	! !

!methodRemoval: DepositLeg #affectTransferNet: stamp: 'SF 5/31/2023 22:39:19'!
affectTransferNet: aTransferNetValue

	^aTransferNetValue + self value !

!methodRemoval: DepositLeg #asAccountSummaryEntry stamp: 'SF 5/31/2023 22:39:23'!
asAccountSummaryEntry

	^ 'Entrada por transferencia de ', (self value asString), '.'
!

!methodRemoval: AccountTransaction #asAccountSummaryEntry stamp: 'SF 5/31/2023 22:39:29'!
asAccountSummaryEntry

	self subclassResponsibility !

!methodRemoval: AccountTransaction #affectTransferNet: stamp: 'SF 5/31/2023 22:39:30'!
affectTransferNet: aTransferNetValue

	self subclassResponsibility !

!methodRemoval: WithdrawLeg #asAccountSummaryEntry stamp: 'SF 5/31/2023 22:39:33'!
asAccountSummaryEntry
	
	^ 'Salida por transferencia de ', (self value asString), '.'!

!methodRemoval: WithdrawLeg #affectTransferNet: stamp: 'SF 5/31/2023 22:39:35'!
affectTransferNet: aTransferNetValue

	^aTransferNetValue - self value!

!methodRemoval: Deposit #affectTransferNet: stamp: 'SF 5/31/2023 22:39:46'!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.!

!methodRemoval: Deposit #asAccountSummaryEntry stamp: 'SF 5/31/2023 22:39:47'!
asAccountSummaryEntry

	^ 'Depósito por ', (value asString), '.'!

!methodRemoval: Withdraw #affectTransferNet: stamp: 'SF 5/31/2023 22:39:50'!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.!

!methodRemoval: Withdraw #asAccountSummaryEntry stamp: 'SF 5/31/2023 22:39:51'!
asAccountSummaryEntry
	
	^ 'Extracción por ', (value asString), '.'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 5/31/2023 22:39:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/31/2023 22:39:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 22:39:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 22:39:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/31/2023 22:39:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/31/2023 22:39:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/31/2023 22:39:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/31/2023 22:39:57'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 22:40:03'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 22:40:03'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 22:40:03'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 22:40:03'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 22:40:03'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 5/31/2023 22:40:03'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 22:40:03'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 22:40:04'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 22:40:04'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 22:40:04'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 22:40:04'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 22:40:04'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/31/2023 22:40:06'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/31/2023 22:40:06'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/31/2023 22:40:06'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 5/31/2023 22:40:06'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:44:41' prior: 50640039 overrides: 50639995!
print

	report := OrderedCollection new.
	
	account addTransactionsToReport: self.
	
	^report.
	! !
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 22:45:15'!
addTransactionsToReport: aReport

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 22:45:39'!
fillReport: aReport

	self subclassResponsibility ! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 22:45:39' overrides: 50640690!
fillReport: aReport

	accounts do: [ :anAccount | anAccount addTransactionsToReport: aReport ].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:45:39' overrides: 50640690!
fillReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:45:39' prior: 50640079 overrides: 50639995!
print
	
	report := 0.
	account fillReport: self.
	^report.
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:45:39' prior: 50640679 overrides: 50639995!
print

	report := OrderedCollection new.
	
	account fillReport: self.
	
	^report.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:45:39' prior: 50640464 overrides: 50640685!
addTransactionsToReport: aReport

	accounts do: [ :anAccount | anAccount fillReport: aReport ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:45:39' prior: 50640695 overrides: 50640690!
fillReport: aReport

	accounts do: [ :anAccount | anAccount fillReport: aReport ].! !

!methodRemoval: Account #addTransactionsToReport: stamp: 'SF 5/31/2023 22:45:39'!
addTransactionsToReport: aReport

	self subclassResponsibility !

!methodRemoval: Portfolio #addTransactionsToReport: stamp: 'SF 5/31/2023 22:45:39'!
addTransactionsToReport: aReport

	accounts do: [ :anAccount | anAccount fillReport: aReport ].!

!methodRemoval: ReceptiveAccount #addTransactionsToReport: stamp: 'SF 5/31/2023 22:45:39'!
addTransactionsToReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:46:06' prior: 50640702 overrides: 50640690!
fillReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].
	aReport addBalance: self balance.! !

!methodRemoval: Account #addBalanceToReport: stamp: 'SF 5/31/2023 22:46:12'!
addBalanceToReport: aReport

	aReport addBalance: self balance.!
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 22:46:32' prior: 50640729 overrides: 50640690!
fillReport: aReport

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	aReport addBalance: self balance.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/31/2023 22:47:39' prior: 50639280!
test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100' with: 'Balance = 100') equals: accountSummary print
	! !

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 22:47:40'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 22:47:40'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 22:47:40'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 22:47:40'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 22:47:40'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 22:47:40'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 5/31/2023 22:47:41'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 22:47:41'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 22:47:42'!
ERROR!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 22:47:42'!
ERROR!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 22:47:42'!
ERROR!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 22:47:42'!
ERROR!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 22:47:42'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:48:05' prior: 50640709 overrides: 50639995!
print

	report := 0.
	
	account fillReport: self.
	
	^report.
	! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:48:31' prior: 50639965!
addBalance: aBalanceValue
	self subclassResponsibility ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:48:45' overrides: 50640841!
addBalance: aBalanceValue

	report add: 'Balance = ', aBalanceValue asString.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:48:58' overrides: 50640841!
addBalance: aBalanceValue! !

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 22:49:00'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 22:49:00'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 22:49:00'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 22:49:00'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 22:49:00'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 22:49:01'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 22:49:01'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 22:49:01'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 22:49:01'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 22:49:01'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 5/31/2023 22:49:01'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 22:49:01'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/31/2023 22:49:21' prior: 50639268!
test06SummaryOfEmptyPortfolioOnlyShowsBalance
	
	| emptyPortfolio accountSummary |
	
	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !
!Portfolio methodsFor: 'testing' stamp: 'SF 5/31/2023 22:52:25' prior: 50639558!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'account management - private' stamp: 'SF 5/31/2023 22:52:34' prior: 50639589!
assertCanAdd: accountToAdd
	
	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 22:52:42' prior: 50639531 overrides: 50640322!
balance

	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 22:52:49' prior: 50640764 overrides: 50640690!
fillReport: aReport

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	
	aReport addBalance: self balance.! !
!Portfolio methodsFor: 'testing' stamp: 'SF 5/31/2023 22:52:59' prior: 50639565 overrides: 50640415!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:53:15' prior: 50639545 overrides: 50640318!
transactions

	| transactions |
	
	transactions := OrderedCollection new.
	
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'account management - private' stamp: 'SF 5/31/2023 22:53:23' prior: 50639596!
signalCanNotAddAccount

	self error: self class canNotAddAccountErrorMessage! !
!Portfolio methodsFor: 'testing' stamp: 'SF 5/31/2023 22:53:31' prior: 50639572 overrides: 50640410!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'initialization' stamp: 'SF 5/31/2023 22:53:49' prior: 50639519 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:54:09' prior: 50639646 overrides: 50640312!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 5/31/2023 22:54:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/31/2023 22:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 22:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 22:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/31/2023 22:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/31/2023 22:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/31/2023 22:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/31/2023 22:54:13'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 22:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 22:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 22:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 22:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 22:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 5/31/2023 22:54:17'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 22:54:17'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 22:54:18'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 22:54:18'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 22:54:18'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 22:54:18'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 22:54:18'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/31/2023 22:54:20'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/31/2023 22:54:20'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/31/2023 22:54:20'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 5/31/2023 22:54:20'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'SF 5/31/2023 22:54:35' prior: 50639670 overrides: 50640322!
balance

	^transactions
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'SF 5/31/2023 22:54:45' prior: 50639677 overrides: 50640415!
hasRegistered: aTransaction

	^ transactions includes: aTransaction
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:54:54' prior: 50639659!
register: aTransaction

	transactions add: aTransaction
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'SF 5/31/2023 22:55:03' prior: 50639683 overrides: 50640410!
isComposedBy: anAccount

	^ self = anAccount ! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'SF 5/31/2023 22:55:11' prior: 50639640 overrides: 16920235!
initialize

	super initialize.
	
	transactions := OrderedCollection new.! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/31/2023 22:55:31' prior: 50639704!
addToReport: aReport

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'SF 5/31/2023 22:55:36' prior: 50639723!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/31/2023 22:55:41' prior: 50639719 overrides: 16902254!
value

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'SF 5/31/2023 22:55:52' prior: 50639761 overrides: 50641152!
addToReport: aReport

	aReport addDeposit: self.! !
!Deposit methodsFor: 'value' stamp: 'SF 5/31/2023 22:55:56' prior: 50639776 overrides: 50641163!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'SF 5/31/2023 22:56:02' prior: 50639780 overrides: 50641157!
affectBalance: aBalance

	^ aBalance + value ! !
!DepositLeg methodsFor: 'value' stamp: 'SF 5/31/2023 22:56:08' prior: 50639834 overrides: 50641152!
addToReport: aReport

	aReport addDepositLeg: self.! !
!DepositLeg methodsFor: 'value' stamp: 'SF 5/31/2023 22:56:13' prior: 50639845 overrides: 50641163!
value

	^ parentTransfer value.
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:57:05' prior: 50639830!
transaction

	^ transaction
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:57:11' prior: 50639826!
parentTransfer

	^ parentTransfer
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:57:17' prior: 50639821!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:57:22' prior: 50639811 overrides: 50641157!
affectBalance: aBalance

	^aBalance + self value ! !
!Deposit methodsFor: 'initialization' stamp: 'SF 5/31/2023 22:57:30' prior: 50639757!
initializeFor: aValue

	value := aValue ! !

!methodRemoval: DepositLeg #transaction stamp: 'SF 5/31/2023 22:57:59'!
transaction

	^ transaction
!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 5/31/2023 22:58:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/31/2023 22:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 22:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 22:58:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/31/2023 22:58:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/31/2023 22:58:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/31/2023 22:58:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/31/2023 22:58:05'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 22:58:10'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 22:58:10'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 22:58:10'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 22:58:10'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 22:58:10'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 5/31/2023 22:58:10'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 22:58:10'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 22:58:11'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 22:58:11'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 22:58:11'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 22:58:11'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 22:58:11'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/31/2023 22:58:15'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/31/2023 22:58:15'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/31/2023 22:58:15'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 5/31/2023 22:58:15'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 23:01:04' prior: 50640752 overrides: 50640690!
fillReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].
	
	aReport addBalance: self balance.! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/31/2023 23:01:58' prior: 50639866 overrides: 50641152!
addToReport: aReport

	aReport addWithdraw: self! !
!Withdraw methodsFor: 'balance' stamp: 'SF 5/31/2023 23:02:03' prior: 50639885 overrides: 50641157!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'initialization' stamp: 'SF 5/31/2023 23:02:08' prior: 50639862!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/31/2023 23:02:14' prior: 50639881 overrides: 50641163!
value

	^ value! !
!WithdrawLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:02:21' prior: 50639922 overrides: 50641157!
affectBalance: aBalance

	^aBalance - self value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:02:47' prior: 50640063 overrides: 50639975!
addDepositLeg: aDepositLeg
	aDepositLeg affectBalance: report.! !

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 23:02:50'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 23:02:50'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 23:02:50'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 23:02:50'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 23:02:50'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:03:00' prior: 50641392 overrides: 50639975!
addDepositLeg: aDepositLeg

	aDepositLeg affectBalance: report.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:03:12' prior: 50640073 overrides: 50639985!
addWithdrawLeg: aWithdrawLeg

	aWithdrawLeg affectBalance: report.! !

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 23:03:16'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 23:03:16'!
FAILURE!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 23:03:16'!
FAILURE!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 23:03:16'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 23:03:16'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:03:58' prior: 50641410 overrides: 50639975!
addDepositLeg: aDepositLeg

	report := report + aDepositLeg value.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:04:08' prior: 50641416 overrides: 50639985!
addWithdrawLeg: aWithdrawLeg

	report := report - aWithdrawLeg value.! !

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 23:04:10'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 23:04:10'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 23:04:10'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 23:04:10'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 23:04:10'!
PASSED!

Report subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 23:18:21'!
Report subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:35' prior: 50640841!
addBalance: aBalanceValue

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:41' prior: 50639970!
addDeposit: aDeposit
	
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:46' prior: 50639975!
addDepositLeg: aDepositLeg
	
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:50' prior: 50639980!
addWithdraw: aWithdraw

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:55' prior: 50639985!
addWithdrawLeg: aWithdrawLeg

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:59' prior: 50639990!
ofAccount: anAccount

	account := anAccount.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:19:03' prior: 50639995 overrides: 16902957!
print

	self subclassResponsibility.! !
!TreeStructure methodsFor: 'no messages' stamp: 'SF 5/31/2023 23:19:46' overrides: 50641499!
print! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:20:15' prior: 50641504 overrides: 50641499!
print

	report := OrderedCollection new.
	
	account fillReport: self.
	
	^report.! !
!Account class methodsFor: 'no messages' stamp: 'SF 5/31/2023 23:27:00'!
named: anAccountName

	self subclassResponsibility ! !
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'SF 5/31/2023 23:30:12' overrides: 50641513!
named: anAccountName

	^ ReceptiveAccount new initializeWithName: anAccountName.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 23:30:38'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'SF 5/31/2023 23:30:36'!
initializeWithName: anAccountName

	super initialize.
	
	transactions := OrderedCollection new.
	name := anAccountName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'SF 5/31/2023 23:30:42' prior: 50641532!
initializeWithName: anAccountName

	super initialize.
	
	transactions := OrderedCollection new.
	
	name := anAccountName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'SF 5/31/2023 23:30:58' prior: 50641146 overrides: 16920235!
initialize

	super initialize.
	
	transactions := OrderedCollection new.
	
	name := ''.! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 23:31:22'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'SF 5/31/2023 23:31:21'!
initializeWithName: anAccountName

	accounts := OrderedCollection new.
	
	parents := OrderedCollection new.
	
	name := anAccountName.! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 23:31:28'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 23:31:33'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 23:31:37'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:32:12' overrides: 50641513!
named: anAccountName

	^ Portfolio new initializeWithName: anAccountName.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:32:26'!
named: anAccountName with: anAccount

	^ Portfolio new initializeWithName: anAccountName.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:32:33' prior: 50641610!
named: anAccountName with: anAccount

	^ self new initializeWithName: anAccountName.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:32:39' prior: 50641605 overrides: 50641513!
named: anAccountName

	^ self new initializeWithName: anAccountName.! !
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:32:43' prior: 50641518 overrides: 50641513!
named: anAccountName

	^ self new initializeWithName: anAccountName.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:35:16' prior: 50641616!
named: anAccountName with: anAccount

	^ (self new initializeWithName: anAccountName) add: anAccount; yourself.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:36:09'!
named: anAccountName with: anAccount with: anotherAccount

	^ ((self new initializeWithName: anAccountName) add: anAccount) add: anotherAccount ; yourself.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:36:12' prior: 50641636!
named: anAccountName with: anAccount

	^ (self new initializeWithName: anAccountName) add: anAccount ; yourself.! !

| aAcc bAcc |cc := ReceptiveAccount named: 'cuenta 1'!

| aAcc bAcc |cc := ReceptiveAccount named: 'cuenta 1'.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 5/31/2023 23:37:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 5/31/2023 23:37:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 5/31/2023 23:37:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 5/31/2023 23:37:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 5/31/2023 23:37:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 5/31/2023 23:37:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 5/31/2023 23:37:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 5/31/2023 23:37:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 5/31/2023 23:37:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 5/31/2023 23:37:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 5/31/2023 23:37:39'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 5/31/2023 23:37:39'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 5/31/2023 23:37:39'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 5/31/2023 23:37:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 5/31/2023 23:37:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 5/31/2023 23:37:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 23:37:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 5/31/2023 23:37:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 5/31/2023 23:37:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 5/31/2023 23:37:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 5/31/2023 23:37:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 5/31/2023 23:37:40'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 5/31/2023 23:37:43'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 5/31/2023 23:37:43'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 5/31/2023 23:37:43'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 5/31/2023 23:37:43'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 5/31/2023 23:37:43'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 5/31/2023 23:37:43'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 5/31/2023 23:37:44'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'SF 5/31/2023 23:37:45'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'SF 5/31/2023 23:37:45'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'SF 5/31/2023 23:37:45'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'SF 5/31/2023 23:37:45'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'SF 5/31/2023 23:37:45'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 5/31/2023 23:37:47'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 5/31/2023 23:37:47'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 5/31/2023 23:37:47'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 5/31/2023 23:37:47'!
PASSED!

ReportTest subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureTest category: 'Portfolio-Solucion' stamp: 'SF 5/31/2023 23:38:41'!
ReportTest subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructureTest methodsFor: 'no messages' stamp: 'SF 5/31/2023 23:38:52'!
test01

	! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:40:52' prior: 50641811!
test01

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructure ofAccount: portfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi') equals: report print.! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 23:44:57' prior: 50640930 overrides: 50640690!
fillReport: aReport

	aReport addPortfolioName: name.

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	
	aReport addBalance: self balance.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:45:41'!
addPortfolioName: aPortfolioName

	self subclassResponsibility ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:45:48' overrides: 50641834!
addPortfolioName: aPortfolioName! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:45:52' overrides: 50641834!
addPortfolioName: aPortfolioName! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:46:16' overrides: 50641834!
addPortfolioName: aPortfolioName

	report add: aPortfolioName.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:46:31' overrides: 50641469!
addBalance: aBalanceValue! !

!testRun: #TreeStructureTest #test01 stamp: 'SF 5/31/2023 23:46:35'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'SF 5/31/2023 23:46:35'!
ERROR!

----STARTUP---- (31 May 2023 23:48:29) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!

!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:00:44' prior: 50617643!
test09WhenATestIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'test03 self assert: false' in: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:00:47' prior: 50617663!
test10WhenATestClassIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self newClassNamed: #TestClassB subclassOf: TestCase.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/9/2019 16:45:59' prior: 50617683!
test11WhenOneOfTheTestTheTestsIsChangedIsStillInThisState
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assertHasNoErrors: result.! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:00:52' prior: 50617701!
test12WhenAnotherTestIsChangedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	
	self logChangesWhile: [
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'test03 self assert: false' in: #TestClassA.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test03 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:00:55' prior: 50617726!
test13WhenATestFailsAnErrorIsReportedAndGoesToRed
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self runTest: #test01 class: #TestClassA
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Red.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:08:13' prior: 50617746!
test14WhenOneOfTheTestsPassesTwoErrorsAreReported
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runTest: #test01 class: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assert: result hasNErrors: 2.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01 class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:13:22' prior: 50617770!
test15WhenAllOfTheTestsPassErrorsAreReportedAndGoesToGreen
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 3.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01 class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test02 class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:37:21' prior: 50617796!
test16WhenOneOfTheTestsIsRenamedIsStillInThisState
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self compileMethod: 'test02bla self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test02 from: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assertHasNoErrors: result.! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 18:42:10' prior: 50617815!
test17WhenAnotherTestIsRenamedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self compileMethod: 'test03 self assert: true' in: #TestClassA.
		self compileMethod: 'test01bla self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test01 from: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test03 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 18:54:28' prior: 50617842!
test18WhenATestUtilityIsChangedNothingHappens
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'setUp ^ 1' in: #TestClassA.
		self compileMethod: 'setUp ^ 2' in: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assertHasNoErrors: result.! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 7/28/2019 17:18:03' prior: 50617860!
test01WhenAProductionClassIsAddedIsStillNotDoingTDD
	tddGuru initialState: NotDoingTDD new.
	
	self logChangesWhile: [ self newClassNamed: #ProdClassA subclassOf: Object ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:30:44' prior: 50617870!
test02WhenAProductionMethodIsAddedIsStillNotDoingTDD
	tddGuru initialState: NotDoingTDD new.
	self newClassNamed: #ProdClassA subclassOf: Object.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^ 1' in: #ProdClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:31:10' prior: 50617882!
test03WhenATestIsAddedIsStillNotDoingTDD

	tddGuru initialState: NotDoingTDD new.
	self newClassNamed: #ProdClassA subclassOf: TestCase.
	
	self logChangesWhile: [ self compileMethod: 'test01 ^ self assert: false' in: #ProdClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 8/1/2019 09:30:02' prior: 50617894!
test04WhenATestClassIsAddedIsStillNotDoingTDD
	tddGuru initialState: NotDoingTDD new.
	
	self logChangesWhile: [ self newClassNamed: #TestClassA subclassOf: TestCase ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:31:48' prior: 50617904!
test05WhenATestIsChangedIsStillNotDoingTDD

	tddGuru initialState: NotDoingTDD new.
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	
	self logChangesWhile: [self compileMethod: 'test01 self assert: true' in: #TestClassA. ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:32:20' prior: 50617918!
test06WhenAProductionMethodIsChangedIsStillNotDoingTDD
	tddGuru initialState: NotDoingTDD new.
	self newClassNamed: #ProductionClassA subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ProductionClassA.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^ 2' in: #ProductionClassA. ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:32:42' prior: 50617932!
test07WhenAClassIsRemovedIsStillNotDoingTDD

	tddGuru initialState: NotDoingTDD new.
	self newClassNamed: #ProductionClassA subclassOf: Object.
	
	self logChangesWhile: [ self removeClass: #ProductionClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:33:26' prior: 50617943!
test08WhenThereIsOneTestAndPassesThenIsInGreen
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	tddGuru initialState: (NotDoingTDD new).
	
	self logChangesWhile: [ self runTest: #test01 class: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:34:23' prior: 50617958!
test09WhenOneOfTheTestFailsThenIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 ^ self assert: true' in: #TestClassA.
	self compileMethod: 'test02 ^ self assert: false' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	tddGuru initialState: NotDoingTDD new.
	
	self logChangesWhile: [ self runAllTestsOf: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:37:13' prior: 50617975!
test10WhenOneOfTheTestIsNotRunThenIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 ^ self assert: true' in: #TestClassA.
	self compileMethod: 'test02 ^ self assert: true' in: #TestClassA.

	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	tddGuru initialState: NotDoingTDD new.
	
	self logChangesWhile: [ self runTest: #test01 class: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:38:21' prior: 50617993!
test11WhenATestIsRenamedIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01bla self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #test01 from: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:39:04' prior: 50618011!
test12WhenThereIsMoreThanOneTestAndAllPassThenIsInGreen
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ self runAllTestsOf: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:40:21' prior: 50618028!
test13WhenATestIsRemovedIsNoLongerTakenIntoAccount
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: false' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ 
		self removeMethodWithSelector: #test02 from: #TestClassA.
		self runAllTestsOf: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 19:35:51' prior: 50618047!
test14WhenATestClassIsRemovedIsNoLongerTakenIntoAccount
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassB.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA. self classNamed: #TestClassB }.
	
	self logChangesWhile: [ 
		self removeClass: #TestClassB.
		self runAllTestsOf: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 19:37:08' prior: 50618070!
test15WhenAllTestAreRemovedThenGoesToGreen
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA. }.
	
	self logChangesWhile: [ self removeClass: #TestClassA ].
	
	result := tddGuru run.
	
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 5/20/2019 19:51:30' prior: 50618088!
test01WhenNoChangesAreDoneThenNothingHappens
	| result |
	
	self logChangesWhile: [].
		
	result _ tddGuru run.
				
	self assertHasNoErrors: result.
	self assertCurrentStateIs: NotStarted.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 16:00:10' prior: 50618097!
test02WhenAModelClassIsAddedThenWeAsumeIsWritingAFailingTest
	| result |
	
	self logChangesWhile: [ self newClassNamed: #ModelClass subclassOf: Object ].
	
	result _ tddGuru run.
	
	self assert: result hasNErrors: 0.
	self assertCurrentStateIs: WritingAFailingTest
! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 5/20/2019 19:58:31' prior: 50618108!
test03WhenATestClassIsAddedThenIsWritingAFailingTest
	| result |
	
	self logChangesWhile: [ self newClassNamed: #TestClass subclassOf: TestCase ].
	
	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:02:25' prior: 50618119!
test04WhenAProductionMethodIsAddedResultShouldHaveAnError
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1. 
	self assert: result hasErrorWithDescription: (TDDGuru methodAddedBeforeTest: #m1 class: #ModelClass ).
	self assertCurrentStateIs: NotDoingTDD.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:02:53' prior: 50618135!
test05WhenAMethodIsChangedResultShouldHaveAnError
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	self compileMethod: 'm1 ^1' in: #ModelClass.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^2' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1. 
	self assert: result hasErrorWithDescription: (TDDGuru methodChangedBeforeTest: #m1 class: #ModelClass).
	self assertCurrentStateIs: NotDoingTDD.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:51:32' prior: 50618152!
test06WhenATestIsAddedThenIsWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ self compileMethod: 'test01 ^1' in: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 17:03:22' prior: 50618167!
test07WhenAClassIsRemovedResultShouldHaveAnError
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ self removeClass: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru classRemovedBeforeRunningTests: #ModelClass).
	self assertCurrentStateIs: NotDoingTDD.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 17:01:24' prior: 50618182!
test08WhenAMethodIsRemovedResultShouldHaveAnError
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	self compileMethod: 'm1 ^1' in: #ModelClass.
	
	self logChangesWhile: [ self removeMethodWithSelector: #m1 from: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodRemovedBeforeRunningTests: #m1 class: #ModelClass).
	self assertCurrentStateIs: NotDoingTDD ! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 9/16/2019 20:40:44' prior: 50618199!
test09WhenAllTestsPassThenIsInGreenState
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	self compileMethod: 'test02 self assert: true' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
	
	self logChangesWhile: [ self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 9/16/2019 20:40:39' prior: 50618217!
test10WhenATestFailsThenIsInRedState
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	self compileMethod: 'test02 self assert: false' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
	
	self logChangesWhile: [ self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 9/16/2019 20:50:01' prior: 50618235!
test11WhenATestHasAnErrorThenIsInRedState
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	self compileMethod: 'test02 self error: ''Unexpected error''' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
	
	self logChangesWhile: [ self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 3/2/2020 16:58:26' prior: 50618254!
test12WhenATestIsChangedThenIsWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ self compileMethod: 'test01 self assert: false' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 11:17:15' prior: 50618274!
test13WhenATestIsRenamedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01A self assert: false' in: #TestSomething. 
		self removeMethodWithSelector: #test01 from: #TestSomething ].
		
	result _ tddGuru run.
		
	self assert: tddGuru currentState equals: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testRenamedBeforeRunningTheTests: #test01 class: #TestSomething)! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 8/30/2019 08:55:09' prior: 50618296!
test01ShouldIgnoreDoIts
	| result |
	
	self logChangesWhile: [ Compiler evaluate: '5 + 6' logged: true. ].
		
	result _ tddGuru run.
		
	self assert: result changeEvents size equals: 0.! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 9/9/2019 20:18:37' prior: 50618304!
test02ResultKnowsTheChangesThatWereDone
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClass subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestClass. 
		self runTest: #test01 class: #TestClass.
	].
		
	result _ tddGuru run.
	
	changes := result changes.
	self assert: changes size equals: 3.
	self assert: changes first category equals: #newTestClass.
	self assert: changes second category equals: #newTest.
	self assert: changes third category equals: #testRun.! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 9/9/2019 20:19:34' prior: 50618323!
test03TDDStateForEachChange
	| result firstChange secondChange thirdChange changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClass subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestClass.
		self runTest: #test01 class: #TestClass
	].
		
	result _ tddGuru run.
		
	changes := result changes.
	firstChange := changes first.
	secondChange := changes second.
	thirdChange := changes third.
	
	self assert: (result stateAfter: firstChange) equals: WritingAFailingTest .
	self assert: (result stateAfter: secondChange) equals: WritingAFailingTest .
	self assert: (result stateAfter: thirdChange) equals: Red .! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 5/9/2020 19:51:42' prior: 50618346!
test04TestRenamesAreGroupedInASingleChange
	| result |
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01A ^ 1' in: #TestClassA.
	
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01B ^ 1' in: #TestClassA.
		self removeMethodWithSelector: #test01A from: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assert: result changes size equals: 1! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 9/9/2019 20:25:59' prior: 50618362!
test05TestsWithSameNameInDifferentClassesAreDifferent
	| result changes |
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	
	tddGuru initialTestClasses: { self classNamed: #TestClassA. self classNamed: #TestClassB }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 ^ self assert: true' in: #TestClassA.
		self compileMethod: 'test01 ^ self assert: true' in: #TestClassB.
	].
		
	result _ tddGuru run.
	changes := result changes.
	self assert: changes first category equals: #newTest.
	self assert: changes second category equals: #newTest.
	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 6/1/2021 21:15:10' prior: 50618384!
test06WhenATestHasAnErrorThisTestDoesNotFail
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 ^ self error: ''An error''' in: #TestClassA.
		self runTest: #test01 class: #TestClassA
	].
		
	self shouldnt: [ tddGuru run ] raise: Error
	
	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 9/26/2019 20:44:32' prior: 50618396!
test07RunFromASpecificChange
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #ExampleClass subclassOf: Object.
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 ^ self error: ''An error''' in: #TestClassA.
		self runTest: #test01 class: #TestClassA
	].
		
	tddGuru startingFromChange: 2.
	result _ tddGuru run.
	changes := result changes.
	self assert: changes size equals: 3.

	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 11/7/2019 20:42:21' prior: 50618412!
test08ReRunTheWholeAnalysis
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self runTest: #test01 class: #TestClassA
	].
		
	result _ tddGuru run.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
	].

	result _ tddGuru rerun.
	changes := result changes.
	self assert: changes size equals: 4.

	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 11/7/2019 20:55:58' prior: 50618429!
test09ReRunFromASpecificChange
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #ModelClassA subclassOf: Object.
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self runTest: #test01 class: #TestClassA
	].
		
	tddGuru startingFromChange: 2.
	tddGuru run.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
	].

	result _ tddGuru rerun.
	self assert: result changes size equals: 4.

	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 11/12/2019 16:56:06' prior: 50618448!
test10ChangeWhenAMethodWasAdded
	| result changeInWhichWasAdded |
	
	self logChangesWhile: [ 
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm3 ^ 1' in: #ModelClassA.
	].
		
	result _ tddGuru run.
	
	changeInWhichWasAdded := result changes at: 3.
	self assert: (result changeWhenMethodWasAdded: #m2 in: #ModelClassA) equals: changeInWhichWasAdded.

	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 6/1/2021 21:10:33' prior: 50618466!
test11IgnorePassingTestChangesForUntrackedTests
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	
	self logChangesWhile: [ 
		self runTest: #test01 class: #TestClassA.
	].
		
	result := tddGuru run.
	
	self assert: result changes size equals: 0.

	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 6/1/2021 21:12:48' prior: 50618479!
test12IgnoreFailingTestChangesForUntrackedTests
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	
	self logChangesWhile: [ 
		self runTest: #test01 class: #TestClassA.
	].
		
	result := tddGuru run.
	
	self assert: result changes size equals: 0.

	! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:05:49' prior: 50618492!
test01WhenAProductionClassIsAddedIsStillInRed
	| result  |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ProductionClass subclassOf: Object ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:06:46' prior: 50618508!
test02WhenAProductionMethodIsAddedIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:15:01' prior: 50618525!
test03WhenTheTestPassesThenIsInGreen
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01 class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:18:13' prior: 50618544!
test04WhenTheTestFailsIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self runTest: #test01 class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:19:22' prior: 50618563!
test05WhenAProductionMethodIsChangedIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self compileMethod: 'm1 ^ 2' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:21:33' prior: 50618582!
test06WhenTheNewTestPassesButAnotherTestFailsThenIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m1) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:30:42' prior: 50618609!
test07WhenAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:04:52' prior: 50618639!
test08WhenATestIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assert: tddGuru currentState equals: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedErrorMessage: #test02 class: #TestSomething).! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:30:16' prior: 50618658!
test09WhenATestIsRenamedAndAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'test02A self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self removeMethodWithSelector: #test02 from: #TestSomething.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 10/3/2019 20:20:27' prior: 50618689!
test10WhenAModelMethodIsRemovedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	self compileMethod: 'm1 ^ 1.' in: #ModelClass.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self removeMethodWithSelector: #m1 from: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 10/3/2019 20:21:32' prior: 50618708!
test11WhenAModelClassIsRemovedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self removeClass: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 11/2/2019 16:44:19' prior: 50618724!
test11WhenATestClassIsAddedIsStillInRed
	| result |
		
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #TestSomethingB subclassOf: TestCase. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 14:51:26' prior: 50618740!
test12WhenTheTestIsChangedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 14:59:48' prior: 50618758!
test13WhenAnotherTestIsChangedIsStillInRed
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
		
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. 
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 3/8/2020 14:47:39' prior: 50618778!
test14WhenATestIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
		
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. 
		self runTest: #test02 class: #TestSomething.
		self removeMethodWithSelector: #test01 from: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testRemovedWhileInRed: #test01 class: #TestSomething)! !
!RedTest methodsFor: 'tests' stamp: 'MGD 3/8/2020 14:49:26' prior: 50618801!
test15WhenATestClassIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestClassA.
	self compileMethod: 'test01 self assert: true.' in: #TestClassB.
	tddGuru initialTestClasses: { self classNamed: #TestClassA . self classNamed: #TestClassB }.
	tddGuru initialState: Red new.
		
	self logChangesWhile: [ self removeClass: #TestClassB ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testClassRemovedWhileInRed: #TestClassB)! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:32:05' prior: 50618826!
test01WhenAProductionMethodIsChangedIsStillRefactoring
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	self compileMethod: 'm1 ^ 1' in: #ModelClass.
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^ 2' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/26/2019 15:13:48' prior: 50618841!
test02WhenAProductionMethodIsAddedIsStillRefactoring

	self newClassNamed: #ModelClass subclassOf: Object. 
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	tddGuru run.
		
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 8/15/2019 16:29:57' prior: 50618853!
test03WhenAProductionClassIsAddedIsStillRefactoring
	| result |
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self newClassNamed: #ProductionClass subclassOf: Object.  ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:33:05' prior: 50618865!
test04WhenATestIsChangedIsStillRefactoring
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [  self compileMethod: 'test01 self assert: true' in: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:33:49' prior: 50618883!
test05WhenATestIsRenamedIsStillRefactoring
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	
	self logChangesWhile: [  
		self compileMethod: 'test01A self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test01 from: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 8/15/2019 17:20:37' prior: 50618903!
test06WhenATestClassIsAddedIsStillRefactoring
	| result |
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self newClassNamed: #TestClassA subclassOf: TestCase.  ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 4/7/2020 17:15:00' prior: 50618915!
test07WhenATestIsAddedResultHasAnErrorAndIsWritingAFailingTest
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	
	self logChangesWhile: [ self compileMethod: 'testA self assert: false' in: #TestClassA ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedBeforeRunningTheRestOfTheTests: #testA class: #TestClassA).
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:36:55' prior: 50618936!
test08WhenAllTestPassThenIsInGreen
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'testA self assert: true' in: #TestClassA.
	self compileMethod: 'testB self assert: true' in: #TestClassA.
	
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	
	self logChangesWhile: [ self runAllTestsOf: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:36:38' prior: 50618955!
test09WhenOneOfTheTestFailsThenIsStillRefactoring
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'testA self assert: false' in: #TestClassA.
	self compileMethod: 'testB self assert: true' in: #TestClassA.
	
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ self runAllTestsOf: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:37:14' prior: 50618974!
test10WhenAClassIsRemovedIsStillRefactoring
	| result |
	
	self newClassNamed: #TestClassA subclassOf: Object.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self removeClass: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/29/2019 19:22:28' prior: 50618987!
test11WhenAProductionMethodIsRemovedStillRefactoring
	| result |
	
	self newClassNamed: #ProductionClass subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ProductionClass.
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [  self removeMethodWithSelector: #m1 from: #ProductionClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 10/3/2019 16:09:22' prior: 50619003!
test12WhenATestClassIsRemovedThoseTestsAreNoLongerTakenIntoAccount
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test01 self assert: true' in: #TestClassB.
	tddGuru initialTestClasses: { self classNamed: #TestClassA . self classNamed: #TestClassB }.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ 
		self removeClass: #TestClassA.
		self runAllTestsOf: #TestClassB ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 18:52:49' prior: 50619026!
test13WhenATestIsRemovedIsNoLongerTakenIntoAccount
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ 
		self removeMethodWithSelector: #test02 from: #TestClassA.
		self runTest: #test01 class: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 18:54:50' prior: 50619047!
test14WhenAllTestAreRemovedThenGoesToGreen
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self removeClass: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/12/2019 17:46:39' prior: 50619066!
test15WhenAModelMethodIsAddedButNotUsedThereIsAnError
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodWasNotUsedDuringRefactor: #m2 class: #ModelClassA).! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 18:40:59' prior: 50619093!
test16WhenAModelMethodIsAddedAndThenUsedThereAreNoErrors
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm1 ^ self m2' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 18:43:41' prior: 50619116!
test17WhenAModelMethodIsAddedAndRemovedAndIsNotUsedThereAreNoErrors
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self removeMethodWithSelector: #m2 from: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 19:06:58' prior: 50619140!
test18WhenAModelMethodIsAddedAndIsOnlyMentionedInACommentThereIsAnError
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm1 "m2 in a comment" ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 1.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 19:16:10' prior: 50619164!
test19WhenTwoModelMethodsAreAddedBothHaveToBeUsedInAValidRefactor
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm3 ^ 1' in: #ModelClassA.
		self compileMethod: 'm1 self m2. ^ self m3' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 19:36:24' prior: 50619189!
test20WhenTwoModelMethodsAreAddedAndNotUsedIsNotAValidRefactor
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm3 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 2.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodWasNotUsedDuringRefactor: #m2 class: #ModelClassA).
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodWasNotUsedDuringRefactor: #m3 class: #ModelClassA).! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 19:32:52' prior: 50619220!
test21WhenAModelMethodIsAddedAndIsUsedAsAVariableNameIsNotAValidRefactor
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm1 | m2 | m2 := 1. ^ m2' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodWasNotUsedDuringRefactor: #m2 class: #ModelClassA).! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/26/2019 15:02:15' prior: 50619248!
test22WhenAModelMethodIsNotUsedWhenAnalysisIsFinishedThereIsAnError
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Refactor.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodWasNotUsedDuringRefactor: #m2 class: #ModelClassA).! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 12/19/2019 20:08:26' prior: 50619273!
test23WhenATestClassIsRenamedThoseTestsAreStillTakenIntoAccount
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self renameClass: #TestClassA to: #TestClassB.
		self runTest: #test01 class: #TestClassB
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result ! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 3/15/2020 14:36:52' prior: 50619295!
test24WhenAMethodIsOverridenItIsConsideredUsedAndRefactorIsValid
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'initialize ^ self' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result ! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 6/9/2021 19:32:04' prior: 50619317!
test25WhenAModelMethodIsAddedAndUsedInATestRefactorIsValid
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'test01 self assert: ModelClassA new m2 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 12/19/2019 17:25:19' prior: 50619342!
test01WhenTheTestIsChangedThenIsStillWritingAFailingTest
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 ^ self assert: true' in: #TestSomething.
		self compileMethod: 'test01 ^ self assert: true' in: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 19:19:36' prior: 50619358!
test02WhenAModelClassIsAddedThenIsStillWritingAFailingTest
	"This is may sound wrong but we'll let write a class if it has no behaviour"
	| result |
	
	tddGuru initialState: WritingAFailingTest new.
	
	self logChangesWhile: [ self newClassNamed: #ProductionClass subclassOf: Object. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 6/20/2019 20:46:31' prior: 50619373!
test03WhenATestClassIsAddedThenIsStillWritingAFailingTest
	| result |
	
	tddGuru initialState: WritingAFailingTest new.
		
	self logChangesWhile: [ self newClassNamed: #TestSomething subclassOf: TestCase. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:39:14' prior: 50619386!
test04WhenATestFailsThenIsInRedState
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 18:44:18' prior: 50619400!
test05WhenAModelMethodIsAddedAndNoTestIsBeingWrittenThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodAddedBeforeTest:  #m1 class: #ModelClass).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:40:15' prior: 50619419!
test06WhenTheTestIsRenamedThenIsStillWritingAFailingTest
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01A self assert: true' in: #TestSomething.
		self compileMethod: 'test01B self assert: false' in: #TestSomething.
		self removeMethodWithSelector: #test01A from: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01B
	! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/7/2020 17:25:05' prior: 50619439!
test07WhenAModelMethodIsChangedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ModelClass.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'm1 ^ 2' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodChangedBeforeTest: #m1 class: #ModelClass).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:41:20' prior: 50619458!
test08WhenSetUpMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 ^ self assert: true' in: #TestSomething.
		self compileMethod: 'setUp ^ 1' in: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.
	self assert: result changes size equals: 3.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:41:47' prior: 50619476!
test09WhenAMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 ^ self assert: true' in: #TestSomething.
		self compileMethod: 'aFactory ^ 1' in: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.
	self assert: result changes size equals: 3.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/6/2019 17:40:14' prior: 50619494!
test10WhenASecondTestIsAddedIsInMoreThanOneTestWritten
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestSomething.
		self compileMethod: 'test02 self assert: false' in: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assertHasNoErrors: result.
	! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:07:38' prior: 50619510!
test11WhenATestWithTheSameNameIsChangedInOtherClassThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self newClassNamed: #TestSomethingB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingB.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA. self classNamed: #TestSomethingB }.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test01 class: #TestSomethingA)).
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: false' in: #TestSomethingB.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testChangedWhileThisTestWasBeingWritten:  #test01 in: #TestSomethingB)! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:07:45' prior: 50619540!
test12WhenADifferentTestIsChangedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestSomethingA.
	self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test02 class: #TestSomethingA)).
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA}.
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testChangedWhileThisTestWasBeingWritten: #test01 in: #TestSomethingA)
	! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/6/2019 18:11:46' prior: 50619568!
test13WhenATestWithTheSameNameIsAddedInOtherClassThenIsInMoreThanOneTestWritten
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self newClassNamed: #TestSomethingB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA. self classNamed: #TestSomethingB }.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test01 class: #TestSomethingA)).
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: false' in: #TestSomethingB.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: MoreThanOneTestWritten .
	self assertHasNoErrors: result.
! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 12:16:54' prior: 50619594!
test14WhenAModelMethodIsRemovedIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClassA subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ModelClassA.
	
	self logChangesWhile: [ 	
		self newClassNamed: #TestSomethingA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #m1 from: #ModelClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodRemovedWhileWritingATest: #m1 class: #ModelClassA).
! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 19:16:14' prior: 50619616!
test15WhenTheTestIsRemovedThenIsInGreen
	| result |

	self logChangesWhile: [ 	
		self newClassNamed: #TestSomethingA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #test01 from: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.
! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/2/2019 21:36:22' prior: 50619631!
test16WhenATestIsRenamedThenIsStillWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA }.

	self logChangesWhile: [ 	
		self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
		self compileMethod: 'test01A self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #test01 from: #TestSomethingA.
		self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: WritingAFailingTest.
	self assertHasNoErrors: result.
! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/7/2020 17:23:38' prior: 50619655!
test17WhenAModelClassIsRemovedThenIsNotDoingTDD
	| result |
	self newClassNamed: #ModelClassA subclassOf: Object.
	
	self logChangesWhile: [ 	
		self newClassNamed: #TestSomethingA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestSomethingA.
		self removeClass: #ModelClassA
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru classRemovedBeforeRunningTests: #ModelClassA).

! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:08:20' prior: 50619673!
test18WhenTheTestPassesAnErrorIsReportedAndGoesToGreen
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01 class: #TestSomething).
	self assert: tddGuru currentState equals: Green.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/15/2019 21:00:10' prior: 50619691!
test19AnotherTestIsRemovedAnErrorIsReportedAndIsStillWritingAFailingTest
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestClassA.
	self compileMethod: 'test01 self assert: true.' in: #TestClassB.
	tddGuru initialTestClasses: { self classNamed: #TestClassA . self classNamed: #TestClassB }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestClassA.
		self removeMethodWithSelector: #test01 from: #TestClassB ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodRemovedWhileWritingATest: #test01 class: #TestClassB).
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 15:54:11' prior: 50619720!
test20WhenAFirstTestIsAddedIsStillWritingAFailingTest
	| result |
	
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true.' in: #TestClassA. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 18:47:29' prior: 50619736!
test21WhenAModelMethodIsAddedBeforeRunningTestsThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: #test01 in: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodAddedBeforeRunningTests: #m1 class: #ModelClass).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/7/2020 17:01:17' prior: 50619756!
test22WhenAModelMethodIsChangedBeforeWritingATestThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ModelClass.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodChangedBeforeTest: #m1 class: #ModelClass).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/7/2020 17:31:12' prior: 50619776!
test23WhenATestClassIsRemovedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA }.
		
	self logChangesWhile: [ 
		self newClassNamed: #TestSomethingB subclassOf: TestCase.
		self compileMethod: 'test01 ^ 1' in: #TestSomethingB.
		self removeClass: #TestSomethingA ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru classRemovedBeforeRunningTests: #TestSomethingA).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 12/19/2019 17:33:03' prior: 50619797!
changeFileWithExtension: fileExtension

	^(FileIOAccessor default baseNameFor: Smalltalk imageName), fileExtension! !
!TestChangesTest methodsFor: 'helpers' stamp: 'HAW 7/11/2022 20:18:19' prior: 50619803!
changeUserChangesFileWhile: aBlock
	^Preferences
		withTemporaryValue: self userChangesForTestFileExtension
		of: #userChangesFileNameExtension
		do: aBlock. 
	! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 12/19/2019 17:33:19' prior: 50619811!
changesFileForTests
	^ self changeFileWithExtension: self userChangesForTestFileExtension ! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 12/19/2019 16:19:29' prior: 50619817!
classCategoryOfTestData
	^ '__TDDGuru-TestData__'! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 3/17/2020 15:52:00' prior: 50619821!
createTestClass

	| testClass |
	testClass := TestCase 
		subclass: 'TestChangesTestData' 
		instanceVariableNames: '' 
		classVariableNames: '' 
		poolDictionaries: '' 
		category: self classCategoryOfTestData.
		
	testClass compile: 'aTestThatPass self assert: true'.
	testClass compile: 'aTestThatFails self assert: false'.
	testClass compile: 'aTestThatErrors self error: ''error'''.
						
	^ testClass! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 3/17/2020 16:21:04' prior: 50619837!
createTestClassSubclassOf: aClass named: aName
	^ aClass 
		subclass: aName
		instanceVariableNames: '' 
		classVariableNames: '' 
		poolDictionaries: '' 
		category: self classCategoryOfTestData.! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 3/17/2020 15:29:23' prior: 50619846!
createTestDataClass.

	^ Object 
		subclass: self testDataClassName 
		instanceVariableNames: '' 
		classVariableNames: '' 
		poolDictionaries: '' 
		category: self classCategoryOfTestData.! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 12/19/2019 16:05:00' prior: 50619855!
scanChangesFromFile
	| fileStream changeList |

	fileStream := self changesFileForTests asFileEntry readStream.
	changeList := ChangeList new scanFile: fileStream from: 0 to: fileStream size.

	^ changeList changeList.! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 12/19/2019 16:03:48' prior: 50619865!
userChangesForTestFileExtension
	^ '.test.changes'! !
!TestChangesTest methodsFor: 'setUp/tearDown' stamp: 'MGD 12/19/2019 17:33:41' prior: 50619870 overrides: 16961402!
tearDown
	self changesFileForTests asFileEntry delete.
	SystemOrganization removeSystemCategory: self classCategoryOfTestData.! !
!TestChangesTest methodsFor: 'as yet unclassified' stamp: 'MGD 3/17/2020 16:19:05' prior: 50619877!
testDataClassName
	^ #TestChangesTestClass__! !
!LogTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 16:02:10' prior: 50619881!
test01RunningAPassingTestShouldBeLogged
	" Log format expected:

	!!testRun: #TestCase #testSelector stamp: changeStamp!!
	PASSED
	"
	| testName testClass |
	
	self changeUserChangesFileWhile: [
		testClass := self createTestClass.
		testName := #aTestThatPass. 
		self runTest: testName of: testClass.

		self assertIsLoggedOnce: '!!testRun: ', testClass name printString, ' #', testName, ' stamp:'.
		self assertIsLoggedOnce: 'PASSED!!' ]! !
!LogTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 16:01:16' prior: 50619898!
test02RunningAFailingTestShouldBeLogged
	" Log format expected:

	!!testRun #NewTestCase #testSelector stamp: changeStamp!!
	FAILURE
	"
	| testName testClass |
	
	self changeUserChangesFileWhile: [
		testClass := self createTestClass.
		testName := #aTestThatFails.
		
		self runTest: testName of: testClass.
		
		self assertIsLoggedOnce: '!!testRun: ', testClass name printString, ' #', testName, ' stamp:'.
		self assertIsLoggedOnce: 'FAILURE!!' ]! !
!LogTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 16:00:02' prior: 50619915!
test03RunningATestWithAnErrorShouldBeLogged
	" Log format expected:

	!!testRun NewTestCase #testSelector stamp: changeStamp!!
	ERROR
	"
	| testName testClass |
	
	self changeUserChangesFileWhile: [
		testClass := self createTestClass.
		testName := #aTestThatErrors.
		self runTest: testName of: testClass.

		self assertIsLoggedOnce: '!!testRun: ', testClass name printString, ' ', testName printString, ' stamp:'.
		self assertIsLoggedOnce: 'ERROR!!' ]! !
!LogTestChangesTest methodsFor: 'tests' stamp: '' prior: 50619931!
test04OverridingAMethodShouldBeLoggedWithAReferenceToTheOverridenMethod
	" Log format expected:

	!!Class methodsFor: 'category' stamp: 'author stamp' overrides: 'methodHash'!!
	newMethodSourceCode
	"
	| aSuperClass aSubClass |
	
	self changeUserChangesFileWhile: [
		aSuperClass := self createTestDataClass.
		aSuperClass compile: 'm1 ^ 1' classified: 'a-category'.
		aSubClass := self createTestClassSubclassOf: aSuperClass named: #SubclassTestDataClass__.
		aSubClass compile: 'm1 ^ 2' classified: 'a-category'.

		self assertIsLoggedOnce: '!!SubclassTestDataClass__ methodsFor: ''a-category'' stamp:'.
		self assertIsLoggedOnce: 'overrides: '.
		self assertIsLoggedOnce: 'm1 ^ 2' ] ! !
!LogTestChangesTest methodsFor: 'tests' stamp: '' prior: 50619954!
test05WhenAMethodIsNotOverridenTheMethodReferenceIsNotIncluded
	" Log format expected:

	!!Class methodsFor: 'category' stamp: 'author stamp'!!
	newMethodSourceCode
	"
	| aSuperClass aSubClass |

	self changeUserChangesFileWhile: [
		aSuperClass := self createTestDataClass.
		aSuperClass compile: 'm1 ^ 1' classified: 'a-category'.
		aSubClass := self createTestClassSubclassOf: aSuperClass named: #SubclassTestDataClass__.
		aSubClass compile: 'm2 ^ 2' classified: 'a-category'.

		self assertIsNotLogged: 'overrides:'.
	] ! !
!LogTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 19:04:43' prior: 50619973!
test06WhenAMethodIsChangedItIsNotConsideredOverriden
	" Log format expected:

	!!Class methodsFor: 'category' stamp: 'author stamp'!!
	newMethodSourceCode
	"
	| aClass |

	self changeUserChangesFileWhile: [
		aClass := self createTestDataClass.
		aClass compile: 'm1 ^ 1' classified: 'a-category'.
		aClass compile: 'm1 ^ 2' classified: 'a-category'.

		self assertIsNotLogged: 'overrides:'.
	] ! !
!LogTestChangesTest methodsFor: 'run tests' stamp: 'MGD 11/2/2019 17:04:07' prior: 50619988!
runTest: aTestSelector of: aTestClass
	[ aTestClass run: aTestSelector ] on: Error do: []! !
!LogTestChangesTest methodsFor: 'as yet unclassified' stamp: 'MGD 12/19/2019 16:24:17' prior: 50619994!
assertIsLogged: aString times: stringCount
	| logContent startPosition indexOfSubstring |

	logContent := self changesFileForTests asFileEntry textContents.

	(stringCount <= 0)
		ifTrue: [ self deny: (logContent includesSubString: aString) ]
		ifFalse:	[
			startPosition := 1.
			self assert: (logContent includesSubString: aString).
			stringCount timesRepeat: [
				indexOfSubstring := logContent findString: aString startingAt: startPosition.

				self assert: indexOfSubstring > 0.
				startPosition := indexOfSubstring.
			]
		]

	! !
!LogTestChangesTest methodsFor: 'as yet unclassified' stamp: 'MGD 12/19/2019 16:23:03' prior: 50620014!
assertIsLoggedOnce: aString
	self assertIsLogged: aString times: 1.
	! !
!LogTestChangesTest methodsFor: 'as yet unclassified' stamp: 'MGD 3/17/2020 16:23:22' prior: 50620019!
assertIsLoggedTwice: aString
	self assertIsLogged: aString times: 2.
	! !
!LogTestChangesTest methodsFor: 'as yet unclassified' stamp: '' prior: 50620024!
assertIsNotLogged: aString
	| logContent |

	logContent := self changesFileForTests asFileEntry textContents.
	self deny: (logContent includesSubString: aString).
	! !
!ScanTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 15:39:19' prior: 50620032!
test01ScanPassingTestChange

	| testRunChange testClass |

	self changeUserChangesFileWhile: [
		testClass := self createTestClass.
		testClass run: #aTestThatPass.

		testRunChange := self scanChangesFromFile last.

		self assert: testRunChange changeType equals: #testRun.
		self assert: testRunChange changeClassName equals: testClass name.
		self assert: testRunChange methodSelector equals: #aTestThatPass.
		self assert: testRunChange isPassed.
		self deny: testRunChange stamp isNil ]! !
!ScanTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 15:39:32' prior: 50620050!
test02ScanFailedTestChange

	| testRunChange testClass |

	self changeUserChangesFileWhile: [
		testClass := self createTestClass.
		testClass run: #aTestThatFails.

		testRunChange := self scanChangesFromFile last.

		self assert: testRunChange changeType equals: #testRun.
		self assert: testRunChange changeClassName equals: testClass name.
		self assert: testRunChange methodSelector equals: #aTestThatFails.
		self assert: testRunChange isFailure ]! !
!ScanTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 16:04:46' prior: 50620067!
test03ScanNewTestClass
	
	| newClassChange newClass |

	self changeUserChangesFileWhile: [
		newClass := TestCase 
			subclass: #TestClassA
			instanceVariableNames: '' 
			classVariableNames: '' 
			poolDictionaries: '' 
			category: self classCategoryOfTestData.
		newClassChange := self scanChangesFromFile last.

		self assert: newClassChange changeType equals: #classDefinition.
		self assert: newClassChange changeClassName equals: newClass name.
		self assert: newClassChange changeClass equals: newClass.
		self assert: newClassChange isTestClassChange.
		self deny: newClassChange stamp isNil ]! !
!ScanTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 19:26:02' prior: 50620089!
test04ScanOverridenMethod
	
	| methodChange aSuperClass aSubclass |

	self changeUserChangesFileWhile: [
		aSuperClass := self createTestDataClass.
		aSubclass := self createTestClassSubclassOf: aSuperClass named: #AClass__.		
		aSuperClass compile: 'm1 ^ 1'.
		aSubclass compile: 'm1 ^ 2'.

		methodChange := self scanChangesFromFile last.

		self assert: methodChange changeType equals: #method.
		self assert: methodChange changeClassName equals: aSubclass name.
		self assert: methodChange changeClass equals: aSubclass.
		self assert: methodChange methodSelector equals: #m1.
		self assert: methodChange overridesASuperclassMethod.
		self deny: methodChange stamp isNil ]! !
!ScanTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 19:33:24' prior: 50620113!
test05ScanAMethodThatIsNotOverriden
	
	| methodChange aSuperClass aSubclass |

	self changeUserChangesFileWhile: [
		aSuperClass := self createTestDataClass.
		aSubclass := self createTestClassSubclassOf: aSuperClass named: #AClass__.		
		aSuperClass compile: 'm1 ^ 1'.
		aSubclass compile: 'm2 ^ 2'.

		methodChange := self scanChangesFromFile last.

		self assert: methodChange changeType equals: #method.
		self assert: methodChange changeClassName equals: aSubclass name.
		self assert: methodChange changeClass equals: aSubclass.
		self assert: methodChange methodSelector equals: #m2.
		self deny: methodChange overridesASuperclassMethod.
		self deny: methodChange stamp isNil ]! !
!AnalysisResult methodsFor: 'initialization' stamp: 'MGD 1/3/2020 08:41:52' prior: 50620138 overrides: 16920235!
initialize
	timeline := TimeLine for: self.
	errors := Dictionary new.
	
	timeline addDependent: self.! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 5/14/2019 10:49:41' prior: 50620144!
addError: anErrorString in: aChange
	errors at: aChange put: anErrorString! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 8/30/2019 08:55:09' prior: 50620149!
changeAt: index
	^ self changeEvents at: index
! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 8/7/2019 20:02:50' prior: 50620153!
errorIn: aChange
	^ errors at: aChange.! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 12/1/2018 14:50:12' prior: 50620157!
errors
	^ errors! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 6/20/2019 18:22:50' prior: 50620160!
hasError: aChange
	^ errors includesKey: aChange.! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 10/3/2019 19:15:08' prior: 50620164!
isCorrect: aChange
	| stateAfterChange |
	
	stateAfterChange := self timeline stateAfter: aChange.
	
	^ stateAfterChange isCorrect and: [ (self hasError: aChange) not ]! !
!AnalysisResult methodsFor: 'changes' stamp: 'MGD 6/20/2019 18:18:28' prior: 50620172!
addChange: aChange
	timeline addChange: aChange ! !
!AnalysisResult methodsFor: 'changes' stamp: 'MGD 8/30/2019 08:56:40' prior: 50620176!
changeEvents
	^ timeline changeEvents! !
!AnalysisResult methodsFor: 'timeline' stamp: 'MGD 6/20/2019 18:57:39' prior: 50620180!
stateAfter: aChange 
	^ timeline stateAfter: aChange! !
!AnalysisResult methodsFor: 'timeline' stamp: 'MGD 6/21/2019 07:31:17' prior: 50620184!
timeline
	^ timeline! !
!AnalysisResult methodsFor: 'timeline' stamp: 'MGD 6/25/2019 09:28:49' prior: 50620188 overrides: 16903929!
update: aSection
	self changed: aSection! !
!AnalysisResult methodsFor: 'states' stamp: 'MGD 6/27/2019 10:19:24' prior: 50620192!
stateTransitionFrom: previousTDDState to: currentTDDState
	timeline stateTransitionFrom: previousTDDState to: currentTDDState! !
!AnalysisResult methodsFor: 'accessing' stamp: 'MGD 11/12/2019 16:42:07' prior: 50620199!
changeWhenMethodWasAdded: aSelector in: className 
	^ timeline changeWhenMethodWasAdded: aSelector in: className! !
!AnalysisResult methodsFor: 'accessing' stamp: 'MGD 8/30/2019 09:02:51' prior: 50620205!
changes
	
	^ timeline changes! !
!Change methodsFor: 'accessing' stamp: 'MGD 5/31/2019 07:28:53' prior: 50620209!
category
	self subclassResponsibility ! !
!Change methodsFor: 'accessing' stamp: 'MGD 9/18/2019 20:40:55' prior: 50620213!
code
	
	^ changeRecord string.
	! !
!Change methodsFor: 'accessing' stamp: 'MGD 12/26/2019 19:48:15' prior: 50620217!
dateString
	^ self stamp substrings second! !
!Change methodsFor: 'accessing' stamp: 'MGD 5/16/2019 20:08:13' prior: 50620221!
description
	self subclassResponsibility.! !
!Change methodsFor: 'accessing' stamp: 'MGD 5/16/2019 19:34:59' prior: 50620225!
isRecognized
	^ true! !
!Change methodsFor: 'accessing' stamp: 'HAW 11/12/2021 12:33:07' prior: 50620228!
time
	| timeParts hours minutes seconds date time |
	
	date := FixedGregorianDate fromDate: self dateString asDate.
	timeParts := self timeString findTokens: ':'.
	"Some timestamps have only hour and minutes without seconds, so we add 0 to fix that problem - Hernan"
	timeParts add: 0.
	timeParts size < 3 ifTrue: [ self error: 'Incorrect time format ', self timeString ].
	
	hours := timeParts first asNumber.
	minutes := timeParts second asNumber.
	seconds := timeParts third asNumber.
	
	time := TimeOfDay hours: hours minutes: minutes seconds: seconds.	
	
	^ GregorianDateTime date: date timeOfDay: time.
	! !
!Change methodsFor: 'accessing' stamp: 'MGD 11/27/2019 19:06:57' prior: 50620250!
timeString
	^ self stamp substrings third! !
!Change methodsFor: 'printing' stamp: 'MGD 6/20/2019 15:19:42' prior: 50620255 overrides: 16902975!
printOn: aStream
	(self category printString, ' - ', self description) printOn: aStream.! !
!Change methodsFor: 'printing' stamp: 'MGD 11/26/2019 16:09:29' prior: 50620261 overrides: 16902983!
printString	
	^ '[', self category printString, '] ', self description.! !
!Change methodsFor: 'printing' stamp: 'MGD 5/23/2019 11:02:32' prior: 50620266!
stamp
	^ changeRecord stamp! !
!Change methodsFor: 'initialization' stamp: 'MGD 5/1/2019 16:13:26' prior: 50620270!
changeRecord: aChangeRecord
	changeRecord := aChangeRecord ! !
!Change methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:55:55' prior: 50620274!
reportChangeTo: tddGuru 
	self subclassResponsibility ! !
!Change class methodsFor: 'instance creation' stamp: 'MGD 7/12/2019 12:37:43' prior: 50620279!
newFor: aChangeRecord
	^ self new changeRecord: aChangeRecord! !
!ClassChange methodsFor: 'accessing' stamp: 'MGD 4/10/2020 16:45:39' prior: 50620284!
changeClass
	^ changeRecord changeClass! !
!ClassChange methodsFor: 'accessing' stamp: 'MGD 4/10/2020 16:45:53' prior: 50620288!
changeClassName
	^ changeRecord changeClassName ! !
!ClassRenamed methodsFor: 'accessing' stamp: 'MGD 12/19/2019 20:45:49' prior: 50620293 overrides: 50644581!
category
	^ #classRenamed! !
!ClassRenamed methodsFor: 'accessing' stamp: 'MGD 12/19/2019 19:49:20' prior: 50620297!
currentName
	^ changeRecord newClassName ! !
!ClassRenamed methodsFor: 'accessing' stamp: 'MGD 12/19/2019 20:46:38' prior: 50620302 overrides: 50644593!
description
	^ self previousName , ' was renamed to ', self currentName.! !
!ClassRenamed methodsFor: 'accessing' stamp: 'MGD 12/19/2019 19:49:03' prior: 50620307!
previousName
	^ changeRecord changeClassName ! !
!ClassRenamed methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:55:38' prior: 50620312 overrides: 50644650!
reportChangeTo: tddGuru 
	tddGuru classRenamedFrom: self previousName to: self currentName! !
!ModelClassRemoved methodsFor: 'accessing' stamp: 'MGD 7/15/2019 07:40:25' prior: 50620318 overrides: 50644581!
category
	^ #classRemoved! !
!ModelClassRemoved methodsFor: 'printing' stamp: 'MGD 10/2/2019 19:39:53' prior: 50620322 overrides: 50644593!
description
	^ self changeClassName, ' was removed'! !
!ModelClassRemoved methodsFor: 'reporting' stamp: 'MGD 10/14/2019 16:24:29' prior: 50620327 overrides: 50644650!
reportChangeTo: tddGuru
	tddGuru modelClassRemoved: changeRecord changeClassName! !
!NewModelClass methodsFor: 'accessing' stamp: 'MGD 8/16/2019 09:58:58' prior: 50620333 overrides: 50644581!
category
	^ #newModelClass! !
!NewModelClass methodsFor: 'printing' stamp: 'MGD 8/16/2019 10:07:20' prior: 50620337 overrides: 50644593!
description
	^ 'New model class ', self changeClassName! !
!NewModelClass methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:39:14' prior: 50620342 overrides: 50644650!
reportChangeTo: tddGuru
	tddGuru newModelClass: self changeClassName! !
!NewTestClass methodsFor: 'accessing' stamp: 'MGD 5/11/2019 15:47:31' prior: 50620348 overrides: 50644581!
category
	^ #newTestClass! !
!NewTestClass methodsFor: 'printing' stamp: 'MGD 5/16/2019 20:10:25' prior: 50620352 overrides: 50644593!
description
	^ 'New test class ', self changeClassName.! !
!NewTestClass methodsFor: 'reporting' stamp: 'MGD 10/15/2019 17:47:12' prior: 50620357 overrides: 50644650!
reportChangeTo: tddGuru
	tddGuru newTestClass: self changeClassName! !
!TestClassRemoved methodsFor: 'accessing' stamp: 'MGD 10/14/2019 16:19:30' prior: 50620363 overrides: 50644581!
category
	^ #testClassRemoved! !
!TestClassRemoved methodsFor: 'printing' stamp: 'MGD 10/14/2019 16:19:44' prior: 50620367 overrides: 50644593!
description
	^ self changeClassName, ' was removed'! !
!TestClassRemoved methodsFor: 'reporting' stamp: 'MGD 10/14/2019 16:16:48' prior: 50620372 overrides: 50644650!
reportChangeTo: aTDDGuru 
	aTDDGuru testClassRemoved: self changeClassName ! !
!MethodChange methodsFor: 'accessing' stamp: 'MGD 4/10/2020 16:34:29' prior: 50620377!
changeClass
	^ changeRecord changeClass! !
!MethodChange methodsFor: 'accessing' stamp: 'MGD 4/10/2020 16:45:59' prior: 50620381!
changeClassName
	^ changeRecord changeClassName ! !
!MethodChange methodsFor: 'accessing' stamp: 'MGD 3/18/2020 20:09:33' prior: 50620385!
methodReference
	^ UninstalledMethodReference selector: self methodSelector class: self changeClassName sourceCode: self code overrides: self overridesASuperclassMethod! !
!MethodChange methodsFor: 'accessing' stamp: 'MGD 3/17/2020 20:14:15' prior: 50620393!
methodSelector
	^ changeRecord methodSelector! !
!MethodChange methodsFor: 'accessing' stamp: 'MGD 3/17/2020 20:11:57' prior: 50620397!
overridesASuperclassMethod
	^ changeRecord overridesASuperclassMethod ! !
!MethodRemoved methodsFor: 'accessing' stamp: 'MGD 6/26/2019 19:12:27' prior: 50620403 overrides: 50644581!
category
	^ #methodRemoved! !
!MethodRemoved methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:25:44' prior: 50620407 overrides: 50644593!
description
	^ self changeClassName, '>>', self methodSelector, ' was removed'! !
!MethodRemoved methodsFor: 'accessing' stamp: 'MGD 3/18/2020 21:05:10' prior: 50620413 overrides: 50644777!
methodReference
	^ UninstalledMethodReference selector: self methodSelector class: self changeClassName sourceCode: self code! !
!MethodRemoved methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:13:15' prior: 50620420 overrides: 50644650!
reportChangeTo: tddGuru
	tddGuru modelMethodRemoved: self methodReference! !
!ModelMethodChanged methodsFor: 'accessing' stamp: 'MGD 8/16/2019 09:58:50' prior: 50620426 overrides: 50644581!
category
	^ #modelMethodChanged! !
!ModelMethodChanged methodsFor: 'accessing' stamp: 'HAW 4/5/2020 18:57:47' prior: 50620431 overrides: 50644585!
code
	| changeClass sourceString |
	sourceString := changeRecord string.
	changeClass := changeRecord changeClass.
	changeClass ifNil: [ ^ sourceString ].
	
	^ [changeClass compilerClass new
		format: sourceString in: changeClass notifying: nil]
		on: InMidstOfFileinNotification
		do: [ :anException | anException resume: true ]! !
!ModelMethodChanged methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:26:56' prior: 50620445 overrides: 50644593!
description
	^ self changeClassName, '>>', self methodSelector, ' was modified'! !
!ModelMethodChanged methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:14:18' prior: 50620451 overrides: 50644650!
reportChangeTo: tddGuru
	tddGuru modelMethodChanged: self methodReference ! !
!NewModelMethod methodsFor: 'accessing' stamp: 'MGD 8/16/2019 10:08:12' prior: 50620457 overrides: 50644581!
category
	^ #newModelMethod! !
!NewModelMethod methodsFor: 'accessing' stamp: 'MGD 9/18/2019 20:41:35' prior: 50620461 overrides: 50644585!
code
	| changeClass sourceString |
	sourceString := changeRecord string.
	changeClass := changeRecord changeClass.
	changeClass ifNil: [ ^ sourceString ].
	
	^ changeClass compilerClass new
		format: sourceString in: changeClass notifying: nil! !
!NewModelMethod methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:27:52' prior: 50620472 overrides: 50644593!
description
	^ self changeClassName, '>>', self methodSelector, ' was added'! !
!NewModelMethod methodsFor: 'reporting' stamp: 'MGD 4/2/2020 19:15:50' prior: 50620478 overrides: 50644650!
reportChangeTo: tddGuru
	tddGuru newModelMethod: self methodReference ! !
!NewTest methodsFor: 'accessing' stamp: 'MGD 5/24/2019 11:48:13' prior: 50620483 overrides: 50644581!
category
	^ #newTest! !
!NewTest methodsFor: 'accessing' stamp: 'MGD 9/18/2019 20:41:29' prior: 50620487 overrides: 50644585!
code
	| changeClass sourceString |
	sourceString := changeRecord string.
	changeClass := changeRecord changeClass.
	changeClass ifNil: [ ^ sourceString ].
	
	^ changeClass compilerClass new
		format: sourceString in: changeClass notifying: nil! !
!NewTest methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:28:13' prior: 50620498 overrides: 50644593!
description
	^ self changeClassName, '>>', self methodSelector, ' was added'! !
!NewTest methodsFor: 'reporting' stamp: 'MGD 4/2/2020 19:47:57' prior: 50620504 overrides: 50644650!
reportChangeTo: tddGuru
	tddGuru newTest: self methodReference! !
!TestChanged methodsFor: 'accessing' stamp: 'MGD 5/16/2019 20:15:49' prior: 50620509 overrides: 50644581!
category
	^ #testChanged! !
!TestChanged methodsFor: 'accessing' stamp: 'MGD 9/18/2019 20:40:31' prior: 50620513 overrides: 50644585!
code
	| changeClass sourceString |
	sourceString := changeRecord string.
	changeClass := changeRecord changeClass.
	changeClass ifNil: [ ^ sourceString ].
	
	^ changeClass compilerClass new
		format: sourceString in: changeClass notifying: nil! !
!TestChanged methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:28:38' prior: 50620524 overrides: 50644593!
description
	^ self changeClassName, '>>', self methodSelector, ' was modified'! !
!TestChanged methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:18:33' prior: 50620530 overrides: 50644650!
reportChangeTo: tddGuru
	tddGuru testChanged: self methodReference ! !
!TestRemoved methodsFor: 'accessing' stamp: 'MGD 10/14/2019 13:18:52' prior: 50620536 overrides: 50644581!
category
	^ #testRemoved! !
!TestRemoved methodsFor: 'accessing' stamp: 'MGD 3/17/2020 20:15:39' prior: 50620540 overrides: 50644593!
description
	^ self changeClassName, '>>', self methodSelector, ' was removed'! !
!TestRemoved methodsFor: 'accessing' stamp: 'MGD 3/18/2020 21:08:34' prior: 50620546 overrides: 50644777!
methodReference
	^ UninstalledMethodReference selector: self methodSelector class: self changeClassName sourceCode: self code! !
!TestRemoved methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:18:50' prior: 50620553 overrides: 50644650!
reportChangeTo: tddGuru
	tddGuru testRemoved: self methodReference ! !
!TestUtilityChanged methodsFor: 'accessing' stamp: 'MGD 6/13/2019 18:34:45' prior: 50620559 overrides: 50644581!
category
	^ #testRefactor! !
!TestUtilityChanged methodsFor: 'accessing' stamp: 'MGD 9/18/2019 20:41:54' prior: 50620563 overrides: 50644585!
code
	| changeClass sourceString |
	sourceString := changeRecord string.
	changeClass := changeRecord changeClass.
	changeClass ifNil: [ ^ sourceString ].
	
	^ changeClass compilerClass new
		format: sourceString in: changeClass notifying: nil! !
!TestUtilityChanged methodsFor: 'printing' stamp: 'MGD 10/22/2019 20:36:38' prior: 50620574 overrides: 50644593!
description
	^ self changeClassName, '>>', self methodSelector, ' was added or modified'! !
!TestUtilityChanged methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:20:05' prior: 50620580 overrides: 50644650!
reportChangeTo: aTDDGuru 
	aTDDGuru testUtilityChanged: self methodReference.! !
!TestRenamed methodsFor: 'accessing' stamp: 'MGD 8/8/2019 19:39:34' prior: 50620586 overrides: 50644581!
category
	^ #testRenamed! !
!TestRenamed methodsFor: 'accessing' stamp: 'MGD 11/5/2019 11:27:22' prior: 50620590!
changeClass
	^ newTestChangeRecord changeClass ! !
!TestRenamed methodsFor: 'accessing' stamp: 'MGD 9/5/2019 08:58:43' prior: 50620594!
changeClassName
	^ newTestChangeRecord changeClassName ! !
!TestRenamed methodsFor: 'accessing' stamp: 'MGD 11/5/2019 11:26:08' prior: 50620599 overrides: 50644585!
code
	^ newTestChangeRecord string ! !
!TestRenamed methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:34:38' prior: 50620604 overrides: 50644593!
description
	^ 'Test was renamed from ', self from, ' to ', self to, ' in ', self changeClassName.! !
!TestRenamed methodsFor: 'accessing' stamp: 'MGD 7/21/2019 12:35:10' prior: 50620610!
from
	^ testRemovedChangeRecord methodSelector ! !
!TestRenamed methodsFor: 'accessing' stamp: 'MGD 3/18/2020 20:53:31' prior: 50620614!
newTestReference
	^ UninstalledMethodReference selector: self to class: self changeClassName sourceCode: self code.! !
!TestRenamed methodsFor: 'accessing' stamp: 'MGD 3/18/2020 20:52:34' prior: 50620620!
oldTestReference
	^ UninstalledMethodReference selector: self from class: self changeClassName ! !
!TestRenamed methodsFor: 'accessing' stamp: 'MGD 8/8/2019 19:39:07' prior: 50620626 overrides: 50644641!
stamp
	^ newTestChangeRecord stamp ! !
!TestRenamed methodsFor: 'accessing' stamp: 'MGD 7/21/2019 12:35:29' prior: 50620630!
to
	^ newTestChangeRecord methodSelector ! !
!TestRenamed methodsFor: 'initialization' stamp: 'MGD 7/20/2019 17:27:20' prior: 50620634!
newTestChangeRecord: aChangeRecord 
	newTestChangeRecord := aChangeRecord! !
!TestRenamed methodsFor: 'initialization' stamp: 'MGD 7/20/2019 17:27:40' prior: 50620639!
testRemovedChangeRecord: aMethodDeletionChangeRecord 
	testRemovedChangeRecord := aMethodDeletionChangeRecord! !
!TestRenamed methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:53:51' prior: 50620646 overrides: 50644650!
reportChangeTo: aTDDGuru 
	aTDDGuru testRenamedFrom: self oldTestReference to: self newTestReference! !
!TestRenamed class methodsFor: 'instance creation' stamp: 'MGD 7/20/2019 17:26:40' prior: 50620652!
newFor: aNewTestChangeRecord and: aTestRemovedChangeRecord
	^ self new newTestChangeRecord: aNewTestChangeRecord; testRemovedChangeRecord: aTestRemovedChangeRecord! !
!TestRun methodsFor: 'accessing' stamp: 'MGD 4/10/2020 16:34:38' prior: 50620660!
changeClass
	^ changeRecord changeClass! !
!TestRun methodsFor: 'accessing' stamp: 'MGD 4/10/2020 16:46:10' prior: 50620664!
changeClassName
	^ changeRecord changeClassName ! !
!TestRun methodsFor: 'accessing' stamp: 'MGD 3/18/2020 20:37:19' prior: 50620668!
testReference
	^ UninstalledMethodReference selector: self testSelector class: self changeClassName sourceCode: self code.! !
!TestRun methodsFor: 'accessing' stamp: 'MGD 3/18/2020 20:36:39' prior: 50620674!
testSelector
	^ changeRecord methodSelector ! !
!TestFailed methodsFor: 'accessing' stamp: 'MGD 5/16/2019 20:16:02' prior: 50620679 overrides: 50644581!
category
	^ #testRun! !
!TestFailed methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:29:05' prior: 50620683 overrides: 50644593!
description
	^ self changeClassName, '>>', self testSelector, ' FAILED'! !
!TestFailed methodsFor: 'reporting' stamp: 'MGD 3/18/2020 21:00:07' prior: 50620689 overrides: 50644650!
reportChangeTo: tddGuru
	tddGuru testFailed: self testReference ! !
!TestPassed methodsFor: 'accessing' stamp: 'MGD 5/31/2019 07:29:27' prior: 50620694 overrides: 50644581!
category
	^ #testRun! !
!TestPassed methodsFor: 'printing' stamp: 'MGD 10/15/2019 16:29:20' prior: 50620698 overrides: 50644593!
description
	^ self changeClassName, '>>', self testSelector, ' PASSED'! !
!TestPassed methodsFor: 'reporting' stamp: 'MGD 3/18/2020 21:00:39' prior: 50620704 overrides: 50644650!
reportChangeTo: tddGuru
	tddGuru testPassed: self testReference! !
!UnknownChange methodsFor: 'accessing' stamp: 'MGD 6/27/2019 11:51:17' prior: 50620709 overrides: 50644581!
category
	^ #unknown! !
!UnknownChange methodsFor: 'accessing' stamp: 'MGD 6/27/2019 11:52:01' prior: 50620713 overrides: 50644593!
description
	^ 'Unknown change'! !
!UnknownChange methodsFor: 'accessing' stamp: 'MGD 5/16/2019 19:35:17' prior: 50620717 overrides: 50644597!
isRecognized
	^ false! !
!ChangeDetector methodsFor: 'initialization' stamp: 'MGD 7/17/2019 08:52:54' prior: 50620721!
changeClass: aChangeClass
	changeClass := aChangeClass ! !
!ChangeDetector methodsFor: 'initialization' stamp: 'MGD 7/17/2019 09:11:06' prior: 50620726!
detectBlock: aBlock
	detectBlock := aBlock ! !
!ChangeDetector methodsFor: 'initialization' stamp: 'MGD 7/17/2019 08:53:43' prior: 50620730!
lookahead: numberOfLookaheadChanges
	lookahead := numberOfLookaheadChanges.! !
!ChangeDetector methodsFor: 'detect changes' stamp: 'MGD 7/17/2019 11:58:16' prior: 50620735!
canBeDetectedIn: lookaheadChangeRecords
	^ detectBlock valueWithArguments: lookaheadChangeRecords asArray! !
!ChangeDetector methodsFor: 'detect changes' stamp: 'MGD 9/8/2019 15:15:05' prior: 50620741!
detectChangeIn: aChangeList ifTrue: aBlock
	| changeRecordsToInspect |

	changeRecordsToInspect := self lookaheadRecordsFrom: aChangeList.
	
	(self canBeDetectedIn: changeRecordsToInspect) 
		ifTrue: [ 
			aChangeList removeAll: changeRecordsToInspect.
			aBlock value: (self newChangeFrom: changeRecordsToInspect) ]! !
!ChangeDetector methodsFor: 'detect changes' stamp: 'MGD 7/17/2019 10:13:12' prior: 50620754!
lookaheadRecordsFrom: aChangeList
	| lookaheads |
	
	lookaheads := OrderedCollection new.
	
	1 to: lookahead do: [ :index | lookaheads add: (aChangeList at: index ifAbsent: [ nil ]) ].
	
	^ lookaheads 
! !
!ChangeDetector methodsFor: 'detect changes' stamp: 'MGD 7/17/2019 10:47:59' prior: 50620763!
newChangeFrom: changeRecords
	(changeRecords size = 1) ifTrue: [ ^ changeClass newFor: changeRecords first ].
	(changeRecords size = 2) ifTrue: [ ^ changeClass newFor: changeRecords first and: changeRecords second ].! !
!ChangeDetector class methodsFor: 'instance creation' stamp: 'MGD 4/14/2020 18:20:45' prior: 50620773!
for: aChangeClass withLookahead: lookaheadNumber detectsWhen: detectionBlock
	^ self new changeClass: aChangeClass; lookahead: lookaheadNumber; detectBlock: detectionBlock.
	! !
!ChangeLog methodsFor: 'initialization' stamp: 'MGD 7/12/2019 11:11:28' prior: 50620781!
changeList: anOrderedCollection 
	changeList := anOrderedCollection .! !
!ChangeLog methodsFor: 'initialization' stamp: 'MGD 12/19/2019 19:43:54' prior: 50620787 overrides: 16920235!
initialize
	changeDetectors := OrderedCollection new.
	
	changeDetectors add: self testRenamedDetector.
	changeDetectors add: self testClassRemovedDetector.
	changeDetectors add: self classRemovedDetector.
	changeDetectors add: self classRenamedDetector.
	changeDetectors add: self testRemovedDetector.
	changeDetectors add: self modelMethodRemovedDetector.
	changeDetectors add: self newProductionClassDetector.
	changeDetectors add: self newProductionMethodDetector.
	changeDetectors add: self newTestDetector.
	changeDetectors add: self newTestClassDetector.
	changeDetectors add: self productionMethodChangedDetector.
	changeDetectors add: self testChangedDetector.
	changeDetectors add: self testFailedDetector.
	changeDetectors add: self testPassedDetector.
	changeDetectors add: self testUtilityChangeDetector.
	changeDetectors add: self unknownChangeDetector.	! !
!ChangeLog methodsFor: 'initialization' stamp: 'MGD 7/12/2019 11:12:49' prior: 50620817!
inventory: aCodeInventory 
	inventory := aCodeInventory ! !
!ChangeLog methodsFor: 'accessing changes' stamp: 'MGD 4/14/2020 16:37:16' prior: 50620822!
do: aBlockClosure 
	
	[ changeList isEmpty ] 		
	whileFalse: [ | nextChange |  
		nextChange := self nextChange.
		aBlockClosure value: nextChange ].! !
!ChangeLog methodsFor: 'accessing changes' stamp: 'MGD 4/14/2020 16:37:08' prior: 50620830!
nextChange 

	changeDetectors do: [ :changeDetector | 
		changeDetector detectChangeIn: changeList ifTrue: [ :change | ^ change ] ].
	
	self error: 'No change detected'

	! !
!ChangeLog methodsFor: 'detectors' stamp: 'MGD 4/9/2020 17:21:45' prior: 50620838!
classRemovedDetector
	^ ChangeDetector for: ModelClassRemoved withLookahead: 1 detectsWhen: [ :aChangeRecord | aChangeRecord isClassDeletion ]! !
!ChangeLog methodsFor: 'detectors' stamp: 'MGD 12/19/2019 19:45:49' prior: 50620845!
classRenamedDetector
	^ ChangeDetector for: ClassRenamed withLookahead: 1 detectsWhen: [ :aChangeRecord | aChangeRecord changeType = #classRenamed ]! !
!ChangeLog methodsFor: 'detectors' stamp: 'MGD 10/14/2019 13:12:59' prior: 50620852!
modelMethodRemovedDetector
	^ ChangeDetector for: MethodRemoved withLookahead: 1 detectsWhen: [ :aChangeRecord | aChangeRecord isMethodDeletion ]! !
!ChangeLog methodsFor: 'detectors' stamp: 'MGD 8/16/2019 09:58:01' prior: 50620859!
newProductionClassDetector
	^ ChangeDetector for: NewModelClass withLookahead: 1 detectsWhen: [ :aChangeRecord | aChangeRecord changeType = #classDefinition and: [ aChangeRecord isTestClassChange not ]]! !
!ChangeLog methodsFor: 'detectors' stamp: 'MGD 6/1/2021 21:27:22' prior: 50620868!
newProductionMethodDetector
	^ ChangeDetector for: NewModelMethod withLookahead: 1 detectsWhen: [ :aChangeRecord | aChangeRecord changeType = #method 
		and: [ aChangeRecord isMethodDeletion not ] 
		and: [ (self isATestClass: aChangeRecord changeClassName) not ]
		and: [ aChangeRecord prior isNil ]]! !
!ChangeLog methodsFor: 'detectors' stamp: 'MGD 7/17/2019 11:46:15' prior: 50620880!
newTestClassDetector
	^ ChangeDetector for: NewTestClass withLookahead: 1 detectsWhen: [ :aChangeRecord | aChangeRecord changeType = #classDefinition and: [ aChangeRecord isTestClassChange ]]! !
!ChangeLog methodsFor: 'detectors' stamp: 'HAW 10/25/2022 16:28:25' prior: 50620889!
newTestDetector
	^ ChangeDetector for: NewTest withLookahead: 1 detectsWhen: [ :aChangeRecord | aChangeRecord changeType = #method 
		and: [ aChangeRecord isMethodDeletion not ] 
		and: [ aChangeRecord methodSelector isTestSelector ]
		and: [ aChangeRecord prior isNil ]]! !
!ChangeLog methodsFor: 'detectors' stamp: 'HAW 10/25/2022 16:28:34' prior: 50620900!
productionMethodChangedDetector
	^ ChangeDetector for: ModelMethodChanged withLookahead: 1 detectsWhen: [ :aChangeRecord | aChangeRecord changeType = #method 
		and: [ aChangeRecord isMethodDeletion not ] 
		and: [ (aChangeRecord methodSelector isTestSelector) not ]
		and: [ aChangeRecord prior notNil ]
		and: [ (self isATestClass: aChangeRecord changeClassName) not ]]! !
!ChangeLog methodsFor: 'detectors' stamp: 'HAW 10/25/2022 16:28:43' prior: 50620914!
testChangedDetector
	^ ChangeDetector for: TestChanged withLookahead: 1 detectsWhen: [ :aChangeRecord | aChangeRecord changeType = #method 
		and: [ self isATestClass: aChangeRecord changeClassName ]
		and: [ aChangeRecord methodSelector isTestSelector ]
		and: [ aChangeRecord prior isNil not ]]! !
!ChangeLog methodsFor: 'detectors' stamp: 'MGD 6/1/2021 21:28:56' prior: 50620926!
testClassRemovedDetector
	^ ChangeDetector for: TestClassRemoved withLookahead: 1 detectsWhen: [ :aChangeRecord | 
		aChangeRecord isClassDeletion 
		and: [ self isATestClass: aChangeRecord changeClassName ] ]! !
!ChangeLog methodsFor: 'detectors' stamp: 'MGD 6/1/2021 21:22:16' prior: 50620935!
testFailedDetector
	^ ChangeDetector for: TestFailed withLookahead: 1 detectsWhen: [ :aChangeRecord | 
		aChangeRecord changeType = #testRun 
			and: [ aChangeRecord isFailure or: aChangeRecord isError ]
			and: [ self testIsTracked: aChangeRecord methodSelector class: aChangeRecord changeClassName ]]
		! !
!ChangeLog methodsFor: 'detectors' stamp: 'MGD 6/1/2021 21:20:18' prior: 50620947!
testPassedDetector
	^ ChangeDetector for: TestPassed withLookahead: 1 detectsWhen: [ :aChangeRecord | 
		aChangeRecord changeType = #testRun 
			and: [ aChangeRecord isPassed ]
			and: [ self testIsTracked: aChangeRecord methodSelector class: aChangeRecord changeClassName ]]! !
!ChangeLog methodsFor: 'detectors' stamp: 'MGD 6/1/2021 21:29:28' prior: 50620958!
testRemovedDetector
	| isATest |
	isATest := [ :changeRecord | self testIsTracked: changeRecord methodSelector class: changeRecord changeClassName].
	
	^ ChangeDetector for: TestRemoved withLookahead: 1 detectsWhen: [ :aChangeRecord | aChangeRecord isMethodDeletion and: [ isATest value: aChangeRecord ]]! !
!ChangeLog methodsFor: 'detectors' stamp: 'HAW 10/25/2022 16:28:56' prior: 50620970!
testRenamedDetector
	| isANewTestChange isAMethodRemovedChange sameClassAndStamp testExists |

	isANewTestChange := [ :changeRecord | 
		changeRecord changeType = #method 
		and: [ changeRecord isMethodDeletion not ] 
		and: [ changeRecord methodSelector isTestSelector ]
		and: [ changeRecord prior isNil ]].
	isAMethodRemovedChange := [ :changeRecord | changeRecord isMethodDeletion].
	sameClassAndStamp := [ :previous :current | 
		previous changeClassName = current changeClassName
		and: [ previous stamp = current stamp ]].
	testExists := [ :changeRecord | self testIsTracked: changeRecord methodSelector class: changeRecord changeClassName].
			
	^ ChangeDetector for: TestRenamed withLookahead: 2 detectsWhen: [ :changeRecord1 :changeRecord2 |
		changeRecord2 notNil
		and: [ isANewTestChange value: changeRecord1 ]
		and: [ isAMethodRemovedChange value: changeRecord2 ]
		and: [ sameClassAndStamp value: changeRecord1 value: changeRecord2 ]
		and: [ testExists value: changeRecord2 ]]! !
!ChangeLog methodsFor: 'detectors' stamp: 'HAW 10/25/2022 16:29:07' prior: 50621004!
testUtilityChangeDetector
	^ ChangeDetector for: TestUtilityChanged withLookahead: 1 detectsWhen: [ :aChangeRecord | aChangeRecord changeType = #method 
		and: [ self isATestClass: aChangeRecord changeClassName ]
		and: [ (aChangeRecord methodSelector isTestSelector) not ]]! !
!ChangeLog methodsFor: 'detectors' stamp: 'MGD 7/17/2019 11:55:23' prior: 50621015!
unknownChangeDetector
	^ ChangeDetector for: UnknownChange withLookahead: 1 detectsWhen: [ :aChangeRecord | true ]! !
!ChangeLog methodsFor: 'test tracking' stamp: 'MGD 6/1/2021 21:27:12' prior: 50621021!
isATestClass: className

	^ inventory hasATestClassNamed: className! !
!ChangeLog methodsFor: 'test tracking' stamp: 'MGD 6/1/2021 21:32:42' prior: 50621026!
testIsTracked: selector class: className
	^ inventory hasTestWithSelector: selector andClass: className! !
!ChangeLog class methodsFor: 'instance creation' stamp: 'MGD 4/14/2020 15:54:50' prior: 50621032!
from: aChangeCollection using: aTestInventory 
	^ self new changeList: aChangeCollection; inventory: aTestInventory! !
!TDDGuru methodsFor: 'initialization' stamp: 'MGD 4/7/2020 17:05:41' prior: 50621038!
changesFile: aFileName 
	changesFile := aFileName.
	! !
!TDDGuru methodsFor: 'initialization' stamp: 'MGD 4/7/2020 17:11:58' prior: 50621042!
changesFile: aFileName from: startPosition
	changesFileStartPosition := startPosition.
	self changesFile: aFileName.
	! !
!TDDGuru methodsFor: 'initialization' stamp: 'MGD 6/20/2019 20:45:32' prior: 50621049!
initialState: aTDDState
	initialState := aTDDState! !
!TDDGuru methodsFor: 'initialization' stamp: 'MGD 10/14/2019 15:22:47' prior: 50621053!
initialTestClasses: anArray 
	inventory := TestInventory withTestClasses: anArray ! !
!TDDGuru methodsFor: 'initialization' stamp: 'MGD 4/7/2020 17:05:05' prior: 50621059 overrides: 16920235!
initialize
	self initializeInventory.
	self initialState: NotStarted new.
	changesFileStartPosition := 0.
	startingPoint := 1.! !
!TDDGuru methodsFor: 'initialization' stamp: 'MGD 4/7/2020 17:06:02' prior: 50621066!
initializeChangeLog
	| fileStream changeList file changes |
	
	changeLog := OrderedCollection new.
	file := changesFile asFileEntry.
	
	file exists ifTrue: [
		fileStream := file readStream.
		changeList := (ChangeList new scanFile: fileStream from: changesFileStartPosition to: fileStream size) changeList.
		changes := changeList copyFrom: startingPoint to: changeList size.
		changeLog := ChangeLog from: changes using: inventory.
	]
	
	
	! !
!TDDGuru methodsFor: 'initialization' stamp: 'MGD 11/7/2019 20:54:18' prior: 50621083!
initializeInventory

	^ inventory := TestInventory new! !
!TDDGuru methodsFor: 'initialization' stamp: 'MGD 9/26/2019 20:45:11' prior: 50621088!
startingFromChange: changeIndex 
	startingPoint := changeIndex ! !
!TDDGuru methodsFor: 'running' stamp: 'MGD 10/9/2019 16:05:45' prior: 50621093!
analyzeChange: aChange	
	previousChange := currentChange.
	currentChange := aChange.

	currentChange isRecognized ifTrue: [
		analysisResult addChange: currentChange.
		currentChange reportChangeTo: self. ]! !
!TDDGuru methodsFor: 'running' stamp: 'MGD 11/7/2019 20:54:35' prior: 50621102!
rerun
	self initializeInventory.
	self initializeChangeLog.
	^ self run
	! !
!TDDGuru methodsFor: 'running' stamp: 'MGD 11/26/2019 15:08:35' prior: 50621107!
run	
	analysisResult := AnalysisResult new.
	
	self setState: initialState.
	
	self changeLog do: [ :change | self analyzeChange: change ].
	
	self currentState analysisFinished.
	
	^ analysisResult! !
!TDDGuru methodsFor: 'running' stamp: 'MGD 11/7/2019 20:33:56' prior: 50621116!
showAnalysisResult	
	AnalysisResultWindow openFor: analysisResult analyzedBy: self.
! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 12/19/2019 20:09:11' prior: 50621121!
classRenamedFrom: previousName to: currentName 
	inventory classRenamedFrom: previousName to: currentName.
	self currentState classRenamedFrom: previousName to: currentName ! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 10/14/2019 16:24:29' prior: 50621129!
modelClassRemoved: className
	self currentState modelClassRemoved: className! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 3/18/2020 20:14:41' prior: 50621134!
modelMethodChanged: aMethodReference
	self currentState modelMethodChanged: aMethodReference ! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 3/18/2020 20:13:00' prior: 50621139!
modelMethodRemoved: aMethodReference
	self currentState modelMethodRemoved: aMethodReference.
! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:50' prior: 50621145!
newModelClass: className
	self currentState newModelClass: className! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 4/2/2020 19:15:50' prior: 50621150!
newModelMethod: aMethodReference
	self currentState newModelMethod: aMethodReference.
	! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 4/2/2020 19:47:57' prior: 50621155!
newTest: aTestReference
	inventory newTest: aTestReference. 
	self currentState newTest: aTestReference! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 6/20/2019 16:49:46' prior: 50621161!
newTestClass: className
	inventory newTestClass: className.
	self currentState newTestClass: className! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 3/18/2020 20:18:14' prior: 50621167!
testChanged: aTestReference
	self currentState testChanged: aTestReference! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 10/14/2019 19:24:28' prior: 50621172!
testClassRemoved: aSymbol 
	state testClassRemoved: aSymbol.
	inventory testClassRemoved: aSymbol.
	
	self noTestsLeft ifTrue: [ self currentState noMoreTests ]! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 3/18/2020 21:00:25' prior: 50621180!
testFailed: aTestReference
	self currentState testFailed: aTestReference ! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 3/18/2020 21:00:56' prior: 50621185!
testPassed: aTestReference
	self currentState testPassed: aTestReference! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 3/18/2020 20:19:21' prior: 50621190!
testRemoved: aTestReference
	self currentState testRemoved: aTestReference.
	inventory testRemoved: aTestReference.
	
	self noTestsLeft ifTrue: [ self currentState noMoreTests ]! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 3/18/2020 20:54:12' prior: 50621198!
testRenamedFrom: previousTestReference to: newTestReference
	inventory testRenamedFrom: previousTestReference to: newTestReference.
	state testRenamedFrom: previousTestReference to: newTestReference ! !
!TDDGuru methodsFor: 'events' stamp: 'MGD 3/18/2020 20:20:25' prior: 50621207!
testUtilityChanged: aMethodReference
	! !
!TDDGuru methodsFor: 'state transitioning' stamp: 'MGD 3/19/2019 08:58:53' prior: 50621211!
currentState
	^ state! !
!TDDGuru methodsFor: 'state transitioning' stamp: 'MGD 8/6/2019 12:09:45' prior: 50621215!
setState: aTDDState 
	| previousState |
	previousState := state.
	state := aTDDState.
	state context: self.
	
	analysisResult stateTransitionFrom: previousState to: state.! !
!TDDGuru methodsFor: 'error handling' stamp: 'MGD 5/14/2019 10:48:55' prior: 50621223!
reportError: description
	analysisResult addError: description in: currentChange.! !
!TDDGuru methodsFor: 'error handling' stamp: 'MGD 10/10/2019 19:03:59' prior: 50621228!
reportErrorIn: aChange with: errorMessage
	analysisResult addError: errorMessage in: aChange.! !
!TDDGuru methodsFor: 'error handling' stamp: 'MGD 10/9/2019 16:05:08' prior: 50621234!
reportErrorInPreviousChange: description
	analysisResult addError: description in: previousChange.! !
!TDDGuru methodsFor: 'accessing' stamp: 'MGD 6/20/2019 16:51:00' prior: 50621240!
allTests
	^ inventory allTests ! !
!TDDGuru methodsFor: 'accessing' stamp: 'MGD 11/7/2019 19:10:38' prior: 50621244!
analysisResult
	^ analysisResult ! !
!TDDGuru methodsFor: 'accessing' stamp: 'MGD 12/1/2018 16:53:36' prior: 50621248!
changeLog
	changeLog ifNil: [
		self initializeChangeLog
	].

	^ changeLog! !
!TDDGuru methodsFor: 'accessing' stamp: 'MGD 10/10/2019 19:11:19' prior: 50621253!
currentChange
	^currentChange! !
!TDDGuru methodsFor: 'private' stamp: 'MGD 3/17/2020 19:49:42' prior: 50621257!
methodReferenceWith: selector andClass: className
	^ UninstalledMethodReference selector: selector class: className sourceCode: currentChange code overrides: currentChange overridesASuperclassMethod.! !
!TDDGuru methodsFor: 'private' stamp: 'MGD 10/14/2019 19:21:17' prior: 50621266!
noTestsLeft
	^ inventory allTests isEmpty! !
!TDDGuru class methodsFor: 'instance creation' stamp: 'MGD 12/1/2018 10:55:10' prior: 50621270!
on: aFileName 
	^ self new changesFile: aFileName.! !
!TDDGuru class methodsFor: 'instance creation' stamp: 'MGD 4/7/2020 17:03:47' prior: 50621275!
on: aFileName from: startPosition
	^ self new changesFile: aFileName from: startPosition.! !
!TDDGuru class methodsFor: 'instance creation' stamp: 'MGD 6/27/2019 11:07:02' prior: 50621281!
on: aString initialTestClasses: anArray 
	^ self new changesFile: aString; initialTestClasses: anArray.! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 3/3/2020 17:03:50' prior: 50621287!
classRemovedBeforeRunningTests: className 
	^ 'Class ', className, ' was removed before running the tests first'! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/10/2019 17:02:06' prior: 50621294!
methodAddedBeforeTest: aSelector class: className 
	^ 'Method ', (self printMethod: aSelector class: className), ' was added before writing a test'! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/10/2019 17:02:38' prior: 50621302!
methodChangedBeforeTest: aSelector class: className 
	^ 'Method ', (self printMethod: aSelector class: className), ' was changed before writing a test'! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 3/3/2020 17:01:24' prior: 50621310!
methodRemovedBeforeRunningTests: methodSelector class: className 
	^ (self printMethod: methodSelector class: className), ' was removed before running the tests first'! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/14/2019 12:15:44' prior: 50621318!
methodRemovedWhileWritingATest: aSymbol class: aSymbol2 
	^ (self printMethod: aSymbol class: aSymbol2), ' was removed while writing a test'! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 3/3/2020 18:31:09' prior: 50621325!
modelMethodAddedBeforeRunningTests: aSymbol class: aSymbol2 
	^ 'Model method ', (self printMethod: aSymbol class: aSymbol2), ' was added before running the tests first'.! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 3/3/2020 18:31:06' prior: 50621333!
modelMethodChangedBeforeRunningTests: aSelector class: className 
	^ 'Model method ', (self printMethod: aSelector class: className), ' was changed before running the tests first'.! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 11/12/2019 11:09:52' prior: 50621342!
modelMethodWasNotUsedDuringRefactor: aSymbol class: aSymbol2 
	^ (self printMethod: aSymbol class: aSymbol2), ' was added but never used during Refactor. Probably not doing TDD.'! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/10/2019 17:08:39' prior: 50621351!
printMethod: selector class: className
	^ className, '>>', selector ! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/10/2019 17:05:16' prior: 50621356!
testAddedBeforeRunningTheRestOfTheTests: aSymbol class: className
	^ 'Test ', (self printMethod: aSymbol class: className), ' was added without running the rest of the tests first'! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/10/2019 17:04:25' prior: 50621365!
testAddedErrorMessage: aTestSelector class: className
	^ 'Test ', (self printMethod: aTestSelector class: className), ' was added in Red'! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/10/2019 17:00:03' prior: 50621372!
testAddedWhileWritingAnother: aSymbol class: className
	^ (self printMethod: aSymbol class: className), ' was added while writing another test'! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/14/2019 14:56:57' prior: 50621380!
testChangedWhileInRed: aSymbol class: aSymbol2 
	self shouldBeImplemented.! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/10/2019 17:07:22' prior: 50621385!
testChangedWhileThisTestWasBeingWritten: testSelector in: className 
	^ (self printMethod: testSelector class: className), ' was changed while other test was being written'.! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/14/2019 16:12:25' prior: 50621393!
testClassRemovedWhileInRed: aSymbol 
	^ 'Test class ', aSymbol, ' was removed while in Red'.! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/10/2019 17:07:57' prior: 50621399!
testDidNotFail: testSelector class: className 
	^ (self printMethod: testSelector class: className), ' passed but it should have failed'! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/14/2019 15:46:30' prior: 50621406!
testRemovedWhileInRed: aSymbol class: aSymbol2 
	^ (self printMethod: aSymbol class: aSymbol2), ' was removed while in Red'.! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/14/2019 11:18:08' prior: 50621413!
testRenamedBeforeRunningTheTests: aSymbol class: aSymbol2 
	^ (self printMethod: aSymbol class: aSymbol2), ' was renamed before running the tests'.! !
!TDDGuru class methodsFor: 'error messages' stamp: 'MGD 10/10/2019 16:57:55' prior: 50621421!
testUnexpectedlyFailedErrorMessage: aSymbol class: className
	| testAsString |
	testAsString := self printMethod: aSymbol class: className.
	^ 'Test ', testAsString,' had passed and failed unexpectedly'! !
!TDDState methodsFor: 'accessing' stamp: 'MGD 8/1/2019 17:21:26' prior: 50621430!
isCorrect
	self subclassResponsibility ! !
!TDDState methodsFor: 'accessing' stamp: 'MGD 10/12/2019 12:43:32' prior: 50621435 overrides: 16903442!
name
	^ self className ! !
!TDDState methodsFor: 'events' stamp: 'MGD 11/26/2019 15:09:04' prior: 50621438!
analysisFinished
! !
!TDDState methodsFor: 'events' stamp: 'MGD 12/19/2019 20:31:51' prior: 50621441!
classRenamedFrom: aSymbol to: aSymbol2
	! !
!TDDState methodsFor: 'events' stamp: 'MGD 10/14/2019 16:24:29' prior: 50621445!
modelClassRemoved: className
	self subclassResponsibility! !
!TDDState methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:33' prior: 50621449!
modelMethodChanged: methodSelector
	self subclassResponsibility! !
!TDDState methodsFor: 'events' stamp: 'MGD 10/14/2019 14:24:44' prior: 50621454!
modelMethodRemoved: aSymbol
	self subclassResponsibility! !
!TDDState methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:50' prior: 50621458!
newModelClass: className
	self subclassResponsibility! !
!TDDState methodsFor: 'events' stamp: 'MGD 4/2/2020 19:15:50' prior: 50621462!
newModelMethod: methodSelector
	self subclassResponsibility! !
!TDDState methodsFor: 'events' stamp: 'MGD 4/2/2020 19:47:57' prior: 50621466!
newTest: methodSelector
	self subclassResponsibility! !
!TDDState methodsFor: 'events' stamp: 'MGD 3/19/2019 09:44:50' prior: 50621470!
newTestClass: className
	self subclassResponsibility! !
!TDDState methodsFor: 'events' stamp: 'MGD 10/14/2019 19:19:42' prior: 50621474!
noMoreTests
	self transitionTo: Green new! !
!TDDState methodsFor: 'events' stamp: 'MGD 5/24/2019 11:38:23' prior: 50621478!
testChanged: methodSelector
	self subclassResponsibility! !
!TDDState methodsFor: 'events' stamp: 'MGD 4/6/2019 18:20:38' prior: 50621482!
testFailed: methodSelector
	self subclassResponsibility! !
!TDDState methodsFor: 'events' stamp: 'MGD 10/10/2019 16:48:10' prior: 50621486!
testPassed: aTestReference 
	passedTests add: aTestReference.
	
	self allTestsPassed ifTrue: [ self transitionTo: Green new ]! !
!TDDState methodsFor: 'events' stamp: 'MGD 10/14/2019 19:14:25' prior: 50621493!
testRemoved: methodSelector
	self subclassResponsibility ! !
!TDDState methodsFor: 'events' stamp: 'MGD 10/14/2019 11:25:12' prior: 50621497!
testRenamedFrom: fromMethodReference to: toMethodReference 
	self subclassResponsibility! !
!TDDState methodsFor: 'initialization' stamp: 'MGD 3/19/2019 09:45:31' prior: 50621503!
context: aContext
	context := aContext! !
!TDDState methodsFor: 'initialization' stamp: 'MGD 10/15/2019 16:41:50' prior: 50621508 overrides: 16920235!
initialize
	passedTests := Set new.! !
!TDDState methodsFor: 'comparing' stamp: 'MGD 3/21/2019 07:22:29' prior: 50621512 overrides: 16901772!
= anObject
	^ self class = anObject! !
!TDDState methodsFor: 'comparing' stamp: 'MGD 10/12/2019 12:43:12' prior: 50621516 overrides: 16901788!
hash
	^ super hash bitXor: self name hash! !
!TDDState methodsFor: 'state transitioning' stamp: 'MGD 5/30/2019 18:35:22' prior: 50621520!
reportError: aString 
	context reportError: aString! !
!TDDState methodsFor: 'state transitioning' stamp: 'MGD 5/30/2019 18:40:54' prior: 50621525!
reportError: errorDescription andTransitionTo: newState
	self reportError: errorDescription.
	self transitionTo: newState.! !
!TDDState methodsFor: 'state transitioning' stamp: 'MGD 10/10/2019 19:12:21' prior: 50621532!
reportErrorIn: aChange with: errorMessage
	context reportErrorIn: aChange with: errorMessage! !
!TDDState methodsFor: 'state transitioning' stamp: 'MGD 6/13/2019 21:32:59' prior: 50621538!
transitionTo: newState 
	context setState: newState.! !
!TDDState methodsFor: 'printing' stamp: 'MGD 6/21/2019 07:48:31' prior: 50621543 overrides: 16902983!
printString
	self subclassResponsibility ! !
!TDDState methodsFor: 'private' stamp: 'MGD 8/6/2019 11:53:38' prior: 50621547!
allTests
	^ context allTests ! !
!TDDState methodsFor: 'private' stamp: 'MGD 10/10/2019 16:48:52' prior: 50621551!
allTestsPassed
	^ passedTests = self allTests! !
!Green methodsFor: 'events' stamp: 'MGD 12/19/2019 19:50:26' prior: 50621556 overrides: 50645922!
classRenamedFrom: aSymbol to: aSymbol2 
	self transitionTo: Refactor new! !
!Green methodsFor: 'events' stamp: 'MGD 10/14/2019 16:24:29' prior: 50621561 overrides: 50645926!
modelClassRemoved: aSymbol 
	self transitionTo: Refactor new! !
!Green methodsFor: 'events' stamp: 'MGD 11/20/2019 17:47:32' prior: 50621566 overrides: 50645931!
modelMethodChanged: aMethodReference 
	self transitionTo: (Refactor modelMethodChanged: aMethodReference).! !
!Green methodsFor: 'events' stamp: 'MGD 10/14/2019 14:24:44' prior: 50621572 overrides: 50645936!
modelMethodRemoved: aSymbol 
	self transitionTo: Refactor new! !
!Green methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:50' prior: 50621577 overrides: 50645941!
newModelClass: aSymbol 
	self transitionTo: Refactor new! !
!Green methodsFor: 'events' stamp: 'MGD 4/2/2020 19:15:50' prior: 50621582 overrides: 50645946!
newModelMethod: aMethodReference 
	self transitionTo: (Refactor newModelMethod: aMethodReference)! !
!Green methodsFor: 'events' stamp: 'MGD 4/2/2020 19:47:57' prior: 50621588 overrides: 50645951!
newTest: aTestReference 
	self transitionTo: (WritingAFailingTest currentTest: aTestReference).! !
!Green methodsFor: 'events' stamp: 'HAW 10/31/2019 15:37:11' prior: 50621594 overrides: 50645956!
newTestClass: aSymbol 
	self transitionTo: Refactor new! !
!Green methodsFor: 'events' stamp: 'MGD 8/14/2019 17:09:18' prior: 50621599 overrides: 50645965!
testChanged: aSymbol 
	self transitionTo: Refactor new! !
!Green methodsFor: 'events' stamp: 'MGD 10/14/2019 16:24:29' prior: 50621603!
testClassRemoved: aSymbol 
	self modelClassRemoved: aSymbol! !
!Green methodsFor: 'events' stamp: 'MGD 10/10/2019 20:16:08' prior: 50621608 overrides: 50645970!
testFailed: aTestReference 
	self reportError: (TDDGuru testUnexpectedlyFailedErrorMessage: aTestReference selector class: aTestReference methodClass) andTransitionTo: Red new.! !
!Green methodsFor: 'events' stamp: 'MGD 6/14/2019 13:04:09' prior: 50621617 overrides: 50645975!
testPassed: aSymbol 
	! !
!Green methodsFor: 'events' stamp: 'MGD 10/14/2019 14:13:47' prior: 50621621 overrides: 50645982!
testRemoved: aSymbol 
	self transitionTo: Refactor new! !
!Green methodsFor: 'events' stamp: 'MGD 8/15/2019 15:58:34' prior: 50621626 overrides: 50645987!
testRenamedFrom: aSymbol to: aSymbol2 
	self transitionTo: Refactor new! !
!Green methodsFor: 'printing' stamp: 'MGD 6/21/2019 07:49:05' prior: 50621631 overrides: 50646036!
printString
	^ 'Green'! !
!Green methodsFor: 'accessing' stamp: 'MGD 8/1/2019 17:23:55' prior: 50621635 overrides: 50645909!
isCorrect
	^ true! !
!MoreThanOneTestWritten methodsFor: 'initialization' stamp: 'MGD 10/10/2019 19:10:16' prior: 50621639 overrides: 50645993!
context: aContext
	super context: aContext.
	testAddedChange := aContext currentChange.! !
!MoreThanOneTestWritten methodsFor: 'initialization' stamp: 'MGD 10/15/2019 16:05:09' prior: 50621645!
firstTest: aMethodReference secondTest: anotherMethodReference
	firstTest := aMethodReference.
	secondTest := anotherMethodReference.
	isCorrect := true.! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 10/14/2019 16:24:28' prior: 50621653 overrides: 50645926!
modelClassRemoved: aSymbol 
	self reportErrorWhenSecondTestWasAdded.
	self transitionTo: NotDoingTDD new.! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:33' prior: 50621660 overrides: 50645931!
modelMethodChanged: anUninstalledMethodReference 
	self reportErrorWhenSecondTestWasAdded.
	self transitionTo: NotDoingTDD new.! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 10/14/2019 14:24:44' prior: 50621668 overrides: 50645936!
modelMethodRemoved: aMethodReference 
	self reportErrorWhenSecondTestWasAdded.
	self transitionTo: NotDoingTDD new! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:50' prior: 50621675 overrides: 50645941!
newModelClass: aSymbol 
	self reportErrorWhenSecondTestWasAdded.
	self transitionTo: NotDoingTDD new.! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 4/2/2020 19:15:50' prior: 50621682 overrides: 50645946!
newModelMethod: anUninstalledMethodReference 
	self reportErrorWhenSecondTestWasAdded.
	self transitionTo: NotDoingTDD new.! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 4/2/2020 19:47:57' prior: 50621689 overrides: 50645951!
newTest: anUninstalledMethodReference 
	self reportErrorWhenSecondTestWasAdded.
	self transitionTo: NotDoingTDD new.! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 10/9/2019 17:15:04' prior: 50621696 overrides: 50645956!
newTestClass: aSymbol 
	self reportErrorWhenSecondTestWasAdded.
	self transitionTo: NotDoingTDD new.! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 10/9/2019 17:15:27' prior: 50621703 overrides: 50645965!
testChanged: anUninstalledMethodReference 
	(self isOneOfTheCurrentTests: anUninstalledMethodReference) ifFalse: [ 
		self reportErrorWhenSecondTestWasAdded.
		self transitionTo: NotDoingTDD new ]! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 10/14/2019 16:24:29' prior: 50621712!
testClassRemoved: aSymbol 
	self modelClassRemoved: aSymbol! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 10/9/2019 17:12:54' prior: 50621718 overrides: 50645970!
testFailed: anUninstalledMethodReference 
	self reportErrorWhenSecondTestWasAdded.
	self transitionTo: Red new.! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 10/10/2019 19:06:31' prior: 50621725 overrides: 50645975!
testPassed: aTestReference 
	self reportErrorWhenSecondTestWasAdded.
	self testDidNotFailErrorInCurrentTest: aTestReference.
	super testPassed: aTestReference.! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 10/14/2019 14:14:17' prior: 50621734 overrides: 50645982!
testRemoved: aMethodReference 
	| remainingTest |
	
	(self isOneOfTheCurrentTests: aMethodReference)
		ifTrue: [ 
			remainingTest := self remainingTest: aMethodReference.
			self transitionTo: (WritingAFailingTest currentTest: remainingTest) ]
		ifFalse: [ 
			self reportErrorWhenSecondTestWasAdded.
			self transitionTo: NotDoingTDD new ]! !
!MoreThanOneTestWritten methodsFor: 'events' stamp: 'MGD 10/10/2019 18:49:53' prior: 50621748 overrides: 50645987!
testRenamedFrom: previousTestReference to: currentTestReference 
	(self isOneOfTheCurrentTests: previousTestReference)
		ifTrue: [ self renameTestFrom: previousTestReference to: currentTestReference ]
		ifFalse: [ 
			self reportErrorWhenSecondTestWasAdded.
			self transitionTo: NotDoingTDD new ]! !
!MoreThanOneTestWritten methodsFor: 'private' stamp: 'MGD 10/9/2019 16:09:00' prior: 50621760!
isOneOfTheCurrentTests: aMethodReference 
	^ firstTest = aMethodReference or: [ secondTest  = aMethodReference ]! !
!MoreThanOneTestWritten methodsFor: 'private' stamp: 'MGD 10/9/2019 15:57:20' prior: 50621767!
remainingTest: anUninstalledMethodReference 
	firstTest = anUninstalledMethodReference ifTrue: [ ^ secondTest ].
	secondTest = anUninstalledMethodReference ifTrue: [ ^ firstTest ].
	
	self error: 'Test is not one of the state tests'
	! !
!MoreThanOneTestWritten methodsFor: 'private' stamp: 'MGD 10/10/2019 18:50:37' prior: 50621777!
renameTestFrom: previousTestReference to: currentTestReference
	firstTest = previousTestReference ifTrue: [ firstTest = currentTestReference ].
	secondTest = previousTestReference ifTrue: [ secondTest = currentTestReference ].! !
!MoreThanOneTestWritten methodsFor: 'private' stamp: 'MGD 10/15/2019 16:07:05' prior: 50621787!
reportErrorWhenSecondTestWasAdded 
	| errorMessage |
	
	isCorrect := false.
	errorMessage := TDDGuru testAddedWhileWritingAnother: secondTest selector class: secondTest methodClass.
	self reportErrorIn: testAddedChange with: errorMessage.
! !
!MoreThanOneTestWritten methodsFor: 'private' stamp: 'MGD 10/10/2019 20:16:08' prior: 50621798!
testDidNotFailErrorInCurrentTest: aTestReference
	(self isOneOfTheCurrentTests: aTestReference) ifTrue: [ 
		self reportError: (TDDGuru testDidNotFail: aTestReference selector class: aTestReference methodClass)
	].! !
!MoreThanOneTestWritten methodsFor: 'printing' stamp: 'MGD 11/5/2019 14:18:23' prior: 50621808 overrides: 50646036!
printString
	^ 'Writing a failing test - More than one test written'! !
!MoreThanOneTestWritten methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:05:23' prior: 50621814 overrides: 50645909!
isCorrect
	^ isCorrect ! !
!MoreThanOneTestWritten class methodsFor: 'instance creation' stamp: 'MGD 10/9/2019 15:53:36' prior: 50621818!
with: anUninstalledMethodReference and: anUninstalledMethodReference2 
	^ self new firstTest: anUninstalledMethodReference secondTest: anUninstalledMethodReference2! !
!NotDoingTDD methodsFor: 'printing' stamp: 'MGD 6/21/2019 07:49:29' prior: 50621827 overrides: 50646036!
printString
	^ 'Not doing TDD'! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 10/14/2019 16:24:28' prior: 50621831 overrides: 50645926!
modelClassRemoved: className
	! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:33' prior: 50621835 overrides: 50645931!
modelMethodChanged: aSelector
	! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 10/14/2019 14:24:44' prior: 50621839 overrides: 50645936!
modelMethodRemoved: aSymbol
! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:50' prior: 50621843 overrides: 50645941!
newModelClass: className
	! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 4/2/2020 19:15:50' prior: 50621847 overrides: 50645946!
newModelMethod: aSymbol 
	! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 4/2/2020 19:47:57' prior: 50621851 overrides: 50645951!
newTest: methodSelector
	! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 8/1/2019 09:30:40' prior: 50621855 overrides: 50645956!
newTestClass: className
	! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 7/22/2019 15:03:54' prior: 50621859 overrides: 50645965!
testChanged: aSymbol 
	! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 10/14/2019 19:35:33' prior: 50621862!
testClassRemoved: aSymbol 
	! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 8/1/2019 11:01:15' prior: 50621866 overrides: 50645970!
testFailed: aTestSelector
	! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 10/14/2019 14:16:15' prior: 50621870 overrides: 50645982!
testRemoved: aMethodReference
! !
!NotDoingTDD methodsFor: 'events' stamp: 'MGD 8/6/2019 11:54:54' prior: 50621874 overrides: 50645987!
testRenamedFrom: aTestSelector to: aTestSelector2
! !
!NotDoingTDD methodsFor: 'accessing' stamp: 'MGD 8/1/2019 17:25:54' prior: 50621879 overrides: 50645909!
isCorrect
	^ false! !
!NotStarted methodsFor: 'events' stamp: 'MGD 3/3/2020 17:03:22' prior: 50621883 overrides: 50645926!
modelClassRemoved: className
	self reportError: (TDDGuru classRemovedBeforeRunningTests: className) andTransitionTo: NotDoingTDD new.! !
!NotStarted methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:33' prior: 50621890 overrides: 50645931!
modelMethodChanged: methodReference
	self reportError: (TDDGuru methodChangedBeforeTest: methodReference selector class: methodReference methodClass) andTransitionTo: NotDoingTDD new.! !
!NotStarted methodsFor: 'events' stamp: 'MGD 3/3/2020 17:01:24' prior: 50621899 overrides: 50645936!
modelMethodRemoved: methodReference 
	self reportError: (TDDGuru methodRemovedBeforeRunningTests: methodReference selector class: methodReference methodClass) andTransitionTo: NotDoingTDD new.! !
!NotStarted methodsFor: 'events' stamp: 'MGD 3/3/2020 16:00:51' prior: 50621908 overrides: 50645941!
newModelClass: className
	self transitionTo: WritingAFailingTest new.! !
!NotStarted methodsFor: 'events' stamp: 'MGD 4/2/2020 19:15:50' prior: 50621913 overrides: 50645946!
newModelMethod: methodReference 
	self reportError: (TDDGuru methodAddedBeforeTest: methodReference selector class: methodReference methodClass) andTransitionTo: NotDoingTDD new.! !
!NotStarted methodsFor: 'events' stamp: 'MGD 4/2/2020 19:47:57' prior: 50621922 overrides: 50645951!
newTest: testReference
	self transitionTo: (WritingAFailingTest currentTest: testReference).! !
!NotStarted methodsFor: 'events' stamp: 'MGD 3/21/2019 07:27:47' prior: 50621928 overrides: 50645956!
newTestClass: className
	context setState: WritingAFailingTest new.! !
!NotStarted methodsFor: 'events' stamp: 'MGD 3/2/2020 16:59:52' prior: 50621933 overrides: 50645965!
testChanged: aTestReference
	self transitionTo: (WritingAFailingTest currentTest: aTestReference).! !
!NotStarted methodsFor: 'events' stamp: 'MGD 10/14/2019 16:24:29' prior: 50621939!
testClassRemoved: className
	self modelClassRemoved: className ! !
!NotStarted methodsFor: 'events' stamp: 'MGD 3/2/2020 17:11:14' prior: 50621944 overrides: 50645970!
testFailed: aSymbol 
	self transitionTo: Red new.! !
!NotStarted methodsFor: 'events' stamp: 'MGD 3/3/2020 17:01:24' prior: 50621949 overrides: 50645982!
testRemoved: methodReference 
	self reportError: (TDDGuru methodRemovedBeforeRunningTests: methodReference selector class: methodReference methodClass) andTransitionTo: NotDoingTDD new.! !
!NotStarted methodsFor: 'events' stamp: 'MGD 10/14/2019 11:19:39' prior: 50621958 overrides: 50645987!
testRenamedFrom: fromMethodReference to: toMethodReference 
	| errorMessage |
	
	errorMessage := TDDGuru testRenamedBeforeRunningTheTests: fromMethodReference selector class: toMethodReference methodClass.
	self reportError: errorMessage andTransitionTo: NotDoingTDD new.! !
!NotStarted methodsFor: 'printing' stamp: 'MGD 6/21/2019 07:50:00' prior: 50621970 overrides: 50646036!
printString
	^ 'Started'! !
!NotStarted methodsFor: 'accessing' stamp: 'MGD 8/1/2019 17:24:38' prior: 50621974 overrides: 50645909!
isCorrect
	^ true! !
!Red methodsFor: 'events' stamp: 'MGD 10/14/2019 16:24:29' prior: 50621978 overrides: 50645926!
modelClassRemoved: aSymbol 
	! !
!Red methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:33' prior: 50621982 overrides: 50645931!
modelMethodChanged: aSymbol 
	! !
!Red methodsFor: 'events' stamp: 'MGD 10/14/2019 14:24:44' prior: 50621986 overrides: 50645936!
modelMethodRemoved: anUninstalledMethodReference 
	! !
!Red methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:50' prior: 50621991 overrides: 50645941!
newModelClass: aSymbol 
	! !
!Red methodsFor: 'events' stamp: 'MGD 4/2/2020 19:15:50' prior: 50621995 overrides: 50645946!
newModelMethod: aSymbol 
	! !
!Red methodsFor: 'events' stamp: 'MGD 4/16/2020 18:51:37' prior: 50621999 overrides: 50645951!
newTest: aTestReference
	| errorMessage |
	
	errorMessage := TDDGuru testAddedErrorMessage: aTestReference selector class: aTestReference methodClass.
	self reportError: errorMessage andTransitionTo: NotDoingTDD new.! !
!Red methodsFor: 'events' stamp: 'MGD 11/2/2019 16:44:33' prior: 50622009 overrides: 50645956!
newTestClass: aSymbol 
	! !
!Red methodsFor: 'events' stamp: 'MGD 10/14/2019 14:59:17' prior: 50622013 overrides: 50645965!
testChanged: aTestReference 
	! !
!Red methodsFor: 'events' stamp: 'MGD 3/8/2020 14:49:54' prior: 50622016!
testClassRemoved: aSymbol 
	| errorMessage |
	errorMessage := TDDGuru testClassRemovedWhileInRed: aSymbol.
	self reportError: errorMessage andTransitionTo: NotDoingTDD new.
	! !
!Red methodsFor: 'events' stamp: 'MGD 6/14/2019 09:19:31' prior: 50622025 overrides: 50645970!
testFailed: aSymbol 
	passedTests remove: aSymbol ifAbsent: [].! !
!Red methodsFor: 'events' stamp: 'MGD 3/8/2020 14:48:08' prior: 50622030 overrides: 50645982!
testRemoved: anUninstalledMethodReference 
	self reportError: (TDDGuru testRemovedWhileInRed: anUninstalledMethodReference selector class: anUninstalledMethodReference methodClass) andTransitionTo: NotDoingTDD new.! !
!Red methodsFor: 'events' stamp: 'MGD 9/5/2019 08:31:07' prior: 50622040 overrides: 50645987!
testRenamedFrom: previousTestReference to: currentTestReference
! !
!Red methodsFor: 'printing' stamp: 'MGD 6/21/2019 07:50:18' prior: 50622045 overrides: 50646036!
printString
	^ 'Red'! !
!Red methodsFor: 'accessing' stamp: 'MGD 8/1/2019 17:25:18' prior: 50622049 overrides: 50645909!
isCorrect
	^ true! !
!Refactor methodsFor: 'events' stamp: 'MGD 11/26/2019 15:09:33' prior: 50622053 overrides: 50645918!
analysisFinished
	self checkIfItWasAValidRefactor ! !
!Refactor methodsFor: 'events' stamp: 'MGD 10/14/2019 16:24:29' prior: 50622058 overrides: 50645926!
modelClassRemoved: aSymbol 
	! !
!Refactor methodsFor: 'events' stamp: 'MGD 6/9/2021 19:49:44' prior: 50622062 overrides: 50645931!
modelMethodChanged: aMethodReference 
	self markAsChanged: aMethodReference ! !
!Refactor methodsFor: 'events' stamp: 'MGD 6/9/2021 19:51:23' prior: 50622068 overrides: 50645936!
modelMethodRemoved: aMethodReference 
	self unmarkAsNew: aMethodReference.! !
!Refactor methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:50' prior: 50622074 overrides: 50645941!
newModelClass: aSymbol 
	! !
!Refactor methodsFor: 'events' stamp: 'MGD 6/9/2021 19:50:10' prior: 50622078 overrides: 50645946!
newModelMethod: aMethodReference 
	self markAsNew: aMethodReference ! !
!Refactor methodsFor: 'events' stamp: 'MGD 4/7/2020 17:17:59' prior: 50622083 overrides: 50645951!
newTest: aTestReference 
	| errorMessage |
	
	errorMessage := TDDGuru testAddedBeforeRunningTheRestOfTheTests: aTestReference selector class: aTestReference methodClass.
	self reportError: errorMessage andTransitionTo: (WritingAFailingTest currentTest: aTestReference).! !
!Refactor methodsFor: 'events' stamp: 'MGD 8/15/2019 17:20:50' prior: 50622095 overrides: 50645956!
newTestClass: aSymbol 
	! !
!Refactor methodsFor: 'events' stamp: 'MGD 6/9/2021 19:49:44' prior: 50622099 overrides: 50645965!
testChanged: aTestReference
	self markAsChanged: aTestReference! !
!Refactor methodsFor: 'events' stamp: 'MGD 10/14/2019 16:22:46' prior: 50622104!
testClassRemoved: aSymbol 
	! !
!Refactor methodsFor: 'events' stamp: 'MGD 8/15/2019 18:39:20' prior: 50622108 overrides: 50645970!
testFailed: aSymbol 
	passedTests remove: aSymbol ifAbsent: [].! !
!Refactor methodsFor: 'events' stamp: 'MGD 10/14/2019 19:14:40' prior: 50622113 overrides: 50645982!
testRemoved: methodSelector! !
!Refactor methodsFor: 'events' stamp: 'MGD 8/15/2019 17:08:12' prior: 50622117 overrides: 50645987!
testRenamedFrom: aSymbol to: aSymbol2 
	! !
!Refactor methodsFor: 'printing' stamp: 'MGD 8/16/2019 08:26:32' prior: 50622122 overrides: 50645909!
isCorrect
	^ true! !
!Refactor methodsFor: 'printing' stamp: 'MGD 8/16/2019 08:25:44' prior: 50622126 overrides: 50646036!
printString
	^ 'Refactor'! !
!Refactor methodsFor: 'initialization' stamp: 'MGD 6/9/2021 19:37:59' prior: 50622130 overrides: 50645998!
initialize
	newMethods := Set new.
	changedMethods := Set new.
	
	super initialize ! !
!Refactor methodsFor: 'state transitioning' stamp: 'MGD 3/15/2020 14:37:27' prior: 50622136 overrides: 50646031!
transitionTo: aTDDState
	self checkIfItWasAValidRefactor.
	super transitionTo: aTDDState.	! !
!Refactor methodsFor: 'valid refactor' stamp: 'MGD 6/9/2021 19:37:59' prior: 50622142!
checkIfItWasAValidRefactor
	newMethods do: [ :aMethodReference | 
		(self isUsed: aMethodReference) ifFalse: [ self methodWasNotUsedError: aMethodReference ] ]! !
!Refactor methodsFor: 'valid refactor' stamp: 'MGD 3/17/2020 19:44:34' prior: 50622150!
isUsed: aMethodReference

	^ (self overridesASuperclassMethod: aMethodReference) or: [self isUsedInOneOfTheChangedMethods: aMethodReference ]! !
!Refactor methodsFor: 'valid refactor' stamp: 'MGD 6/9/2021 19:37:50' prior: 50622157!
isUsedInOneOfTheChangedMethods: aMethodReference
	^ changedMethods anySatisfy: [ :aChangedMethod | aChangedMethod sendsMessageWithSelector: aMethodReference selector ].! !
!Refactor methodsFor: 'valid refactor' stamp: 'MGD 6/9/2021 19:49:44' prior: 50622165!
markAsChanged: aMethodReference

	changedMethods remove: aMethodReference ifAbsent: [].
	changedMethods add: aMethodReference! !
!Refactor methodsFor: 'valid refactor' stamp: 'MGD 6/9/2021 19:50:10' prior: 50622172!
markAsNew: aMethodReference

	newMethods remove: aMethodReference ifAbsent: [].
	newMethods add: aMethodReference! !
!Refactor methodsFor: 'valid refactor' stamp: 'MGD 11/20/2019 19:14:22' prior: 50622178!
methodWasNotUsedError: aMethodReference
	| changeWhenMethodWasAdded errorMessage |
	changeWhenMethodWasAdded := context analysisResult changeWhenMethodWasAdded: aMethodReference selector in: aMethodReference methodClass.
	errorMessage := TDDGuru modelMethodWasNotUsedDuringRefactor: aMethodReference selector class: aMethodReference methodClass.
	
	self reportErrorIn: changeWhenMethodWasAdded with: errorMessage ! !
!Refactor methodsFor: 'valid refactor' stamp: 'MGD 3/17/2020 19:45:12' prior: 50622194!
overridesASuperclassMethod: aMethodReference

	^ aMethodReference overridesASuperclassMethod! !
!Refactor methodsFor: 'valid refactor' stamp: 'MGD 6/9/2021 19:53:00' prior: 50622200!
unmarkAsNew: aMethodReference

	newMethods remove: aMethodReference ifAbsent: []! !
!Refactor class methodsFor: 'instance creation' stamp: 'MGD 11/20/2019 17:48:01' prior: 50622206!
modelMethodChanged: aMethodReference
	^ self new modelMethodChanged: aMethodReference ! !
!Refactor class methodsFor: 'instance creation' stamp: 'MGD 4/2/2020 19:15:50' prior: 50622212!
newModelMethod: aMethodReference
	^ self new newModelMethod: aMethodReference ! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 3/7/2020 17:24:44' prior: 50622218 overrides: 50645926!
modelClassRemoved: aSymbol 
	self reportError: (TDDGuru classRemovedBeforeRunningTests: aSymbol) andTransitionTo: NotDoingTDD new.! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 3/7/2020 17:02:23' prior: 50622226 overrides: 50645931!
modelMethodChanged: methodReference 
	| errorMessage |
	errorMessage := TDDGuru methodChangedBeforeTest: methodReference selector class: methodReference methodClass.
	
	self currentTestIsDefined ifTrue: [ 
		errorMessage := TDDGuru modelMethodChangedBeforeRunningTests: methodReference selector class: methodReference methodClass ].
	
	self reportError: errorMessage andTransitionTo: NotDoingTDD new ! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 10/14/2019 14:24:44' prior: 50622242 overrides: 50645936!
modelMethodRemoved: aMethodReference 
	| errorMessage |
	
	errorMessage := TDDGuru methodRemovedWhileWritingATest: aMethodReference selector class: aMethodReference methodClass.
	self reportError: errorMessage andTransitionTo: NotDoingTDD new
	! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 10/14/2019 14:25:50' prior: 50622253 overrides: 50645941!
newModelClass: className
! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 4/2/2020 19:15:50' prior: 50622257 overrides: 50645946!
newModelMethod: methodReference 
	| errorMessage |
	
	errorMessage := TDDGuru methodAddedBeforeTest: methodReference selector class: methodReference methodClass.
	
	self currentTestIsDefined ifTrue: [ 
		errorMessage := TDDGuru modelMethodAddedBeforeRunningTests: methodReference selector class: methodReference methodClass ].
	
	self reportError: errorMessage andTransitionTo: NotDoingTDD new.
! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 4/2/2020 19:47:57' prior: 50622273 overrides: 50645951!
newTest: aTestReference 
	self currentTestIsDefined ifTrue: [ self transitionTo: (MoreThanOneTestWritten with: test and: aTestReference) ].
	
	self currentTest: aTestReference 
! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 5/2/2019 20:23:47' prior: 50622282 overrides: 50645956!
newTestClass: aSymbol 
	! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 10/10/2019 20:16:08' prior: 50622286 overrides: 50645965!
testChanged: aTestReference
	 
	| errorMessage |
	aTestReference ~= self currentTest ifTrue: [ 
		errorMessage := TDDGuru testChangedWhileThisTestWasBeingWritten: aTestReference selector in: aTestReference methodClass.
		self reportError: errorMessage andTransitionTo: NotDoingTDD new ]! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 3/7/2020 17:31:52' prior: 50622298!
testClassRemoved: aSymbol 
	self modelClassRemoved: aSymbol! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 8/6/2019 12:12:21' prior: 50622303 overrides: 50645970!
testFailed: aSymbol 
	self transitionTo: Red new.! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 10/10/2019 20:16:08' prior: 50622308 overrides: 50645975!
testPassed: aTestReference 
	| errorMessage |
	
	aTestReference = test ifTrue: [
		errorMessage := TDDGuru testDidNotFail: aTestReference selector class: aTestReference methodClass.
		self reportError: errorMessage andTransitionTo: Green new ]! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 10/14/2019 14:18:21' prior: 50622319 overrides: 50645982!
testRemoved: aMethodReference 
	| errorMessage |
	
	test = aMethodReference ifTrue: [ ^ self transitionTo: Green new ].
	
	errorMessage := TDDGuru methodRemovedWhileWritingATest: aMethodReference selector class: aMethodReference methodClass.
	self reportError: errorMessage.

	! !
!WritingAFailingTest methodsFor: 'events' stamp: 'MGD 10/2/2019 21:36:54' prior: 50622331 overrides: 50645987!
testRenamedFrom: previousTestReference to: currentTestReference 
	test = previousTestReference ifTrue: [ self currentTest: currentTestReference ]! !
!WritingAFailingTest methodsFor: 'printing' stamp: 'MGD 11/5/2019 14:17:42' prior: 50622339 overrides: 50646036!
printString
	^ 'Writing a failing test'! !
!WritingAFailingTest methodsFor: 'accessing' stamp: 'MGD 9/3/2019 10:34:31' prior: 50622343!
currentTest
	^ test! !
!WritingAFailingTest methodsFor: 'accessing' stamp: 'MGD 8/1/2019 17:25:40' prior: 50622347 overrides: 50645909!
isCorrect
	^ true! !
!WritingAFailingTest methodsFor: 'initialization' stamp: 'MGD 9/3/2019 10:33:36' prior: 50622351!
currentTest: aSelector
	test := aSelector ! !
!WritingAFailingTest methodsFor: 'private' stamp: 'MGD 3/3/2020 18:56:15' prior: 50622355!
currentTestIsDefined
	^ test isNil not! !
!WritingAFailingTest class methodsFor: 'instance creation' stamp: 'MGD 9/3/2019 10:36:10' prior: 50622360!
currentTest: aTestReference
	^ self new currentTest: aTestReference ! !
!TestInventory methodsFor: 'entries' stamp: 'MGD 12/19/2019 20:20:35' prior: 50622365!
classRenamedFrom: previousClassName to: currentClassName 
	(testClasses includes: previousClassName) ifTrue: [
		testClasses remove: previousClassName.
		testClasses add: currentClassName.
		self replaceTestOf: previousClassName with: currentClassName ]
	! !
!TestInventory methodsFor: 'entries' stamp: 'MGD 9/3/2019 10:56:39' prior: 50622376!
newTest: aTestReference	
	tests add: aTestReference.
! !
!TestInventory methodsFor: 'entries' stamp: 'MGD 10/15/2019 17:47:23' prior: 50622380!
newTestClass: aSymbol 
	testClasses add: aSymbol! !
!TestInventory methodsFor: 'entries' stamp: 'MGD 10/14/2019 16:28:01' prior: 50622384!
testClassRemoved: className 
	(testClasses includes: className) ifTrue: [ 
		self removeTestsOf: className.
		testClasses remove: className.
	].! !
!TestInventory methodsFor: 'entries' stamp: 'MGD 10/14/2019 14:12:54' prior: 50622391!
testRemoved: aMethodReference 
	tests remove: aMethodReference ifAbsent: [].! !
!TestInventory methodsFor: 'entries' stamp: 'MGD 9/5/2019 08:12:52' prior: 50622396!
testRenamedFrom: previousTestReference to: currentTestReference.
	tests remove: previousTestReference.
	tests add: currentTestReference ! !
!TestInventory methodsFor: 'initialization' stamp: 'MGD 6/14/2019 07:24:36' prior: 50622404 overrides: 16920235!
initialize
	testClasses := Set new.
	tests := Set new.! !
!TestInventory methodsFor: 'initialization' stamp: 'MGD 9/5/2019 09:02:02' prior: 50622409!
initializeTestsOf: aCollectionOfTestClasses
	aCollectionOfTestClasses do: [ :testClass | self addTestsOf: testClass ].! !
!TestInventory methodsFor: 'initialization' stamp: 'MGD 7/20/2019 17:24:18' prior: 50622416!
testClasses: aCollectionOfTestClasses
	| classNames |
	classNames := aCollectionOfTestClasses collect: [ :aClass | aClass name ].
	testClasses := Set withAll: classNames.
		
	self initializeTestsOf: aCollectionOfTestClasses.! !
!TestInventory methodsFor: 'querying' stamp: 'MGD 6/14/2019 07:24:56' prior: 50622426!
allTests
	^ tests! !
!TestInventory methodsFor: 'querying' stamp: 'MGD 7/20/2019 16:54:46' prior: 50622429!
hasATestClassNamed: aSymbol
	^ testClasses includes: aSymbol! !
!TestInventory methodsFor: 'querying' stamp: 'MGD 11/15/2019 09:17:15' prior: 50622434!
hasTestWithSelector: aSymbol andClass: className
	^ tests includes: (UninstalledMethodReference selector: aSymbol class: className)! !
!TestInventory methodsFor: 'private' stamp: 'MGD 10/3/2019 18:21:46' prior: 50622441!
addTestsOf: aClass 
	| testReference |
	
	aClass allTestSelectors do: [ :selector |
		testReference := UninstalledMethodReference selector: selector class: aClass name.
		self newTest: testReference
	]! !
!TestInventory methodsFor: 'private' stamp: 'MGD 10/10/2019 20:16:08' prior: 50622450!
removeTestsOf: className 
	tests select: [ :testReference | testReference methodClass = className ] thenDo: [ :testReference | tests remove: testReference ].
	! !
!TestInventory methodsFor: 'private' stamp: 'MGD 12/19/2019 20:29:46' prior: 50622458!
replaceTestOf: previousClassName with: currentClassName
	tests 
		select: [ :testReference | testReference methodClass = previousClassName ] 
		thenDo: [ :testReference | 
			tests remove: testReference.
			tests add: (testReference copyWith: currentClassName) ].! !
!TestInventory class methodsFor: 'as yet unclassified' stamp: 'MGD 6/27/2019 11:23:34' prior: 50622470!
withTestClasses: aCollection
	^ self new testClasses: aCollection.! !
!TimeLine methodsFor: 'accessing' stamp: 'MGD 11/27/2019 20:14:09' prior: 50622475!
changeEvents
	^ self eventsWithType: #change.

	! !
!TimeLine methodsFor: 'accessing' stamp: 'MGD 11/25/2019 20:45:37' prior: 50622479!
changes
	changes ifNil: [ changes := self changeEvents collect: [ :changeEvent | changeEvent change ] ].
	
	^ changes ! !
!TimeLine methodsFor: 'accessing' stamp: 'MGD 8/19/2019 11:46:25' prior: 50622485!
events
	^ events 
	! !
!TimeLine methodsFor: 'accessing' stamp: 'MGD 8/30/2019 08:56:40' prior: 50622488!
states
	^ self changeEvents collect: [ :changeEvent | self stateAfter: changeEvent change ]
	! !
!TimeLine methodsFor: 'initialization' stamp: 'MGD 1/3/2020 08:42:56' prior: 50622494!
analysisResult: anAnalysisResult
	analysisResult := anAnalysisResult.
! !
!TimeLine methodsFor: 'initialization' stamp: 'MGD 11/25/2019 20:46:44' prior: 50622500 overrides: 16920235!
initialize
	events := OrderedCollection new.
	statesAfterChanges := Dictionary new.! !
!TimeLine methodsFor: 'querying' stamp: 'MGD 11/12/2019 16:58:11' prior: 50622505!
changeWhenMethodWasAdded: aSelector in: className 
	^ self changes detect: [ :aChange | 
		aChange category = #newModelMethod 	 
			and: [ aChange methodSelector = aSelector ]
			and: [ aChange changeClassName = className ] ]! !
!TimeLine methodsFor: 'querying' stamp: 'MGD 11/27/2019 20:13:19' prior: 50622515!
eventBefore: anEvent

	^ (self eventsWithType: anEvent type) before: anEvent ifNone: [ ^ nil ].! !
!TimeLine methodsFor: 'querying' stamp: 'MGD 11/27/2019 20:14:33' prior: 50622521!
eventsWithType: aSymbol

	^ self events select: [ :anEvent | anEvent type = aSymbol ]! !
!TimeLine methodsFor: 'querying' stamp: 'MGD 6/20/2019 20:27:31' prior: 50622526!
lastStateTransitionBefore: aChange 
	| indexOfEvent stateTransitionsBefore eventsUpToChangeEvent |
	
	indexOfEvent := events findLast: [ :event | event type = #change and: [ event change = aChange ]].
	eventsUpToChangeEvent := events copyFrom: 1 to: (indexOfEvent - 1).
	stateTransitionsBefore := eventsUpToChangeEvent select: [ :event | event type = #stateTransition ].
	
	^ stateTransitionsBefore last
	
	! !
!TimeLine methodsFor: 'querying' stamp: 'MGD 11/25/2019 20:40:51' prior: 50622541!
stateAfter: aChange 
	| eventForChange eventAfter stateAfter |
	
	statesAfterChanges at: aChange ifPresent: [ :aState | ^ aState ].
	
	eventForChange := events detect: [ :event | event type = #change and: [ event change = aChange ]].
	eventAfter := events after: eventForChange ifNone: [ ^ (self lastStateTransitionBefore: aChange) stateTo ]. 
	
	(eventAfter type = #stateTransition) 
		ifTrue: [ stateAfter := eventAfter stateTo ] 
		ifFalse: [ stateAfter := (self lastStateTransitionBefore: aChange) stateTo ].
		
	statesAfterChanges at: aChange put: stateAfter.
	^ stateAfter 
	! !
!TimeLine methodsFor: 'register events' stamp: 'MGD 11/27/2019 20:10:23' prior: 50622562!
addChange: aChange
	self addEvent: (ChangeEvent for: aChange in: self)! !
!TimeLine methodsFor: 'register events' stamp: 'MGD 11/25/2019 20:50:48' prior: 50622567!
addEvent: anEvent
	events add: anEvent.
	changes := nil.
	statesAfterChanges := Dictionary new.! !
!TimeLine methodsFor: 'register events' stamp: 'MGD 11/27/2019 20:10:30' prior: 50622573!
stateTransitionFrom: previousTDDState to: currentTDDState
	self addEvent: (StateTransitionEvent from: previousTDDState to: currentTDDState in: self)! !
!TimeLine methodsFor: 'selection' stamp: 'MGD 9/29/2019 19:20:21' prior: 50622580!
changeAt: index
	^ self changeEvents at: index! !
!TimeLine methodsFor: 'selection' stamp: 'MGD 1/22/2020 18:46:39' prior: 50622584!
selectedChangeDetail

	| detail currentChange correctLabel errorLabel |
	
	detail := ''.
	correctLabel := 'CORRECT' asText addAttribute: (TextColor color: AnalysisResultWindow successColor).
	errorLabel := 'ERROR' asText addAttribute: (TextColor color: AnalysisResultWindow errorColor) .
	
	self selectedEvent ifNotNil: [
		currentChange := selectedEvent change.
		(analysisResult isCorrect: currentChange)
			ifTrue: [ detail := correctLabel, String newLineString. ]
			ifFalse: [ detail := errorLabel, String newLineString. ].
		
		(analysisResult hasError: currentChange) ifTrue: [ 
			detail := detail, (analysisResult errorIn: currentChange) ].
	].

	^ detail asText! !
!TimeLine methodsFor: 'selection' stamp: 'HAW 7/11/2022 20:07:02' prior: 50622608!
selectedCode
	| sourceCode |
	sourceCode := ''.
	
	(selectedEvent notNil and: [ selectedEvent type = #change ]) ifTrue: [ sourceCode := selectedEvent change code ].
	
	^ Text 
		initialFont: (Preferences at: #standardCodeFont)
		stringOrText: sourceCode ! !
!TimeLine methodsFor: 'selection' stamp: 'MGD 6/21/2019 07:35:29' prior: 50622619!
selectedEvent
	^ selectedEvent ! !
!TimeLine methodsFor: 'selection' stamp: 'MGD 9/29/2019 19:16:19' prior: 50622623!
selectionIndex
 	^ self changeEvents indexOf: selectedEvent.! !
!TimeLine methodsFor: 'selection' stamp: 'MGD 1/21/2020 19:31:55' prior: 50622628!
selectionIndex: anInteger
	selectedEvent := anInteger = 0 ifFalse: [ self changeEvents at: anInteger ].
	
	self changed: #codeSection.
	self triggerEvent: #detailChanged! !
!TimeLine methodsFor: 'styling' stamp: 'MGD 1/21/2020 19:47:35' prior: 50622636!
shouldStyle: aText with: aSHTextStylerST80 
	| changeClass |
		
	(self selectedEvent notNil and: [ self selectedEvent type = #change ]) 
		ifTrue: [ 
			changeClass := self selectedEvent change changeClass.
			changeClass ifNotNil: [ 
				aSHTextStylerST80 classOrMetaClass: changeClass. 
				^ true ] ].

	^ false! !
!TimeLine methodsFor: 'styling' stamp: 'MGD 1/21/2020 19:47:21' prior: 50622649 overrides: 16903807!
textStylerClassFor: textGetter
	textGetter = #selectedCode ifTrue: [ ^SHTextStylerST80 ].
	^ super textStylerClassFor: textGetter ! !
!TimeLine class methodsFor: 'as yet unclassified' stamp: 'MGD 1/3/2020 08:42:25' prior: 50622656!
for: anAnalysisResult
	^ self new analysisResult: anAnalysisResult ! !
!TimeLineEvent methodsFor: 'accessing' stamp: 'MGD 11/27/2019 20:08:45' prior: 50622661!
timeline
	^ timeline ! !
!TimeLineEvent methodsFor: 'accessing' stamp: 'MGD 6/20/2019 19:17:36' prior: 50622665!
type
	self subclassResponsibility ! !
!TimeLineEvent methodsFor: 'printing' stamp: 'MGD 6/21/2019 07:38:48' prior: 50622670 overrides: 16902983!
printString
	self subclassResponsibility ! !
!TimeLineEvent methodsFor: 'as yet unclassified' stamp: 'MGD 11/27/2019 19:41:58' prior: 50622674!
previousEvent
	^ self timeline eventBefore: self ! !
!TimeLineEvent methodsFor: 'as yet unclassified' stamp: 'MGD 11/27/2019 20:08:08' prior: 50622679!
timeline: aTimeline
	timeline := aTimeline ! !
!ChangeEvent methodsFor: 'initialization' stamp: 'MGD 11/27/2019 20:07:19' prior: 50622683!
change: aChange
	change := aChange! !
!ChangeEvent methodsFor: 'accessing' stamp: 'MGD 6/20/2019 20:14:01' prior: 50622687!
change
	^ change! !
!ChangeEvent methodsFor: 'accessing' stamp: 'MGD 6/20/2019 20:17:56' prior: 50622691 overrides: 50647256!
type
	^ #change! !
!ChangeEvent methodsFor: 'displaying' stamp: 'MGD 11/26/2019 16:33:57' prior: 50622694!
changeCategory

	^ self change category printString! !
!ChangeEvent methodsFor: 'displaying' stamp: 'MGD 11/26/2019 16:34:08' prior: 50622698!
changeDescription

	^ self change description! !
!ChangeEvent methodsFor: 'displaying' stamp: 'MGD 11/27/2019 19:07:42' prior: 50622702!
changeTime

	^ self change timeString! !
!ChangeEvent methodsFor: 'displaying' stamp: 'MGD 6/25/2019 09:42:14' prior: 50622706!
displayOn: aMorph
	aMorph displayChange: self change! !
!ChangeEvent methodsFor: 'displaying' stamp: 'MGD 1/2/2020 08:57:47' prior: 50622710!
minutesAsString: timeDifference
	| inMinutes |
	
	timeDifference > (TimeUnits minute with: 1) 
		ifTrue: [ inMinutes := ((timeDifference convertTo: TimeUnits minute) floor) amount. ]
		ifFalse: [ inMinutes := 0 ].
		
	^ String streamContents: [ :aStream | inMinutes printOn: aStream integerDigits: 2 fractionDigits: 0 ]! !
!ChangeEvent methodsFor: 'displaying' stamp: 'MGD 11/27/2019 19:42:17' prior: 50622723 overrides: 50647261!
printString
	^ '[', self changeTime, ' ', self timeDifferenceWithPreviousChange, '] [', self changeCategory, '] ', self changeDescription.! !
!ChangeEvent methodsFor: 'displaying' stamp: 'MGD 1/2/2020 08:57:58' prior: 50622730!
secondsAsString: timeDifference
	| inMinutes inSeconds |
	
	inMinutes := ((timeDifference convertTo: TimeUnits minute) floor).
	inSeconds := ((timeDifference - inMinutes) convertTo: TimeUnits second) abs amount.

	^ String streamContents: [ :aStream | inSeconds printOn: aStream integerDigits: 2 fractionDigits: 0 ]! !
!ChangeEvent methodsFor: 'displaying' stamp: 'MGD 1/2/2020 08:57:37' prior: 50622743!
timeDifferenceWithPreviousChange
	| previousEvent timeDifference |
	
	previousEvent := self previousEvent.
	previousEvent ifNil: [ ^ '00m00s' ].
	
	timeDifference := self change time distanceFrom: previousEvent change time.

	timeDifference > (TimeUnits hour with: 1)
		ifTrue: [ ^ '>1 hour' ] 
		ifFalse: [ ^ (self minutesAsString: timeDifference), 'm', (self secondsAsString: timeDifference), 's' ] ! !
!ChangeEvent class methodsFor: 'instance creation' stamp: 'MGD 11/27/2019 20:07:35' prior: 50622759!
for: aChange in: aTimeline
	^ self new 
		change: aChange; 
		timeline: aTimeline! !
!StateTransitionEvent methodsFor: 'accessing' stamp: 'MGD 6/27/2019 10:26:58' prior: 50622765!
stateFrom
	^ fromState ! !
!StateTransitionEvent methodsFor: 'accessing' stamp: 'MGD 6/27/2019 10:26:33' prior: 50622769!
stateTo
	^ toState ! !
!StateTransitionEvent methodsFor: 'accessing' stamp: 'MGD 6/20/2019 20:17:38' prior: 50622773 overrides: 50647256!
type
	^ #stateTransition! !
!StateTransitionEvent methodsFor: 'initialization' stamp: 'MGD 6/27/2019 10:24:25' prior: 50622777!
from: aTDDState
	fromState := aTDDState ! !
!StateTransitionEvent methodsFor: 'initialization' stamp: 'MGD 6/20/2019 20:15:11' prior: 50622781!
tddState: aTDDState
	tddState := aTDDState ! !
!StateTransitionEvent methodsFor: 'initialization' stamp: 'MGD 6/27/2019 10:24:36' prior: 50622786!
to: aTDDState
	toState := aTDDState ! !
!StateTransitionEvent methodsFor: 'displaying' stamp: 'MGD 6/25/2019 09:41:34' prior: 50622790!
displayOn: aMorph
	aMorph displayStateTransition: self! !
!StateTransitionEvent methodsFor: 'displaying' stamp: 'MGD 6/27/2019 10:26:33' prior: 50622795 overrides: 50647261!
printString
	^ self stateTo printString! !
!StateTransitionEvent class methodsFor: 'instance creation' stamp: 'MGD 11/27/2019 20:09:52' prior: 50622800!
from: previousTDDState to: currentTDDState in: aTimeline
	^ self new 
		from: previousTDDState; 
		to: currentTDDState;
		timeline: aTimeline! !
!StateTransitionEvent class methodsFor: 'instance creation' stamp: 'MGD 6/20/2019 20:16:42' prior: 50622808!
with: aTDDState
	^ self new tddState: aTDDState ! !
!UninstalledMethodReference methodsFor: 'printing' stamp: 'MGD 9/4/2019 21:07:02' prior: 50622813 overrides: 16902975!
printOn: aStream
	aStream nextPutAll: 'TestReference '.
	aStream nextPutAll: className.
	aStream nextPutAll: '>>'.
	selector printOn: aStream ! !
!UninstalledMethodReference methodsFor: 'initialization' stamp: 'MGD 9/2/2019 20:06:32' prior: 50622821!
class: aSymbol 
	className := aSymbol ! !
!UninstalledMethodReference methodsFor: 'initialization' stamp: 'MGD 3/17/2020 19:50:37' prior: 50622826 overrides: 16920235!
initialize
	overrides := false.! !
!UninstalledMethodReference methodsFor: 'initialization' stamp: 'MGD 3/17/2020 19:49:26' prior: 50622830!
overrides: aBoolean
	overrides := aBoolean.! !
!UninstalledMethodReference methodsFor: 'initialization' stamp: 'MGD 9/2/2019 20:06:12' prior: 50622835!
selector: aSymbol 
	selector := aSymbol ! !
!UninstalledMethodReference methodsFor: 'initialization' stamp: 'MGD 11/15/2019 09:14:55' prior: 50622840!
sourceCode: aString
	sourceCode := aString ! !
!UninstalledMethodReference methodsFor: 'accessing' stamp: 'MGD 10/10/2019 20:16:08' prior: 50622845!
methodClass
	^ className! !
!UninstalledMethodReference methodsFor: 'accessing' stamp: 'MGD 3/17/2020 19:51:31' prior: 50622849!
overridesASuperclassMethod
	^ overrides ! !
!UninstalledMethodReference methodsFor: 'accessing' stamp: 'MGD 9/2/2019 20:12:47' prior: 50622853!
selector
	^selector! !
!UninstalledMethodReference methodsFor: 'comparing' stamp: 'MGD 10/10/2019 20:16:08' prior: 50622858 overrides: 16901772!
= anObject
	(anObject class == self class) ifFalse: [ ^ false ].
	
	^ anObject selector = selector and: anObject methodClass = className! !
!UninstalledMethodReference methodsFor: 'comparing' stamp: 'MGD 10/10/2019 20:16:08' prior: 50622866 overrides: 16901788!
hash
	^ self methodClass hash + self selector hash! !
!UninstalledMethodReference methodsFor: 'inspecting' stamp: 'MGD 11/15/2019 09:34:36' prior: 50622871!
methodClassIfInstalled
	^ (Smalltalk classNamed: self methodClass) ifNil: [ ^ UndefinedObject ]! !
!UninstalledMethodReference methodsFor: 'inspecting' stamp: 'HAW 4/5/2020 19:00:44' prior: 50622877!
sendsMessageWithSelector: aSymbol
	| methodNode |
	methodNode :=  [ Parser parse: sourceCode class: self methodClassIfInstalled ]
		on: InMidstOfFileinNotification
		do: [ :anException | anException resume: true ].
	
	methodNode nodesDo: [ :aNode | 
		(aNode isMessageNode and: [ aNode isMessageNamed: aSymbol ]) ifTrue: [ ^ true ]].
	
	^ false! !
!UninstalledMethodReference methodsFor: 'copying' stamp: 'MGD 3/17/2020 19:51:13' prior: 50622891!
copyWith: newClassName  
	^ self class selector: self selector class: newClassName sourceCode: sourceCode overrides: overrides.! !
!UninstalledMethodReference class methodsFor: 'instance creation' stamp: 'MGD 9/2/2019 20:05:36' prior: 50622899!
selector: testSelector class: className 
	^ self new selector: testSelector; class: className ! !
!UninstalledMethodReference class methodsFor: 'instance creation' stamp: 'MGD 3/18/2020 20:37:10' prior: 50622906!
selector: testSelector class: className sourceCode: aSourceCodeString
	^ self new selector: testSelector; class: className; sourceCode: aSourceCodeString.! !
!UninstalledMethodReference class methodsFor: 'instance creation' stamp: 'MGD 3/17/2020 19:48:00' prior: 50622915!
selector: testSelector class: className sourceCode: aSourceCodeString overrides: anOverridenMethodOrNil
	^ self new selector: testSelector; class: className; sourceCode: aSourceCodeString; overrides: anOverridenMethodOrNil.! !
!TDDStateIcon methodsFor: 'initialization' stamp: 'MGD 10/1/2019 18:34:17' prior: 50622925!
for: aTDDState width: widthNumber height: heightNumber
	tddState := aTDDState.
	width := widthNumber.
	height := heightNumber.! !
!TDDStateIcon methodsFor: 'drawing' stamp: 'MGD 10/1/2019 17:29:09' prior: 50622932!
color
	^ AnalysisResultWindow stateTransitionColor: tddState ! !
!TDDStateIcon methodsFor: 'drawing' stamp: 'MGD 10/3/2019 19:22:55' prior: 50622937!
drawAt: aPoint on: aCanvas
	| stateName stateNamePosition stringWidth topLeft bottomRight |
	
	topLeft := aPoint.
	bottomRight := ((aPoint x + width) @ (aPoint y + height)).
	aCanvas roundRect: (topLeft corner: bottomRight) color: self color radius: 0.8.
	
	stateName := tddState printString copyFrom: 1 to: 1.
	stringWidth := self font widthOfString: stateName.
	stateNamePosition := (width - stringWidth) / 2.
	aCanvas drawString: stateName at: (stateNamePosition @ aPoint y) font: self font color: Color white! !
!TDDStateIcon methodsFor: 'drawing' stamp: 'HAW 7/11/2022 20:07:22' prior: 50622956!
font
	^ Preferences at: #standardListFont! !
!TDDStateIcon methodsFor: 'as yet unclassified' stamp: 'JA 5/19/2021 22:33:49' prior: 50622960!
setBalloonText: stringTextOrSymbol! !
!TDDStateIcon class methodsFor: 'instance creation' stamp: 'MGD 10/1/2019 18:34:55' prior: 50622964!
for: aTDDState width: widthNumber height: heightNumber
	^ self new for: aTDDState width: widthNumber height: heightNumber.! !
!TestCase methodsFor: '*TDDGuru' stamp: 'HAW 10/26/2019 23:09:43' prior: 50622971!
logRunWithResult: aString

	Smalltalk 
		logChange: aString 
		preamble: 'testRun: ', self class name printString, ' ', self selector printString, ' stamp: ', Utilities changeStamp printString.! !
!TestCase methodsFor: '*TDDGuru' stamp: 'HAW 10/27/2019 00:21:21' prior: 50622980!
performTest
	[
		self perform: testSelector asSymbol.
	  	self logRunWithResult: 'PASSED'. ] 
		on: TestFailure 
		do: [ :failure | 
			self logRunWithResult: 'FAILURE'.
			failure pass ]
		on: Error 
		do: [ :exception | 
			self logRunWithResult: 'ERROR'.
			exception pass ] 
			! !
!TestCase methodsFor: '*TDDGuru' stamp: 'HAW 10/27/2019 00:21:24' prior: 50622992!
run: aResult
	ChangeSet
		runningTest: self printString
		do: [ aResult runCase: self ].	
! !

!classDefinition: #SystemCategoryAutoSaver category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
Object subclass: #SystemCategoryAutoSaver
	instanceVariableNames: 'categoryName delay activated targetDirectory savingStrategy'
	classVariableNames: 'AutosavedCategories'
	poolDictionaries: ''
	category: 'SystemCategoryAutoSaving'!

!classDefinition: #SystemCategoryAutoSaver category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
Object subclass: #SystemCategoryAutoSaver
	instanceVariableNames: 'categoryName delay activated targetDirectory savingStrategy'
	classVariableNames: 'AutosavedCategories'
	poolDictionaries: ''
	category: 'SystemCategoryAutoSaving'!

!classDefinition: 'SystemCategoryAutoSaver class' category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
SystemCategoryAutoSaver class
	instanceVariableNames: ''!

!classDefinition: 'SystemCategoryAutoSaver class' category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
SystemCategoryAutoSaver class
	instanceVariableNames: ''!

!classDefinition: #MultiFileSystemCategoryAutoSaver category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
SystemCategoryAutoSaver subclass: #MultiFileSystemCategoryAutoSaver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SystemCategoryAutoSaving'!

!classDefinition: #MultiFileSystemCategoryAutoSaver category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
SystemCategoryAutoSaver subclass: #MultiFileSystemCategoryAutoSaver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SystemCategoryAutoSaving'!

!classDefinition: 'MultiFileSystemCategoryAutoSaver class' category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
MultiFileSystemCategoryAutoSaver class
	instanceVariableNames: ''!

!classDefinition: 'MultiFileSystemCategoryAutoSaver class' category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
MultiFileSystemCategoryAutoSaver class
	instanceVariableNames: ''!

!classDefinition: #SingleFileSystemCategoryAutoSaver category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
SystemCategoryAutoSaver subclass: #SingleFileSystemCategoryAutoSaver
	instanceVariableNames: 'targetFileName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SystemCategoryAutoSaving'!

!classDefinition: #SingleFileSystemCategoryAutoSaver category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
SystemCategoryAutoSaver subclass: #SingleFileSystemCategoryAutoSaver
	instanceVariableNames: 'targetFileName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SystemCategoryAutoSaving'!

!classDefinition: 'SingleFileSystemCategoryAutoSaver class' category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
SingleFileSystemCategoryAutoSaver class
	instanceVariableNames: ''!

!classDefinition: 'SingleFileSystemCategoryAutoSaver class' category: 'SystemCategoryAutoSaving' stamp: 'sf 5/31/2023 23:48:42'!
SingleFileSystemCategoryAutoSaver class
	instanceVariableNames: ''!
!SystemCategoryAutoSaver methodsFor: 'backup' stamp: 'HAW 8/20/2022 19:27:11' prior: 50623087!
fileOut: fileStream
	
	| categories |
	
	categories := SystemOrganization withSubCategoriesOf: categoryName.
	categories size = 1 
		ifTrue: [ self fileOutSingleCategoryOn: fileStream]
		ifFalse: [ self fileOutRootCategoryWithAll: categories on: fileStream ]
		! !
!SystemCategoryAutoSaver methodsFor: 'backup' stamp: 'HAW 8/20/2022 18:41:34' prior: 50623098!
fileOutExistingCategory: aCategory on: fileStream

	^ [ SystemOrganization fileOutCategory: aCategory on: fileStream initializing: true ] 
		on: FileWriteError 
		do: [ :writeError | self stopSavingAndInform: writeError ]! !
!SystemCategoryAutoSaver methodsFor: 'backup' stamp: 'HAW 8/20/2022 19:05:23' prior: 50623108!
fileOutRootCategoryWithAll: categories on: fileStream

	"I assume that categories will not be removed while saving... - Hernan"
	
	categories do: [ :aCategory | self fileOutExistingCategory: aCategory on: fileStream ].! !
!SystemCategoryAutoSaver methodsFor: 'backup' stamp: 'HAW 8/20/2022 18:42:58' prior: 50623118!
fileOutSingleCategoryOn: fileStream

	^ (SystemOrganization hasCategory: categoryName) 
		ifTrue: [ self fileOutExistingCategory: categoryName on: fileStream ]
		ifFalse: [ self class stopAndRemoveAutosaverFor: categoryName ]! !
!SystemCategoryAutoSaver methodsFor: 'backup' stamp: 'HAW 7/22/2022 15:55:46' prior: 50623128!
informWriteError: error

	| userErrorDescription |
	
	userErrorDescription := String streamContents: [ :stream |
		stream
			nextPutAll: 'Could not save ';
			nextPutAll: categoryName;
			nextPutAll: ' due to: ';
			newLine;
			nextPutAll: error messageText;
			newLine;
			nextPutAll: 'Category is not being saved anymore'. ].

	self inform: userErrorDescription! !
!SystemCategoryAutoSaver methodsFor: 'backup' stamp: 'HAW 7/23/2022 18:54:51' prior: 50623142!
notUsedFileEntryFrom: anInitialFileName extension: anInitialFileNameExtension  

	| version newBackupFileEntry newName |
	
	version := 0.
	
	[ version := version + 1.
	newName := anInitialFileName , '-', version printString, '.', anInitialFileNameExtension.
	newBackupFileEntry := targetDirectory // newName.
	newBackupFileEntry exists ] whileTrue.

	^ newBackupFileEntry ! !
!SystemCategoryAutoSaver methodsFor: 'backup' stamp: 'HAW 7/23/2022 18:55:27' prior: 50623157!
saveBackup

	| backupFileEntry fileName |
	
	fileName := self fileName.
	backupFileEntry := targetDirectory // fileName.
	self shouldDeletePreviousBackup ifTrue: [ targetDirectory removeKey: fileName ifAbsent: [] ].
	
	[ backupFileEntry writeStreamDo: [ :fileStream | self fileOut: fileStream ]]
		on: FileExistsException 
		do: [ :exception | 
			"If current backup file exists, I do not remove it but try with a new file name with a version number,
			even if previous backup should be deleted. This is to avoid loosing files - Hernan"
			backupFileEntry := self notUsedFileEntryFrom: backupFileEntry nameWithoutExtension extension: backupFileEntry extension.
			exception retry ].
			! !
!SystemCategoryAutoSaver methodsFor: 'backup' stamp: 'HAW 7/22/2022 15:57:08' prior: 50623182!
stopSavingAndInform: aWriteError

	"It is cuestionable to show the error because the user can be doing other things... but it is better than not
	giving any feedback and let the user beleive it is still saving - Hernan"
	
	self class stopAndRemoveAutosaverFor: categoryName.
	self informWriteError: aWriteError! !
!SystemCategoryAutoSaver methodsFor: 'initialization' stamp: 'HAW 7/23/2022 18:45:08' prior: 50623195!
backupDirectoryName

	^ 'autosave-', categoryName asFileName ! !
!SystemCategoryAutoSaver methodsFor: 'initialization' stamp: 'AEC 7/15/2022 21:23:15' prior: 50623200!
initializeFor: aCategoryName with: aNumberOfSeconds

	categoryName := aCategoryName.
	delay := Delay forSeconds: aNumberOfSeconds.
	activated := false.
	self initializeTargetDirectory.! !
!SystemCategoryAutoSaver methodsFor: 'initialization' stamp: 'HAW 7/22/2022 17:03:41' prior: 50623209!
initializeTargetDirectory

	targetDirectory := DirectoryEntry smalltalkImageDirectory / self backupDirectoryName.! !
!SystemCategoryAutoSaver methodsFor: 'start/stop' stamp: 'HAW 7/22/2022 14:52:56' prior: 50623216!
saveLoop

	[activated] whileTrue:[ 
		self saveBackup.
		delay wait ]! !
!SystemCategoryAutoSaver methodsFor: 'start/stop' stamp: 'HAW 7/22/2022 15:42:44' prior: 50623221!
start
	
	activated := true.
	
	[self saveLoop] forkAt: Processor userBackgroundPriority named: categoryName, ' autosave'
! !
!SystemCategoryAutoSaver methodsFor: 'start/stop' stamp: 'AEC 7/16/2022 01:17:12' prior: 50623228!
stop
	
	activated := false.
	delay unschedule ! !
!SystemCategoryAutoSaver methodsFor: 'file' stamp: 'HAW 7/23/2022 18:45:53' prior: 50623232!
fileName
			
	self subclassResponsibility ! !
!SystemCategoryAutoSaver methodsFor: 'file' stamp: 'HAW 7/23/2022 18:34:26' prior: 50623236!
shouldDeletePreviousBackup
	
	self subclassResponsibility ! !
!SystemCategoryAutoSaver class methodsFor: 'accesing' stamp: 'HAW 7/23/2022 18:46:58' prior: 50623241!
hasAutosaverFor: aCategoryName

	^AutosavedCategories includesKey: aCategoryName ! !
!SystemCategoryAutoSaver class methodsFor: 'action' stamp: 'HAW 7/23/2022 18:48:27' prior: 50623247!
stopAndRemoveAutosaverFor: aCategoryName

	(AutosavedCategories removeKey: aCategoryName) stop.
	! !
!SystemCategoryAutoSaver class methodsFor: 'initialization' stamp: 'HAW 7/23/2022 18:47:03' prior: 50623254 overrides: 16904184!
initialize

	AutosavedCategories := Dictionary new.! !
!SystemCategoryAutoSaver class methodsFor: 'instance creation' stamp: 'HAW 7/23/2022 18:42:42' prior: 50623259!
for: aCategoryName withDelayOf: aNumberOfSeconds
	
	self assertIsValidDelay: aNumberOfSeconds.
	
	^self new initializeFor: aCategoryName with: aNumberOfSeconds.
	! !
!SystemCategoryAutoSaver class methodsFor: 'instance creation' stamp: 'HAW 7/23/2022 18:47:11' prior: 50623268!
startFor: aCategoryName withDelayOf: aNumberOfSeconds

	| newInstance |
	
	newInstance := self for: aCategoryName withDelayOf: aNumberOfSeconds.
	AutosavedCategories at: aCategoryName put: newInstance.
	newInstance start.
	
	^newInstance! !
!SystemCategoryAutoSaver class methodsFor: 'browser menues' stamp: 'HAW 7/22/2022 15:33:51' prior: 50623279!
menuDescription

	self subclassResponsibility! !
!SystemCategoryAutoSaver class methodsFor: 'browser menues' stamp: 'HAW 7/23/2022 17:53:46' prior: 50623284!
systemCategoryMenuOptions

	^{ 
		{
				#itemGroup 		-> 		30.
				#itemOrder 		-> 		15.
				#label 			-> 	 #systemCategoryAutosaveMenuLabel.
				#object 			-> 		#model.
				#selector 		-> 		#toggleSystemCategoryAutosave.
				#icon 			-> 		#fileOutIcon
			} asDictionary.
		}! !
!SystemCategoryAutoSaver class methodsFor: 'assertions' stamp: 'HAW 7/23/2022 18:42:42' prior: 50623296!
assertIsValidDelay: aNumberOfSeconds

	^ aNumberOfSeconds < 1 ifTrue: [ self error: 'Number of seconds must be greather or equal to 1' ]! !
!MultiFileSystemCategoryAutoSaver methodsFor: 'file' stamp: 'HAW 7/23/2022 18:56:13' prior: 50623304 overrides: 50647871!
fileName

	^String streamContents: [ :stream |
		stream 
			nextPutAll: categoryName asFileName;
			nextPutAll: '-autosave-';
			nextPutAll: DateAndTime now printStringWithoutOffset asFileName;
			nextPutAll: '.st' ]
! !
!MultiFileSystemCategoryAutoSaver methodsFor: 'file' stamp: 'HAW 7/23/2022 18:35:26' prior: 50623315 overrides: 50647876!
shouldDeletePreviousBackup
	
	^false! !
!MultiFileSystemCategoryAutoSaver class methodsFor: 'browser menues' stamp: 'HAW 7/22/2022 15:34:28' prior: 50623321 overrides: 50647923!
menuDescription

	^'Versioning'! !
!SingleFileSystemCategoryAutoSaver methodsFor: 'initialization' stamp: 'AEC 7/9/2022 19:52:15' prior: 50623326 overrides: 50647835!
initializeFor: aCategoryName with: aNumberOfSeconds

	super initializeFor: aCategoryName with: aNumberOfSeconds.
	
	targetFileName := categoryName asFileName,'-autosave','.st'.! !
!SingleFileSystemCategoryAutoSaver methodsFor: 'file' stamp: 'HAW 7/23/2022 18:45:53' prior: 50623335 overrides: 50647871!
fileName

	^ targetFileName! !
!SingleFileSystemCategoryAutoSaver methodsFor: 'file' stamp: 'HAW 7/23/2022 18:35:51' prior: 50623340 overrides: 50647876!
shouldDeletePreviousBackup
	
	^true! !
!SingleFileSystemCategoryAutoSaver class methodsFor: 'browser menues' stamp: 'HAW 7/22/2022 15:34:39' prior: 50623346 overrides: 50647923!
menuDescription

	^'Single file'! !
!Browser methodsFor: '*SystemCategoryAutoSaving' stamp: 'HAW 7/23/2022 17:51:42' prior: 50623350!
askAutosaveTypeIfCancelled: aBlock

	| menuIndex options labels |

	options := {SingleFileSystemCategoryAutoSaver. MultiFileSystemCategoryAutoSaver}.
	labels := options collect: [ :autoSaverClass | autoSaverClass menuDescription].
	menuIndex := (PopUpMenu labelArray: labels) startUpWithCaption: 'Autosave Type'.
	
	^ menuIndex = 0
		ifTrue: [ aBlock value ]
		ifFalse: [ options at: menuIndex ]
	! !
!Browser methodsFor: '*SystemCategoryAutoSaving' stamp: 'HAW 7/22/2022 15:35:17' prior: 50623366!
autosaveCategory

	| autosaveSubclass |
	
	autosaveSubclass := self askAutosaveTypeIfCancelled: [ ^self ].
		
	self
		request: 'Autosave interval (in seconds)'
		initialAnswer: '60'
		verifying: [:aString| aString size > 0 and: [aString allSatisfy: [:each| each isDigit]]]
		do: [	:interval | 
			autosaveSubclass startFor: selectedSystemCategory withDelayOf: interval asNumber.
			PopUpMenu inform: 'Autosaver started.' ]
! !
!Browser methodsFor: '*SystemCategoryAutoSaving' stamp: 'HAW 7/23/2022 17:51:16' prior: 50623382!
stopAutosave

	SystemCategoryAutoSaver stopAndRemoveAutosaverFor: selectedSystemCategory.
	self inform: 'Autosaver stopped.'! !
!Browser methodsFor: '*SystemCategoryAutoSaving' stamp: 'HAW 7/23/2022 18:57:02' prior: 50623389!
systemCategoryAutosaveMenuLabel
	
	^(SystemCategoryAutoSaver hasAutosaverFor: self selectedSystemCategory)
		ifTrue: [ 'stop autosave' ]
		ifFalse: [ 'start autosave' ]! !
!Browser methodsFor: '*SystemCategoryAutoSaving' stamp: 'HAW 7/23/2022 17:53:46' prior: 50623397!
toggleSystemCategoryAutosave
	
	(SystemCategoryAutoSaver hasAutosaverFor: selectedSystemCategory) 
		ifTrue: [ self stopAutosave ]
		ifFalse: [ self autosaveCategory ]! !

!classDefinition: #ParseNodeTest category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
TestCase subclass: #ParseNodeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Tests'!

!classDefinition: #ParseNodeTest category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
TestCase subclass: #ParseNodeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Tests'!

!classDefinition: 'ParseNodeTest class' category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
ParseNodeTest class
	instanceVariableNames: ''!

!classDefinition: 'ParseNodeTest class' category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
ParseNodeTest class
	instanceVariableNames: ''!

!classDefinition: #BlockNodeTest category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
ParseNodeTest subclass: #BlockNodeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Tests'!

!classDefinition: #BlockNodeTest category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
ParseNodeTest subclass: #BlockNodeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Tests'!

!classDefinition: 'BlockNodeTest class' category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
BlockNodeTest class
	instanceVariableNames: ''!

!classDefinition: 'BlockNodeTest class' category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
BlockNodeTest class
	instanceVariableNames: ''!

!classDefinition: #MessageNodeTest category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
ParseNodeTest subclass: #MessageNodeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Tests'!

!classDefinition: #MessageNodeTest category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
ParseNodeTest subclass: #MessageNodeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Tests'!

!classDefinition: 'MessageNodeTest class' category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
MessageNodeTest class
	instanceVariableNames: ''!

!classDefinition: 'MessageNodeTest class' category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:42'!
MessageNodeTest class
	instanceVariableNames: ''!

!classDefinition: #VariableNodeTest category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:43'!
ParseNodeTest subclass: #VariableNodeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Tests'!

!classDefinition: #VariableNodeTest category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:43'!
ParseNodeTest subclass: #VariableNodeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Tests'!

!classDefinition: 'VariableNodeTest class' category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:43'!
VariableNodeTest class
	instanceVariableNames: ''!

!classDefinition: 'VariableNodeTest class' category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:43'!
VariableNodeTest class
	instanceVariableNames: ''!

!classDefinition: #StringCuisUniversityExtentionsTest category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:43'!
TestCase subclass: #StringCuisUniversityExtentionsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Tests'!

!classDefinition: #StringCuisUniversityExtentionsTest category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:43'!
TestCase subclass: #StringCuisUniversityExtentionsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Tests'!

!classDefinition: 'StringCuisUniversityExtentionsTest class' category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:43'!
StringCuisUniversityExtentionsTest class
	instanceVariableNames: ''!

!classDefinition: 'StringCuisUniversityExtentionsTest class' category: 'CuisUniversity-Tests' stamp: 'sf 5/31/2023 23:48:43'!
StringCuisUniversityExtentionsTest class
	instanceVariableNames: ''!

!classDefinition: #CuisUniversityInstallation category: 'CuisUniversity-Model' stamp: 'sf 5/31/2023 23:48:43'!
Object subclass: #CuisUniversityInstallation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Model'!

!classDefinition: #CuisUniversityInstallation category: 'CuisUniversity-Model' stamp: 'sf 5/31/2023 23:48:43'!
Object subclass: #CuisUniversityInstallation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity-Model'!

!classDefinition: 'CuisUniversityInstallation class' category: 'CuisUniversity-Model' stamp: 'sf 5/31/2023 23:48:43'!
CuisUniversityInstallation class
	instanceVariableNames: ''!

!classDefinition: 'CuisUniversityInstallation class' category: 'CuisUniversity-Model' stamp: 'sf 5/31/2023 23:48:43'!
CuisUniversityInstallation class
	instanceVariableNames: ''!
!ParseNodeTest methodsFor: 'parse nodes helpers' stamp: 'RNG 1/19/2018 21:09:10' prior: 50623546!
message: aSelector to: aVariableName

	| variableNode selectorNode |
	variableNode _ VariableNode named: aVariableName.
	selectorNode _ SelectorNode new key: aSelector code: 34.
	^ MessageNode new
		receiver: variableNode
		selector: selectorNode
		arguments: #()
		precedence: 1! !
!BlockNodeTest methodsFor: 'detecting self recursion' stamp: 'RNG 1/19/2018 21:05:22' prior: 50623558!
testItDoesNotSendsAGivenMessageToSelfWhenTheBlockIsEmpty

	| anEmptyBlock |
	anEmptyBlock _ BlockNode empty.

	self deny: (anEmptyBlock sendsMessageToSelf: #myMethod)! !
!BlockNodeTest methodsFor: 'detecting self recursion' stamp: 'RNG 1/19/2018 21:08:08' prior: 50623567!
testItSendsAGivenMessageToSelfWhenItContainsAnStatementWithAMessageSendToSelf

	| anEmptyBlock |
	anEmptyBlock _ BlockNode withJust: (self message: #myMethod to: 'self').

	self assert: (anEmptyBlock sendsMessageToSelf: #myMethod)! !
!MessageNodeTest methodsFor: 'detecting self recursion' stamp: 'RNG 1/19/2018 21:02:30' prior: 50623578!
testItDoesNotSendTheMessageToSelfWhenTheReceiverIsNotSelf

	| messageNode |
	messageNode _ self message: #myMethod to: 'super'.

	self deny: (messageNode sendsMessageToSelf: #myMethod)! !
!MessageNodeTest methodsFor: 'detecting self recursion' stamp: 'RNG 1/19/2018 21:02:19' prior: 50623587!
testItDoesNotSendTheMessageToSelfWhenTheReceiverIsSelfButTheSelectorIsDifferent

	| messageNode |
	messageNode _ self message: #myMethod to: 'self'.

	self deny: (messageNode sendsMessageToSelf: #otherMethod)! !
!MessageNodeTest methodsFor: 'detecting self recursion' stamp: 'RNG 1/19/2018 21:01:10' prior: 50623597!
testItSendsTheMessageToSelfWhenTheReceiverIsSelf

	| messageNode |
	messageNode _ self message: #myMethod to: 'self'.

	self assert: (messageNode sendsMessageToSelf: #myMethod)! !
!VariableNodeTest methodsFor: 'references to self' stamp: 'RNG 1/19/2018 20:51:09' prior: 50623606!
testItDoesNotReferencesSelfWhenTheVariableNameIsNotSelf

	| variableNode |
	variableNode _ VariableNode named: 'abc'.

	self deny: variableNode referencesSelf! !
!VariableNodeTest methodsFor: 'references to self' stamp: 'RNG 1/19/2018 20:50:13' prior: 50623614!
testItReferencesSelfWhenTheVariableNameIsSelf

	| variableNode |
	variableNode _ VariableNode named: 'self'.

	self assert: variableNode referencesSelf! !
!StringCuisUniversityExtentionsTest methodsFor: 'tests' stamp: 'HAW 11/27/2021 11:25:44' prior: 50623622!
test01_IfBeginsWith_a_AndContinuesWithUppercase_RemovesTheA

	self assert: 'dog' equals: 'aDog' asInstanceVariableName.
	! !
!StringCuisUniversityExtentionsTest methodsFor: 'tests' stamp: 'HAW 11/27/2021 11:27:51' prior: 50623629!
test02_IfBeginsWith_a_AndContinuesWithLowercase_Adds_CHANGE_ME

	self assert: 'adog_CHANGE_ME' equals: 'adog' asInstanceVariableName.
	! !
!StringCuisUniversityExtentionsTest methodsFor: 'tests' stamp: 'HAW 11/27/2021 11:26:33' prior: 50623637!
test03_IfBeginsWith_an_AndContinuesWithUppercase_RemovesTheAn

	self assert: 'abc' equals: 'anAbc' asInstanceVariableName.
	! !
!StringCuisUniversityExtentionsTest methodsFor: 'tests' stamp: 'HAW 11/27/2021 11:27:07' prior: 50623644!
test04_IfBeginsWith_an_AndContinuesWithLowercase_Adds_CHANGE_ME

	self assert: 'anabc_CHANGE_ME' equals: 'anabc' asInstanceVariableName.
	! !
!StringCuisUniversityExtentionsTest methodsFor: 'tests' stamp: 'HAW 11/27/2021 11:28:11' prior: 50623652!
test05_IfBeginsWith_un_AndContinuesWithUppercase_RemovesThe_un

	"Spanish support - Hernan"
	self assert: 'perro' equals: 'unPerro' asInstanceVariableName.
	! !
!StringCuisUniversityExtentionsTest methodsFor: 'tests' stamp: 'HAW 11/27/2021 11:28:45' prior: 50623660!
test06_IfBeginsWith_un_AndContinuesWithLowercase_Adds_CHANGE_ME

	"Spanish support - Hernan"
	self assert: 'unperro_CHANGE_ME' equals: 'unperro' asInstanceVariableName.
	! !
!StringCuisUniversityExtentionsTest methodsFor: 'tests' stamp: 'HAW 11/27/2021 11:29:07' prior: 50623669!
test07_IfBeginsWith_una_AndContinuesWithUppercase_RemovesThe_una

	"Spanish support - Hernan"
	self assert: 'mesa' equals: 'unaMesa' asInstanceVariableName.
	! !
!StringCuisUniversityExtentionsTest methodsFor: 'tests' stamp: 'HAW 11/27/2021 11:29:39' prior: 50623677!
test08_IfBeginsWith_una_AndContinuesWithLowercase_Adds_CHANGE_ME

	"Spanish support - Hernan"
	self assert: 'unamesa_CHANGE_ME' equals: 'unamesa' asInstanceVariableName.
	! !
!StringCuisUniversityExtentionsTest methodsFor: 'tests' stamp: 'HAW 11/27/2021 11:29:47' prior: 50623686!
test08_IfItIsNotTheOtherCases_Add_CHANGE_ME

	self assert: 'name_CHANGE_ME' equals: 'name' asInstanceVariableName.
	! !
!CuisUniversityInstallation class methodsFor: 'initialization' stamp: 'HAW 3/15/2023 17:16:17' prior: 50623694 overrides: 16904184!
initialize

	UnitsTestResource  installUnitsAsGlobals.
	TimeUnits installUnitsAsGlobals.
	StackSizeWatcher startWatchingWithDefaults.
	DenotativeObjectLightTheme beCurrent.
	Preferences name: #autoNumberUserChanges category: #system value: false.
	Preferences name: #logDebuggerStackToFile category: #programming value: false.
	Preferences name: #checkLostChangesOnStartUp category: #system value: true.
	Preferences name: #methodAnnotations category: #programming value: #(timeStamp messageCategory packages changeSets).
	Preferences name: #classAnnotations category: #programming value: #(instanceMethodsCount classMethodsCount).
	Preferences name: #systemCategoryAnnotations category: #programming value: #(classCount instanceMethodsCount classMethodsCount).
	Preferences name: #showAssignmentAsLeftArrow category: #programming value: false.
	
	
	
	! !
!CuisUniversityInstallation class methodsFor: 'initialization' stamp: 'HAW 3/6/2021 18:44:01' prior: 50623724!
initializeWithLiveTypingVM

	self 
		"runAllTests;"
		removeSystemChangesFromChangeSet;
		openWelcomeWindow.

	TranscriptWindow allInstancesDo: [:aTranscriptWindow | aTranscriptWindow delete ].
! !
!CuisUniversityInstallation class methodsFor: 'welcome window' stamp: 'HAW 3/28/2018 19:59:40' prior: 50623734!
openWelcomeWindow

	| welcomeWindow |
	
	welcomeWindow := SystemWindow editText: (TextModel withText: (self welcomeWindowContents)) label: '¡Bienvenidos a CuisUniversity!!' wrap: true.
	welcomeWindow resize: (Rectangle origin: 45@40 extent: 910@435)! !
!CuisUniversityInstallation class methodsFor: 'welcome window' stamp: 'HAW 2/28/2019 19:51:03' prior: 50623745!
welcomeWindowContents

	^Compiler evaluate:  '(Text string: ''CuisUniversity

Este es un ambiente creado especialmente para la enseñanza de la Programación Orientada a Objetos, usando Smalltalk como herramienta y en particular la implementación Argentina de Smalltalk denominada Cuis.

El objetivo es que los interesados empiecen aprendiendo qué significa trabajar con objetos concretos (denotative objects) para luego pasar a implementaciones más complejas del paradigma.

Para trabajar con objetos concretos, solo basta elegir la opcion "DenotativeObject Browser" del menú principal.
Para videos que muestran cómo usar CuisUniversity ir a: https://www.youtube.com/playlist?list=PLMkq_h36PcLCQiU5gxNmedxdXbl10JYeV

Este ambiente viene con los siguientes paquetes instalados:
- LiveTyping: Una VM especial con un ambiente de objetos extendido que anota los tipos de las variables
  a medida que el sistema ejecuta. Mejora muchisimo la experiencia del programador.
- DenotativeObject: Herramienta que permite trabajar con Objetos sin Clases.
- Refactoring: Implementacion de refactorings automatizados para Cuis.
- Aconcagua: Posibilita trabajar con medidas 
- Chalten: Implementación del Calendario Gregoriano. Usa Aconcagua
- Themes: Package que permite seleccionar distintos temas (colores), como Dark. Ir a "Preferences -> Themes"
  (Usar preferentemente DenotativeObjectTheme y DenotativeObjectDarkTheme)

Implementadores:
- Hernán Wilkinson, Máximo Prieto, Juan Manuel Vuletich

Colaboradores
- Nahuel Garbezza, Gastón Caruso, Angeles Tella Arena, Matias Melendi

Sponsors:
- 10Pines SRL: Este ambiente no sería posible sin la horas de trabajo cedidas por 10Pines para hacerlo.'' runs: (RunArray runs: #(14 1 1605 ) values: ((Array new: 3) at: 1 put: ((Array new: 4) at: 1 put: (TextFontFamilyAndSize basicNew instVarAt: 1 put: ''DejaVu''; instVarAt: 2 put: 22; yourself); at: 2 put: (TextEmphasis basicNew instVarAt: 1 put: 1; yourself); at: 3 put: (TextColor basicNew instVarAt: 1 put: (Color r: 0.000 g: 0.000 b: 1.000); yourself); at: 4 put: (TextAlignment basicNew instVarAt: 1 put: 2; yourself); yourself); at: 2 put: ((Array new: 1) at: 1 put: (TextAlignment basicNew instVarAt: 1 put: 2; yourself); yourself); at: 3 put: #(); yourself)))'! !
!CuisUniversityInstallation class methodsFor: 'initialization - private' stamp: 'HAW 2/28/2019 22:14:55' prior: 50623820!
removeSystemChangesFromChangeSet

	ChangeSet allChangeSets 
		select: [ :aChangeSet | aChangeSet isForBaseSystem ] 
		thenDo: [ :aChangeSet | ChangeSet removeChangeSet: aChangeSet ]! !
!CuisUniversityInstallation class methodsFor: 'initialization - private' stamp: 'HAW 2/28/2019 22:14:40' prior: 50623830!
runAllTests

	| testClasses testSuite |
	
	testClasses := TestCase allSubclasses reject: [:cls | cls isAbstract or: [ cls = DecompilerTests ]].
	testSuite := TestSuite new.
	testClasses do: [ :aTestClass | aTestClass addToSuiteFromSelectors: testSuite ].
	
	testSuite run.
	
	MenuMorph allInstances do: [:aMorph | aMorph delete ].
	SystemWindow allInstances select: [ :aSystemWindow | aSystemWindow label = 'old instance' ] thenDo: [:aMorph | aMorph delete ].! !
!CuisUniversityInstallation class methodsFor: 'browser menues' stamp: 'HAW 5/7/2022 11:22:02' prior: 50623848!
systemCategoryMenuOptions

	^{ 
		{
				#itemGroup	 		-> 	50.
				#itemOrder 			-> 	15.
				#label 			-> 	'change new line encode...'.
				#object 			-> 	#model.
				#selector 			-> 	#changeNewLineEncode.
				#icon 			-> 	#updateIcon
		} asDictionary.
		{
				#itemGroup  			->	80.
				#itemOrder  			->	10.
				#label  			-> 	'create package'.
				#icon  			-> 	#packageIcon.
				#object  			-> 	#model.
				#selector  			->	#createPackage.
		} asDictionary.
	}! !
!ProtoObject methodsFor: '*CuisUniversity' stamp: 'HAW 1/28/2022 19:25:26' prior: 50623865!
forceBecome: anotherObject

	^[ self become: anotherObject ]
		on: MethodInCallStackToBecomeInvalid
		do: [ :error | error resume ]  ! !
!Object methodsFor: '*CuisUniversity-Model' stamp: 'HAW 3/24/2020 17:10:28' prior: 50623872!
informBlockingUI: aStringToShow
	"Display aString blocking the UI"

	aStringToShow isEmptyOrNil ifFalse: [PopUpMenu informBlockingUI: aStringToShow]! !
!Browser methodsFor: '*CuisUniversity-Model' stamp: 'HAW 12/5/2021 11:19:13' prior: 50623880!
changeNewLineEncode
	
	| index |
	
	selectedSystemCategory ifNil: [ ^ self]. 
	
	index := self selectEncodeToConvert.					
	(index between: 1 and: 3) ifTrue: [ self convertToEncode: index ].
	! !
!Browser methodsFor: '*CuisUniversity-Model' stamp: 'HAW 12/5/2021 11:18:55' prior: 50623889!
convertToEncode: encondeNumber 

	| categorySubclasses class newSourceCode sourceCode |
	
	categorySubclasses := SystemOrganization listAtCategoryNamed: selectedSystemCategory.
		
	categorySubclasses do: [:aClassName | 
		class := Smalltalk classNamed: aClassName.
		{ class. class class } do: [ :aClass | aClass selectors do: [:aMethod |
			sourceCode := (aClass compiledMethodAt: aMethod) sourceCode.
			encondeNumber = 1 ifTrue: [ newSourceCode := sourceCode withCuisLineEndings. ].
			encondeNumber = 2 ifTrue: [ newSourceCode := sourceCode withLineEndings: String crString. ].
			encondeNumber = 3 ifTrue: [ newSourceCode := sourceCode withLineEndings: String crlfString. ].
			aClass compile: newSourceCode ]]]! !
!Browser methodsFor: '*CuisUniversity-Model' stamp: 'HAW 5/7/2022 11:24:21' prior: 50623914!
createPackage

	selectedSystemCategory ifNotNil: [ :categoryName |
		CodePackage 
			named: categoryName 	
			createIfAbsent: true 
			registerIfNew: true ]
	 ! !
!Browser methodsFor: '*CuisUniversity-Model' stamp: 'HAW 8/25/2021 11:40:52' prior: 50623922!
selectEncodeToConvert

	^(PopUpMenu 
		labelArray: {'LF (Cuis default)'. 'CR'. 'CRLF'. 'Cancel'}
		lines: #()
		icons: #(updateIcon updateIcon updateIcon cancelIcon) ) 
		startUpWithCaption: 'To which binary encode would you like to change the code?'.! !
!Debugger methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/27/2023 10:59:33' prior: 50623933!
argumentNamesForMessageSent: senderNode from: aSender

	| cantDeduceNameCounter |
	
	cantDeduceNameCounter := 0.
	
	^senderNode arguments collect: [ :argumentNode | 
		argumentNode isVariableNode 
			ifTrue: [argumentNode argumentNameForNewMessageSentFrom: aSender ]
			ifFalse: [ 
				cantDeduceNameCounter := cantDeduceNameCounter + 1.
				Message renameMeIdentifier, cantDeduceNameCounter printString ]]! !
!Debugger methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/27/2023 11:00:52' prior: 50623949!
argumentNamesFrom: aMessage

	| cantDeduceNameCounter |
	
	cantDeduceNameCounter := 0.
	
	^aMessage arguments collect: [ :argumentNode | 
		cantDeduceNameCounter := cantDeduceNameCounter + 1.
		Message renameMeIdentifier, cantDeduceNameCounter printString ]! !
!Debugger methodsFor: '*CuisUniversity-Model' stamp: 'HAW 2/22/2023 19:20:29' prior: 50623960!
argumentNamesOf: aMessage sentIn: aSender
		
	| argumentNames senderMethodNode senderNode messageSendRange |
	
	senderMethodNode := aSender methodNode.
	messageSendRange := aSender debuggerMap
		rangeForPC: aSender pc
		contextIsActiveContext: false.
	senderNode := (senderMethodNode parseNodeIncluding: messageSendRange first ifAbsent: [ nil -> nil]) key.
	
	 argumentNames := senderNode notNil 
		ifTrue: [ (senderNode isMessageNode and: [ senderNode selectorSymbol = aMessage selector ]) 
			ifTrue: [ self argumentNamesForMessageSent: senderNode from: aSender]
			ifFalse: [ self argumentNamesFrom: aMessage ]]
		ifFalse: [ self argumentNamesFrom: aMessage].
		
	^aSender receiver class collectNotDefinedInstanceVariablesFor: argumentNames 

! !
!Debugger methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/27/2023 11:34:46' prior: 50623986!
compileInitilizationMessage: aMessage in: aCategory fromClass: aClass context: aContext 
	
	| argumentNames realCategory initializationMethodSourceCode |
	
	argumentNames := self argumentNamesOf: aMessage sentIn: aContext sender.
	
	realCategory := aCategory = Categorizer default ifTrue: [ Categorizer initialization ]  ifFalse: [ aCategory ].
	initializationMethodSourceCode := aMessage 
		createInitializeMessageWith: argumentNames 
		forEachInstVarNameDo: [ :anInstVarName |  
			(aClass definesInstanceVariableNamedInHierarchy: anInstVarName) ifFalse: [ aClass addInstVarName: anInstVarName ]].
		
	aClass
		compile: initializationMethodSourceCode
		classified: realCategory
		! !
!Debugger methodsFor: '*CuisUniversity-Model' stamp: 'HAW 10/7/2019 14:43:50' prior: 50624010!
compileInstanceCreationMessage: aMessage in: aCategory fromClass: aClass context: aContext 
	
	aClass
		compile: (aMessage createInstanceCreationMessageFor: aClass)
		classified: aCategory
! !
!Debugger methodsFor: '*CuisUniversity-Model' stamp: 'HAW 2/10/2023 15:43:05' prior: 50624019!
compileMessage: aMessage inCategory: aCategory fromClass: aClass context: aContext
	
	| argumentNames methodSourceCode |
	
	argumentNames := self argumentNamesOf: aMessage sentIn: aContext sender.
	
	methodSourceCode := aMessage createStubMethodFor: aClass with: argumentNames.
	
	aClass
		compile: methodSourceCode
		classified: aCategory! !
!Debugger methodsFor: '*CuisUniversity-Model' stamp: 'HAW 10/10/2019 11:08:45' prior: 50624033!
implement: aMessage inCategory: aCategory fromClass: aClass context: aContext

	[ (aClass isMeta and: [ aCategory = Categorizer instanceCreation]) 
		ifTrue: [ self compileInstanceCreationMessage: aMessage in: aCategory fromClass: aClass context: aContext ]
		ifFalse: [ aMessage isInitializer 
			ifTrue: [ self compileInitilizationMessage: aMessage in: aCategory fromClass: aClass context: aContext ]
			ifFalse: [ self compileMessage: aMessage inCategory: aCategory fromClass: aClass context: aContext ]].
		
	aContext privRefreshWith: (aClass lookupSelector: aMessage selector).
	aMessage arguments withIndexDo: [ :arg :index | aContext tempAt: index put: arg ].
	self resetContext: aContext ]
		on: RecompilationFailure
		do: [ :aFailure | 
			self inform: 'There was a problem compiling ', aClass name, '>>#',aMessage selector,
				' because:', String newLineString ,aFailure messageText.
			self down; restart ]
! !
!Behavior methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/27/2023 11:17:44' prior: 50624065!
collectNotDefinedInstanceVariablesFor: variableNames

	| counter proposedVariableName allInstVarNames |
	
	counter := 0.
	allInstVarNames := self allInstVarNames.
	^variableNames collect: [ :variableName |
		proposedVariableName := variableName.
		[ allInstVarNames includes: proposedVariableName ] whileTrue: [
			counter := counter + 1.
			proposedVariableName := variableName, counter printString ].
		proposedVariableName ]
! !
!Message methodsFor: '*CuisUniversity-Model' stamp: 'HAW 10/8/2019 16:04:23' prior: 50624081!
createInitializationMessageAssigmentsIn: stream with: argumentNames forEachInstVarNameDo: instVarNameBlock  

	| instVarName |
	
	argumentNames do: [ :anArgumentName | 
		instVarName := anArgumentName asInstanceVariableName.
		instVarNameBlock value: instVarName.
		stream
			newLine;tab;
			nextPutAll: instVarName;
			nextPutAll: ' := ';
			nextPutAll: anArgumentName;
			nextPut: $. ].		
! !
!Message methodsFor: '*CuisUniversity-Model' stamp: 'HAW 11/12/2019 09:05:37' prior: 50624096!
createInitializeMessageDefinitionIn: stream with: argumentNames

	self selector isUnary 
		ifTrue: [ stream nextPutAll: self selector ]
		ifFalse: [ 
			self selector keywords withIndexDo: [ :keyword :index | 
				stream 
					nextPutAll: keyword;
					space;
					nextPutAll: (argumentNames at: index);
					space ]]
! !
!Message methodsFor: '*CuisUniversity-Model' stamp: 'HAW 10/8/2019 16:05:36' prior: 50624109!
createInitializeMessageWith: argumentNames forEachInstVarNameDo: instVarNameBlock 

	^ String streamContents: [ :stream |
		self createInitializeMessageDefinitionIn: stream with: argumentNames.
		stream newLine;tab.		
		self writeShouldBeImplementedOn: stream.
		self createInitializationMessageAssigmentsIn: stream with: argumentNames forEachInstVarNameDo: instVarNameBlock ]! !
!Message methodsFor: '*CuisUniversity-Model' stamp: 'HAW 10/8/2019 15:28:48' prior: 50624124!
createInstanceCreationMessageFor: aClass

	| instanceCreationMessageString |
	
	^ String streamContents: [ :stream |
		self writeMessageNameOn: stream.
		instanceCreationMessageString := stream contents.
		stream newLine; tab; nextPutAll: '"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"';newLine; tab.
		self writeShouldBeImplementedOn: stream.
		stream
			newLine; tab;
			nextPutAll: '^self new initialize', instanceCreationMessageString capitalized ]! !
!Message methodsFor: '*CuisUniversity-Model' stamp: 'HAW 10/5/2022 12:31:40' prior: 50624142!
createStubMethodFor: aClass with: argumentNames 

	^ String streamContents: [ :stream |
		self writeMessageNameOn: stream with: argumentNames.
		stream newLine; tab.
		self writeShouldBeImplementedOn: stream.
		(self isGetterFor: aClass) ifTrue: [ self addGetterCodeOn: stream ].
		(self isSetterFor: aClass) ifTrue: [ self addSetterCodeOn: stream ].
	]! !
!Message methodsFor: '*CuisUniversity-Model' stamp: 'HAW 10/7/2019 14:49:23' prior: 50624156!
isInitializer 

	^selector beginsWith: 'initialize'.! !
!Message methodsFor: '*CuisUniversity-Model' stamp: 'HAW 2/10/2023 15:42:28' prior: 50624161!
writeMessageNameOn: aStream with: argumentNames 

	self selector keywords withIndexDo: [ :keyword :index |
		aStream nextPutAll: keyword.
		self hasArguments ifTrue: [ self writeOn: aStream argumentNameAt: index from: argumentNames ]].
	
	! !
!Message methodsFor: '*CuisUniversity-Model' stamp: 'HAW 2/10/2023 15:42:10' prior: 50624172!
writeOn: aStream argumentNameAt: index from: argumentNames  

	| argumentName |
	
	argumentName _ argumentNames at: index.
	
	aStream 
		nextPutAll: ' '; 
		nextPutAll: argumentName; 
		space
	
	! !
!Message class methodsFor: '*CuisUniversity-Model' stamp: 'HAW 10/5/2022 12:41:12' prior: 50624181!
renameMeIdentifier

	^'aRenameMe'! !
!CharacterSequence methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/13/2023 10:09:44' prior: 50624185!
asInstanceVariableName
	
	self hasAnPrefix ifTrue: [ ^self uncapitalizedRemovingFirst: 2 ].
	self hasAPrefix ifTrue: [ ^self uncapitalizedRemovingFirst: 1 ].
	self hasUnPrefix ifTrue: [ ^self uncapitalizedRemovingFirst: 2 ].
	self hasUnaPrefix ifTrue: [ ^self uncapitalizedRemovingFirst: 3 ].
	
	^self asInstanceVariableNameUncapitilized 
	! !
!CharacterSequence methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/13/2023 10:09:50' prior: 50624199!
asInstanceVariableNameUncapitilized 

	| instVarName |
	
	instVarName := self uncapitalized.
	^self = instVarName 
		ifTrue: [ instVarName, '_CHANGE_ME' ]
		ifFalse: [ instVarName ]! !
!CharacterSequence methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/13/2023 10:09:55' prior: 50624208!
continuesWithUppercaseAfterPrefix: aPrefix
	
	^(self beginsWith: aPrefix) and: [ self size > aPrefix size and: [ (self at: aPrefix size + 1) isUppercase ]]! !
!CharacterSequence methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/13/2023 10:10:01' prior: 50624216!
hasAPrefix
	
	^self continuesWithUppercaseAfterPrefix: 'a'! !
!CharacterSequence methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/13/2023 10:10:07' prior: 50624221!
hasAnPrefix
	
	^self continuesWithUppercaseAfterPrefix: 'an'! !
!CharacterSequence methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/13/2023 10:10:13' prior: 50624226!
hasUnPrefix

	^self continuesWithUppercaseAfterPrefix: 'un'! !
!CharacterSequence methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/13/2023 10:10:18' prior: 50624231!
hasUnaPrefix
	
	^self continuesWithUppercaseAfterPrefix: 'una'! !
!CharacterSequence methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/13/2023 10:10:24' prior: 50624236!
uncapitalizedRemovingFirst: numberOfChars
	
	^(self allButFirst: numberOfChars) uncapitalized ! !
!Parser methodsFor: '*CuisUniversity-Model' stamp: 'HAW 12/23/2019 12:22:55' prior: 50624242!
performInteractiveChecks: aMethodNode

	self
		warnIfPossibilityOfSelfRecursion: aMethodNode;
		declareUndeclaredTemps: aMethodNode;
		removeUnusedTempsOf: aMethodNode ! !
!Parser methodsFor: '*CuisUniversity-Model' stamp: 'RNG 1/19/2018 20:46:19' prior: 50624250!
possibleSelfRecursionWarningMessage: aSelector

	^ 'Warning: possibility of infinite recursion.'
	, String crString ,
	'Sending ' , aSelector printString
	, ' to self inside the method body'! !
!Parser methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/7/2019 15:02:24' prior: 50624259!
warnIfPossibilityOfSelfRecursion: aMethodNode

	^ aMethodNode sendsRecursivelyToSelf ifTrue: [
		| answer |
		answer := PopUpMenu
			confirm: (self possibleSelfRecursionWarningMessage: aMethodNode selector)
			trueChoice: 'Ignore and continue'
			falseChoice: 'Change'
			 icons: #(acceptIcon cancelIcon).
		answer ifFalse: [ self fail ]
	]! !
!ParseNode methodsFor: '*CuisUniversity-Model' stamp: 'RNG 12/31/2017 19:10:30' prior: 50624273!
sendsMessageToSelf: aSelector

	^ false! !
!ParseNode methodsFor: '*CuisUniversity-Model' stamp: 'RNG 12/31/2017 19:06:07' prior: 50624277!
sendsRecursivelyToSelf

	^ false! !
!BlockNode methodsFor: '*CuisUniversity-Model' stamp: 'RNG 12/31/2017 19:11:55' prior: 50624282 overrides: 50648989!
sendsMessageToSelf: aSelector

	^ self statements anySatisfy: [ :statementNode | statementNode sendsMessageToSelf: aSelector ]! !
!MethodNode methodsFor: '*CuisUniversity-Model' stamp: 'RNG 12/31/2017 19:10:04' prior: 50624290 overrides: 50648994!
sendsRecursivelyToSelf

	^ self body sendsMessageToSelf: self selector! !
!VariableNode methodsFor: '*CuisUniversity-Model' stamp: 'HAW 1/27/2023 11:26:06' prior: 50624295!
argumentNameForNewMessageSentFrom: aSender

	| argumentName |
	
	argumentName := self isPseudoVariable
		ifTrue: [ self pseudoVariableNameIn: aSender ]
		ifFalse: [ self name ].
	
	^ (aSender receiver class definesInstanceVariableNamedInHierarchy: argumentName) 
		ifTrue: [ argumentName article, argumentName capitalized ]
		ifFalse: [ argumentName ]
	! !
!VariableNode methodsFor: '*CuisUniversity-Model' stamp: 'HAW 11/30/2022 18:23:27' prior: 50624309!
isPseudoVariable

	^ self isFalsePseudoVariable
		or: [ self isTruePseudoVariable
		or: [ self isSelfPseudoVariable
		or: [ self isSuperPseudoVariable
		or: [ self isThisContextPseudoVariable
		or: [ self isNilPseudoVariable ]]]]]! !
!VariableNode methodsFor: '*CuisUniversity-Model' stamp: 'HAW 11/30/2022 18:29:22' prior: 50624319!
pseudoVariableNameIn: aContext

	(self isSelfPseudoVariable or: [ self isSuperPseudoVariable] ) ifTrue: [ ^aContext receiver argumentName ].
	(self isFalsePseudoVariable or: [ self isTruePseudoVariable]) ifTrue: [ ^ 'aBoolean' ].
	self isThisContextPseudoVariable ifTrue: [ ^ 'aMethodContext' ].
	
	^'anObject'! !
!VariableNode class methodsFor: '*CuisUniversity-Model' stamp: 'RNG 1/19/2018 20:50:48' prior: 50624332!
named: aString 

	^ self new name: aString; yourself! !
!MessageNode methodsFor: '*CuisUniversity-Model' stamp: 'HAW 3/14/2019 11:13:47' prior: 50624337 overrides: 50648989!
sendsMessageToSelf: aSelector

	^ self receiver referencesSelf and: [ self selector isNamed: aSelector ]! !
!PopUpMenu class methodsFor: '*CuisUniversity-Model' stamp: 'HAW 3/24/2020 17:10:15' prior: 50624344 overrides: 50648559!
informBlockingUI: aStringToShow

	(self labels: ' OK ' icons: #(emblemImportantIcon)) startUpWithCaption: aStringToShow ! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:44'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:44'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04'!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:45'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:45'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:46'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:46'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:47'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:47'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' overrides: 50649473!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50649477!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' overrides: 50649482!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50649486!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' overrides: 50649465!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50649469!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:48'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:48'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:48'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:48'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' overrides: 50649477!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50649482!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50649473!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50649465!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50649469!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50649486!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50649714!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50649718!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50649714!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50649718!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:49'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #TransactionTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:50'!
TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransactionTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:50'!
TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransactionTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:01:39'!
test01

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	senderAccount transfer: 100 to: receiverAccount.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:02:06'!
transfer: aRenameMe1 to: receiverAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:02:27' prior: 50649852!
transfer: anAmountToTransfer to: anAccountToTransferTo

	 
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:03:57' prior: 50649858!
transfer: anAmountToTransfer to: anAccountToTransferTo

	Withdraw register: anAmountToTransfer on: self.
	Deposit register: anAmountToTransfer on: anAccountToTransferTo.
	
	 
	! !

!classRenamed: #TransactionTest as: #TransferenceTest stamp: 'sf 5/31/2023 23:48:50'!
Smalltalk renameClassNamed: #TransactionTest as: #TransferenceTest!

!classRenamed: #TransferenceTest as: #TransferTest stamp: 'sf 5/31/2023 23:48:50'!
Smalltalk renameClassNamed: #TransferenceTest as: #TransferTest!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:50'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:50'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:12:57' prior: 50649840!
test01

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !
!Transfer methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:13:32'!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	! !

!methodRemoval: ReceptiveAccount #transfer:to: stamp: 'sf 5/31/2023 23:48:50'!
transfer: anAmountToTransfer to: anAccountToTransferTo

	Withdraw register: anAmountToTransfer on: self.
	Deposit register: anAmountToTransfer on: anAccountToTransferTo.
	
	 
	!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:14:09' prior: 50649907!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	Withdraw register: aTransferValue on: aReceiverAccount.
	Deposit register: aTransferValue on: aSenderAccount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:14:15' prior: 50649921!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	Withdraw register: aTransferValue on: aSenderAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:19:22'!
test02

	| senderAccount receiverAccount transfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	transfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: transfer withdrawalLeg transfer equals: transfer! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:20:03' prior: 50649938!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:20:08' prior: 50649950!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:50'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:20:30' prior: 50649930!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := Withdraw register: aTransferValue on: aSenderAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:20:43'!
withdrawalLeg

	^ withdrawalLeg! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:21:08'!
transfer

	^ self! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:50'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:50'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:23:57' prior: 50649982!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andReceiver: aReceiverAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:50'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:24:46'!
from: aTransfer withSender: aSenderAccount andReceiver: aReceiverAccount

	parentTransfer := aTransfer.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:26:29' prior: 50650014!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	Deposit register: aTransferValue on: aReceiverAccount.! !

!methodRemoval: WithdrawalLeg #from:withSender:andReceiver: stamp: 'sf 5/31/2023 23:48:50'!
from: aTransfer withSender: aSenderAccount andReceiver: aReceiverAccount

	parentTransfer := aTransfer.
	!
!WithdrawalLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:26:44'!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:27:14' prior: 50650055!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	Withdraw register: aTransferValue on: aSenderAccount.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:28:02' overrides: 50649995!
transfer

	^ parentTransfer! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:28:45' prior: 50649962!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.! !

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:50'!
Transfer subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:50'!
Transfer subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:50'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:29:23' prior: 50650039!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	depositLeg := DepositLeg new from: self withReceiver: aReceiverAccount andValue: aTransferValue.! !
!DepositLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:29:49'!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.

! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:30:07' prior: 50650121!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	Deposit register: aTransferValue on: aReceiverAccount.
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:30:21' overrides: 50649995!
transfer

	^ parentTransfer
! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:30:46' prior: 50650074!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:30:56'!
test03

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer transferLeg transfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:31:15' prior: 50650153!
test03

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:31:26'!
depositLeg

	^ depositLeg! !

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:51'!
Transfer subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:33:31' prior: 50650128!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:51'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:33:43' prior: 50650061!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:34:34'!
transaction

	^ transaction
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:34:39' prior: 50650070 overrides: 50649995!
transfer

	^ transaction! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:07'!
test01ATransactionModifiesBothAccountsBalances

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !

!methodRemoval: TransferTest #test01 stamp: 'sf 5/31/2023 23:48:51'!
test01

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:41'!
test02AWithdrawalKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.! !

!methodRemoval: TransferTest #test02 stamp: 'sf 5/31/2023 23:48:51'!
test02

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg transfer equals: aTransfer.!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:53'!
test03ADepositKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.! !

!methodRemoval: TransferTest #test03 stamp: 'sf 5/31/2023 23:48:51'!
test03

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg transfer equals: aTransfer.!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:38:47'!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer value equals: 100.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:51'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:51'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:51'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:51'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:51'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:51'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:04' prior: 50650206!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.
	value := aTransferValue.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:10' prior: 50650358!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	value := aTransferValue.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.
	! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:25' overrides: 16902254!
value
	
	^ value
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:40:33' overrides: 16902254!
value

	self subclassResponsibility.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:40:55' prior: 50650297!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:42:37' prior: 50650219 overrides: 50649995!
transfer

	^ parentTransfer ! !

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:51'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:51'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
AccountTransaction subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
AccountTransaction subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: WithdrawalLeg #value stamp: 'sf 5/31/2023 23:48:52'!
value
	
	^ value
	!

!methodRemoval: Withdraw #value stamp: 'sf 5/31/2023 23:48:52'!
value

	^ value!

!methodRemoval: Deposit #value stamp: 'sf 5/31/2023 23:48:52'!
value

	^ value!
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/30/2023 17:48:18' prior: 50649714 overrides: 16902254!
value 

	^ value ! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:48:41' prior: 50650386!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:49:08' prior: 50650189!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	value := aTransferValue.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
	
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:50:06' overrides: 50650491!
value

	parentTransfer value.
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:50:13' overrides: 50650491!
value

	parentTransfer value.! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:20' prior: 50650491 overrides: 16902254!
value 

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:40' overrides: 50650575!
value

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:47' overrides: 50650575!
value

	^ value! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:51:20' prior: 50650382 overrides: 16902254!
value

	^ value.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:51:29' prior: 50650110!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	depositLeg := DepositLeg new from: self withReceiver: aReceiverAccount andValue: aTransferValue.! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:52:04' prior: 50650565 overrides: 50650575!
value

	^ parentTransfer value.
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:52:08' prior: 50650570 overrides: 50650575!
value

	^ parentTransfer value.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:52:21'!
test04TransferLegsKnowTheirValue

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.! !

!methodRemoval: TransferTest #test04 stamp: 'sf 5/31/2023 23:48:52'!
test04

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:07'!
parentTransfer

	^ parentTransfer
! !

!methodRemoval: DepositLeg #transfer stamp: 'sf 5/31/2023 23:48:52'!
transfer

	^ parentTransfer
!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:20'!
parentTransfer

	^ parentTransfer ! !

!methodRemoval: WithdrawalLeg #transfer stamp: 'sf 5/31/2023 23:48:52'!
transfer

	^ parentTransfer !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:28' prior: 50650273!
test03ADepositKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg parentTransfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:34' prior: 50650248!
test02AWithdrawalKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg parentTransfer equals: aTransfer.! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:54:36' prior: 50650509!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
	
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:54:40' prior: 50650368!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.
	! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
TestCase subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
TestCase subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:52'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'sf 5/31/2023 23:48:53'!
TestCase subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:02:45'!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	"accountSummary := AccountSummary new ofAccount: account."
	
	self assert: accountSummary print equals: (OrderedCollection with: 'Balance = 0')
	! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'no messages' stamp: 'SF 5/30/2023 18:03:11' overrides: 16902957!
print

	^'Balance = 0'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:03:14' prior: 50650773 overrides: 16902957!
print

	^ 'Balance = 0'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:03:29' prior: 50650778 overrides: 16902957!
print

	^ OrderedCollection with: 'Balance = 0'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:03:57'!
ofAccount: anAccount
! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:04:06' prior: 50650748!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: accountSummary print equals: (OrderedCollection with: 'Balance = 0')
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:05:51'!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: accountSummary print equals: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 0')
	! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:23:39' prior: 50650788!
ofAccount: anAccount

	account := anAccount ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:23:42' prior: 50650822!
ofAccount: anAccount

	account := anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:27:11' prior: 50650783 overrides: 16902957!
print

	^ account printTransactions! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:30:30'!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		aTransaction appendToSummary: printedTransactions 
		].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:36:21' prior: 50650837!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [printedTransactions add: 'Depósito por ', aTransaction value asString, '.'].
		].! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:37:23' prior: 50650833 overrides: 16902957!
print

	^ account printTransactions add: 'Balance: ', account balance asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:37:46' prior: 50650858 overrides: 16902957!
print

	^ account printTransactions add: ('Balance: ', account balance asString).! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:38:14' prior: 50650865 overrides: 16902957!
print

	^ (account printTransactions) add: ('Balance: ', account balance asString).! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:39:39' prior: 50650872 overrides: 16902957!
print

	^ account printTransactions.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:40:29' prior: 50650879 overrides: 16902957!
print

	^ (account printTransactions) add: 'test'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:41:00' prior: 50650884 overrides: 16902957!
print

	^ (account printTransactions) add: 'Balance: ', account balance.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:41:19' prior: 50650890 overrides: 16902957!
print

	^ (account printTransactions) add: 'Balance: ', account balance asString .! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:41:20' prior: 50650897 overrides: 16902957!
print

	^ (account printTransactions) add: 'Balance: ', account balance asString.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:41:48' prior: 50650802!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: accountSummary print equals: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100')
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:42:07' prior: 50650910!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:42:28' prior: 50650904 overrides: 16902957!
print

	^ (account printTransactions) add: ('Balance: ', account balance asString).! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:42:48' prior: 50650935 overrides: 16902957!
print

	^ (account printTransactions) add: ('Balance = ', account balance asString).! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:43:47' prior: 50650846!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [printedTransactions add: ('Depósito por ', aTransaction value asString, '.')].
		].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:44:25' prior: 50650948!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [printedTransactions add: ('Depósito por ', (aTransaction value asString), '.')].
		].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:45:17' prior: 50650959!
printTransactions

	^transactions inject: OrderedCollection new into: [ 
		:printedTransactions :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: ['Depósito por ', (aTransaction value asString), '.'].
		].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:46:21' prior: 50650970!
printTransactions
	
	| res |
	res := OrderedCollection new.
	^transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:46:28' prior: 50650980!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		].
	^res.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:47:01' prior: 50650792!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:47:01' prior: 50651000!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/30/2023 18:42:07' prior: 50650922!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50649088!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04' prior: 50649094!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50649105!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50649127!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50649134!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50649145!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50649173!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50649179!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50649202!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50649235!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50649253!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50649274!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50649292!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50649311!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50649340!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50649378!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50649386!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50649395!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50649405!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50649415!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54' prior: 50649428!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24' prior: 50649440!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:07' prior: 50650222!
test01ATransactionModifiesBothAccountsBalances

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:34' prior: 50650680!
test02AWithdrawalKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg parentTransfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:28' prior: 50650666!
test03ADepositKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg parentTransfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:52:21' prior: 50650622!
test04TransferLegsKnowTheirValue

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50649465!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50649469!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50649473!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50649477!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50649482!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50649486!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:53'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50649506!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50649511!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50649515!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50649519!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50649526!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50649533 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50649539 overrides: 50651530!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50649545 overrides: 50651535!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50649553 overrides: 50651541!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50649562 overrides: 50651546!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50649566!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50649573 overrides: 50651520!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50649580 overrides: 50651525!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50649589!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50649597!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50649604!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55' prior: 50649619!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50649625!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50649630!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50649653 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' prior: 50649659 overrides: 50651535!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 18:46:28' prior: 50650990!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		].
	^res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50649665!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50649671 overrides: 50651541!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50649676 overrides: 50651530!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50649683 overrides: 50651520!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50649689 overrides: 50651525!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50649694 overrides: 50651546!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:23:42' prior: 50650827!
ofAccount: anAccount

	account := anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 18:42:48' prior: 50650942 overrides: 16902957!
print

	^ (account printTransactions) add: ('Balance = ', account balance asString).! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:20' prior: 50650575 overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50649718!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50649733!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50649755!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:40' prior: 50650579 overrides: 50651826!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50649764 overrides: 50651831!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50649778!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:54:36' prior: 50650694!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
	
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:07' prior: 50650650!
parentTransfer

	^ parentTransfer
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:34:34' prior: 50650214!
transaction

	^ transaction
! !
!DepositLeg methodsFor: 'value' stamp: 'SF 5/30/2023 17:52:04' prior: 50650613 overrides: 50651826!
value

	^ parentTransfer value.
! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50649798!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:47' prior: 50650583 overrides: 50651826!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50649807 overrides: 50651831!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50649821!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
AccountTransaction subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
AccountTransaction subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:54:40' prior: 50650703!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.
	! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:20' prior: 50650658!
parentTransfer

	^ parentTransfer ! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:52:08' prior: 50650618 overrides: 50651826!
value

	^ parentTransfer value.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:54'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:31:26' prior: 50650177!
depositLeg

	^ depositLeg! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:51:29' prior: 50650600!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	depositLeg := DepositLeg new from: self withReceiver: aReceiverAccount andValue: aTransferValue.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:21:08' prior: 50649995!
transfer

	^ self! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:51:20' prior: 50650596 overrides: 16902254!
value

	^ value.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:20:43' prior: 50649991!
withdrawalLeg

	^ withdrawalLeg! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:22:55' prior: 50651804 overrides: 16902957!
print
	
	| res |
	res := account printTransactions.
	res add: 'Balance = ', account balance asString.
	^ res.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:23:39'!
test03

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100') equals: accountSummary print
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:24:09' prior: 50651736!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		].
	^res.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:27:39'!
test04

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: senderAccount.
	
	self assert: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:28:05' prior: 50652083!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		].
	^res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:28:19' prior: 50652114!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de', (aTransaction value asString), '.')].
		].
	^res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:28:30' prior: 50652132!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de ', (aTransaction value asString), '.')].
		].
	^res.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:29' prior: 50652037!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	depositLeg := DepositLeg new from: self withReceiver: aReceiverAccount andValue: aTransferValue.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:36' prior: 50651999!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:44'!
from: aTransfer

	parentTransfer := aTransfer.
	! !

!methodRemoval: WithdrawalLeg #from:withSender:andValue: stamp: 'sf 5/31/2023 23:48:55'!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:31:55'!
from: aTransfer

	parentTransfer := aTransfer.
	
! !

!methodRemoval: DepositLeg #from:withReceiver:andValue: stamp: 'sf 5/31/2023 23:48:55'!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
	
!
!Transfer methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:08' prior: 50652168!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new from: self.
	depositLeg := DepositLeg new from: self.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:17' prior: 50652214!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new fromTransfer: self.
	depositLeg := DepositLeg new fromTransfer: self.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:24'!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
	! !

!methodRemoval: WithdrawalLeg #from: stamp: 'sf 5/31/2023 23:48:55'!
from: aTransfer

	parentTransfer := aTransfer.
	!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:31'!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
	
! !

!methodRemoval: DepositLeg #from: stamp: 'sf 5/31/2023 23:48:55'!
from: aTransfer

	parentTransfer := aTransfer.
	
!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:33:35' overrides: 50651831!
affectBalance: aBalance

	^aBalance + self value ! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:33:48' overrides: 50651831!
affectBalance: aBalance

	^aBalance - self value! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:34:48'!
test05

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:35:19' prior: 50652150!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: DepositLeg) ifTrue: [res add: ('Entrada por transferencia de ', (aTransaction value asString), '.')].
		].
	^res.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:35:37' prior: 50652265!
test05

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:39:06' prior: 50652282!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		
		"(aTransaction isKindOf: Deposit) ifTrue: [res add: ('Depósito por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: Withdraw) ifTrue: [res add: ('Extracción por ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: WithdrawalLeg) ifTrue: [res add: ('Salida por transferencia de ', (aTransaction value asString), '.')].
		(aTransaction isKindOf: DepositLeg) ifTrue: [res add: ('Entrada por transferencia de ', (aTransaction value asString), '.')]."
		].
	^res.! !
!AccountTransaction methodsFor: 'value' stamp: 'sf 5/31/2023 15:39:16'!
asAccountSummaryEntry

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 15:40:05' overrides: 50652344!
asAccountSummaryEntry

	^ 'Depósito por ', (self value asString), '.'! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 15:40:29' prior: 50652349 overrides: 50652344!
asAccountSummaryEntry

	^ 'Depósito por ', (value asString), '.'! !
!DepositLeg methodsFor: 'value' stamp: 'sf 5/31/2023 15:41:09' overrides: 50652344!
asAccountSummaryEntry

	^ 'Entrada por transferencia de ', (self value asString), '.'
! !
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 15:41:47' overrides: 50652344!
asAccountSummaryEntry
	
	^ 'Salida por transferencia de ', (value asString), '.'! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:42:09' overrides: 50652344!
asAccountSummaryEntry
	
	^ 'Entrada por transferencia de ', (self value asString), '.'! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:42:28' prior: 50652372 overrides: 50652344!
asAccountSummaryEntry
	
	^ 'Salida por transferencia de ', (self value asString), '.'! !
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 15:43:06' prior: 50652366 overrides: 50652344!
asAccountSummaryEntry
	
	^ 'Extracción por ', (value asString), '.'! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 15:43:24' prior: 50652321!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	^res.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:45:55'!
test06

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:46:55'!
test07

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:48:15' prior: 50652399!
test06

	| emptyPortfolio accountSummary |

	
	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:48:47' prior: 50652434!
test06

	| emptyPortfolio accountSummary |

	
	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:48:57' prior: 50652446!
test06

	| emptyPortfolio accountSummary |

	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:49:04' prior: 50652415!
test07

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	"self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print"
	! !
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:49:49'!
printTransactions

	^ OrderedCollection with: 'Balance = 0'! !
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:50:49' prior: 50652486!
printTransactions! !
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:51:19' prior: 50652491!
printTransactions

	^ OrderedCollection new.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:51:57' prior: 50652468!
test07

	| simplePortfolio simplePortfolioAccount simplePortfolioAccountDeposit accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:52:10' prior: 50652500!
test07

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:53:19' prior: 50652495!
printTransactions

	
	accounts do: [ :anAccount
		
		]
	
	"res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	^res."
	^ OrderedCollection new.! !
!Portfolio methodsFor: 'composition' stamp: 'sf 5/31/2023 15:54:18' prior: 50652536!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	^ res.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:54:51' prior: 50652519!
test07

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:55:23'!
test01SummaryOfEmptyAccountOnlyShowsBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test01 stamp: 'sf 5/31/2023 23:48:56'!
test01

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:55:53'!
test02SummaryOfAccountWithDepositShowsDepositAndBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test02 stamp: 'sf 5/31/2023 23:48:56'!
test02

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:56:12'!
test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test03 stamp: 'sf 5/31/2023 23:48:56'!
test03

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:22'!
test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: senderAccount.
	
	self assert: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test04 stamp: 'sf 5/31/2023 23:48:56'!
test04

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: senderAccount.
	
	self assert: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:40'!
test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test05 stamp: 'sf 5/31/2023 23:48:56'!
test05

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:59'!
test06SummaryOfEmptyPortfolioOnlyShowsBalance

	| emptyPortfolio accountSummary |

	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test06 stamp: 'sf 5/31/2023 23:48:56'!
test06

	| emptyPortfolio accountSummary |

	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:59:15'!
test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!methodRemoval: AccountSummaryTest #test07 stamp: 'sf 5/31/2023 23:48:56'!
test07

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:56'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:56'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:56'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:56'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'no messages' stamp: 'sf 5/31/2023 16:04:21'!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.! !
!TransferNet methodsFor: 'no messages' stamp: 'sf 5/31/2023 16:04:30'!
ofAccount: anAccount! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:04:36' overrides: 16902957!
print

	^ 0! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:06:05'!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:57'!
Object subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:06:32' prior: 50652801!
ofAccount: anAccount

	account := anAccount.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:06:47' prior: 50652805 overrides: 16902957!
print

	^ account balance.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:07:03'!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:07:19' prior: 50652840!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:09:53'!
transferNet
	
	| res |
	res := 0.
	transactions do:  [ :aTransaction | 
		res := aTransaction affectTransferNet: res.
		].
	^res.! !
!AccountTransaction methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:14'!
affectTransferNet: aTransferNetValue

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:32' overrides: 50652876!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.! !
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:36' overrides: 50652876!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:07' overrides: 50652876!
affectTransferNet: aTransferNetValue

	^aTransferNetValue + self value ! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:26' overrides: 50652876!
affectTransferNet: aTransferNetValue

	^aTransferNetValue - self value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:35' overrides: 16902254!
value

	^ account balance.! !

!methodRemoval: TransferNet #print stamp: 'sf 5/31/2023 23:48:57'!
print

	^ account balance.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:42' prior: 50652793!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet value.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:49' prior: 50652809!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet value.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:52' prior: 50652854!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet value.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:12:20' prior: 50652904 overrides: 16902254!
value

	^ account transferNet.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:14:09'!
test04

	| emptyPortfolio transfernet |

	emptyPortfolio := Portfolio new.
	
	transfernet := TransferNet new ofAccount: emptyPortfolio.
	
	self assert: 0 equals: transfernet value.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:14:52'!
transferNet

	^0! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:18:10'!
test05

	| simplePortfolio senderAccount receiverAccount transfernet |

	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	simplePortfolio := Portfolio with: senderAccount.
	
	transfernet := TransferNet new ofAccount: simplePortfolio.
		
	self assert: -100 equals: transfernet value! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:19:09' prior: 50652546!
printTransactions

	| res |
	res := 0.
	accounts do: [ :anAccount |
		res := anAccount affectTransferNet: res.
		].
	^ res.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:20:28' prior: 50652983!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	^ res.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:21:11' prior: 50652964!
transferNet

	| res |
	res := 0.
	accounts do: [ :anAccount |
		res := res + anAccount transferNet.
		].
	^ res.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:22:34' prior: 50652064 overrides: 16902957!
print
	
	| res |
	res := account printTransactions.
	^ res.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:22:43' prior: 50653006 overrides: 16902957!
print
	
	^ account printTransactions.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:22:55' prior: 50652391!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	res add: 'Balance = ', self balance asString.
	^res.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:23:10' prior: 50652990!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:24:07' prior: 50653027!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		res removeLast.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:25:05' prior: 50653017!
printTransactions
	
	| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:25:27'!
printBalance

	^ OrderedCollection with: 'Balance = ', self balance asString.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:25:52' prior: 50653036!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:26:39'!
printTransactionsAndBalance
	
	^ self printTransactions addAll: self printBalance ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:27:12' prior: 50653012 overrides: 16902957!
print
	
	^ account printTransactionsAndBalance.
	! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:27:41'!
printTransactionsAndBalance

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !

!methodRemoval: Portfolio #printTransactions stamp: 'sf 5/31/2023 23:48:58'!
printTransactions

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:28:57' prior: 50653069!
printTransactionsAndBalance
	
	| res |
	res := self printTransactions.
	res addAll: self printBalance.
	^ res.! !

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #TransferNet
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #TransferNet
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'no messages' stamp: 'sf 5/31/2023 16:32:25'!
ofAccount: anAccount

	account := anAccount.! !

!methodRemoval: AccountSummary #ofAccount: stamp: 'sf 5/31/2023 23:48:58'!
ofAccount: anAccount

	account := anAccount.!

!methodRemoval: TransferNet #ofAccount: stamp: 'sf 5/31/2023 23:48:58'!
ofAccount: anAccount

	account := anAccount.!
!Report methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:32:46' overrides: 16902957!
print

	self subclassResponsibility.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:01' overrides: 50653236!
print

	^ account transferNet.! !

!methodRemoval: TransferNet #value stamp: 'sf 5/31/2023 23:48:58'!
value

	^ account transferNet.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:17' prior: 50652912!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:20' prior: 50652921!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:23' prior: 50652935!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:25' prior: 50652955!
test04

	| emptyPortfolio transfernet |

	emptyPortfolio := Portfolio new.
	
	transfernet := TransferNet new ofAccount: emptyPortfolio.
	
	self assert: 0 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:27' prior: 50652968!
test05

	| simplePortfolio senderAccount receiverAccount transfernet |

	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	simplePortfolio := Portfolio with: senderAccount.
	
	transfernet := TransferNet new ofAccount: simplePortfolio.
		
	self assert: -100 equals: transfernet print! !

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:58'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
ReportTest subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
ReportTest subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
ReportTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
ReportTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:36:42' prior: 50653046!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction |
		report add: aTransaction asAccountSummaryEntry.
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:37:24' prior: 50653358!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :aTransaction :report |
		report add: aTransaction asAccountSummaryEntry.
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:37:54' prior: 50653371!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction  |
		report add: aTransaction asAccountSummaryEntry.
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:38:02' prior: 50653384!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction  |
		aTransaction asAccountSummaryEntry.
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:39:37' prior: 50653397!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions inject: OrderedCollection new into: [ :report :aTransaction  |
		report add: aTransaction asAccountSummaryEntry.
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:41:44' prior: 50653410!
printTransactions
	
	"| res |
	res := OrderedCollection new.
	transactions do:  [ :aTransaction | 
		res add: aTransaction asAccountSummaryEntry.
		].
	
	^res."
	
	^ transactions collect: [ :aTransaction | aTransaction asAccountSummaryEntry ].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:42:02' prior: 50653423!
printTransactions
	
	^ transactions collect: [ :aTransaction | aTransaction asAccountSummaryEntry ].! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50651063!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04' prior: 50651069!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50651080!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50651103!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50651110!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50651121!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50651149!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50651155!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50651178!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50651212!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50651230!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50651252!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50651271!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50651291!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50651320!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50651358!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50651366!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50651375!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50651386!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50651396!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54' prior: 50651410!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24' prior: 50651423!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
ReportTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
ReportTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:55:23' prior: 50652570!
test01SummaryOfEmptyAccountOnlyShowsBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:55:53' prior: 50652590!
test02SummaryOfAccountWithDepositShowsDepositAndBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:56:12' prior: 50652615!
test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:22' prior: 50652640!
test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: senderAccount.
	
	self assert: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:40' prior: 50652673!
test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:59' prior: 50652707!
test06SummaryOfEmptyPortfolioOnlyShowsBalance

	| emptyPortfolio accountSummary |

	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:59:15' prior: 50652729!
test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
ReportTest subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
ReportTest subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:17' prior: 50653249!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:20' prior: 50653258!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:23' prior: 50653272!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:25' prior: 50653287!
test04

	| emptyPortfolio transfernet |

	emptyPortfolio := Portfolio new.
	
	transfernet := TransferNet new ofAccount: emptyPortfolio.
	
	self assert: 0 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:27' prior: 50653297!
test05

	| simplePortfolio senderAccount receiverAccount transfernet |

	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	simplePortfolio := Portfolio with: senderAccount.
	
	transfernet := TransferNet new ofAccount: simplePortfolio.
		
	self assert: -100 equals: transfernet print! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:07' prior: 50651449!
test01ATransactionModifiesBothAccountsBalances

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:34' prior: 50651463!
test02AWithdrawalKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg parentTransfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:28' prior: 50651477!
test03ADepositKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg parentTransfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:52:21' prior: 50651491!
test04TransferLegsKnowTheirValue

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50651520!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50651525!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50651530!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50651535!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50651541!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50651546!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50651566!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50651571!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50651576!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50651581!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50651588!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50651596 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50651602 overrides: 50654138!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:27:41' prior: 50653080!
printTransactionsAndBalance

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.! !
!Portfolio methodsFor: 'balance' stamp: 'sf 5/31/2023 16:21:11' prior: 50652998!
transferNet

	| res |
	res := 0.
	accounts do: [ :anAccount |
		res := res + anAccount transferNet.
		].
	^ res.! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50651608 overrides: 50654143!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50651616 overrides: 50654149!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50651625 overrides: 50654154!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50651630!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50651638 overrides: 50654128!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50651645 overrides: 50654133!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50651655!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50651664!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50651672!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55' prior: 50651687!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50651693!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50651699!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:48:59'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50651723 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' prior: 50651729 overrides: 50654143!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:25:27' prior: 50653054!
printBalance

	^ OrderedCollection with: 'Balance = ', self balance asString.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:42:02' prior: 50653434!
printTransactions
	
	^ transactions collect: [ :aTransaction | aTransaction asAccountSummaryEntry ].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:28:57' prior: 50653099!
printTransactionsAndBalance
	
	| res |
	res := self printTransactions.
	res addAll: self printBalance.
	^ res.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50651747!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50651753 overrides: 50654149!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'sf 5/31/2023 16:09:53' prior: 50652869!
transferNet
	
	| res |
	res := 0.
	transactions do:  [ :aTransaction | 
		res := aTransaction affectTransferNet: res.
		].
	^res.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50651758 overrides: 50654138!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50651766 overrides: 50654128!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50651772 overrides: 50654133!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50651778 overrides: 50654154!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:14' prior: 50652876!
affectTransferNet: aTransferNetValue

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'value' stamp: 'sf 5/31/2023 15:39:16' prior: 50652344!
asAccountSummaryEntry

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:20' prior: 50651826 overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50651831!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50651847!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50651870!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:32' prior: 50652881 overrides: 50654440!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 15:40:29' prior: 50652355 overrides: 50654446!
asAccountSummaryEntry

	^ 'Depósito por ', (value asString), '.'! !
!Deposit methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:40' prior: 50651875 overrides: 50654452!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50651879 overrides: 50654457!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50651893!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:33:35' prior: 50652256 overrides: 50654457!
affectBalance: aBalance

	^aBalance + self value ! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:07' prior: 50652892 overrides: 50654440!
affectTransferNet: aTransferNetValue

	^aTransferNetValue + self value ! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:31' prior: 50652247!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
	
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:07' prior: 50651924!
parentTransfer

	^ parentTransfer
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:34:34' prior: 50651929!
transaction

	^ transaction
! !
!DepositLeg methodsFor: 'value' stamp: 'sf 5/31/2023 15:41:09' prior: 50652360 overrides: 50654446!
asAccountSummaryEntry

	^ 'Entrada por transferencia de ', (self value asString), '.'
! !
!DepositLeg methodsFor: 'value' stamp: 'SF 5/30/2023 17:52:04' prior: 50651934 overrides: 50654452!
value

	^ parentTransfer value.
! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50651954!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:36' prior: 50652886 overrides: 50654440!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.! !
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 15:43:06' prior: 50652385 overrides: 50654446!
asAccountSummaryEntry
	
	^ 'Extracción por ', (value asString), '.'! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:47' prior: 50651959 overrides: 50654452!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50651963 overrides: 50654457!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50651977!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
AccountTransaction subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
AccountTransaction subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:33:48' prior: 50652261 overrides: 50654457!
affectBalance: aBalance

	^aBalance - self value! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:26' prior: 50652898 overrides: 50654440!
affectTransferNet: aTransferNetValue

	^aTransferNetValue - self value! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:42:28' prior: 50652379 overrides: 50654446!
asAccountSummaryEntry
	
	^ 'Salida por transferencia de ', (self value asString), '.'! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:24' prior: 50652238!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
	! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:20' prior: 50652008!
parentTransfer

	^ parentTransfer ! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:52:08' prior: 50652013 overrides: 50654452!
value

	^ parentTransfer value.! !

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:32:25' prior: 50653223!
ofAccount: anAccount

	account := anAccount.! !
!Report methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:32:46' prior: 50653236 overrides: 16902957!
print

	self subclassResponsibility.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:27:12' prior: 50653076 overrides: 50654718!
print
	
	^ account printTransactionsAndBalance.
	! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:01' prior: 50653241 overrides: 50654718!
print

	^ account transferNet.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:31:26' prior: 50652033!
depositLeg

	^ depositLeg! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:17' prior: 50652226!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawalLeg new fromTransfer: self.
	depositLeg := DepositLeg new fromTransfer: self.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:21:08' prior: 50652050!
transfer

	^ self! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:51:20' prior: 50652055 overrides: 16902254!
value

	^ value.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:20:43' prior: 50652059!
withdrawalLeg

	^ withdrawalLeg! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Report subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:41:10' prior: 50654738 overrides: 50654718!
print
	
	account addTransactionsToReport: self.
	^report.
	! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:00'!
Object subclass: #Report
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 19:42:14'!
addTransactionsToReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/31/2023 19:42:31'!
addToReport: aReport

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'SF 5/31/2023 19:42:51' overrides: 50654842!
addToReport: aReport

	aReport addDeposit: self.! !
!DepositLeg methodsFor: 'value' stamp: 'SF 5/31/2023 19:43:06' overrides: 50654842!
addToReport: aReport

	aReport addDepositLeg: self.! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/31/2023 19:43:21' overrides: 50654842!
addToReport: aReport

	aReport addWithdraw: self! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:43:47' overrides: 50654842!
addToReport: aReport

	aReport addWithdrawLeg: self.! !

!classRenamed: #WithdrawalLeg as: #WithdrawLeg stamp: 'sf 5/31/2023 23:49:01'!
Smalltalk renameClassNamed: #WithdrawalLeg as: #WithdrawLeg!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:43:55' prior: 50654782!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawLeg new fromTransfer: self.
	depositLeg := DepositLeg new fromTransfer: self.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:37'!
addDeposit: aDeposit

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:43'!
addDepositLeg: aDepositLeg

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:55'!
addWithdraw: aWithdraw
	
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:45:04'!
addWithdrawLeg: aWithdrawLeg
	
	self subclassResponsibility ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:46:04' overrides: 50654884!
addDeposit: aDeposit

	report add: 'Depósito por ', aDeposit value, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:46:41' overrides: 50654889!
addDepositLeg: aDepositLeg

	report add: 'Entrada por transferencia de ', aDepositLeg value, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:47:03' overrides: 50654894!
addWithdraw: aWithdraw

	report add: 'Extracción por ', aWithdraw value, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:47:26' overrides: 50654899!
addWithdrawLeg: aWithdrawLeg

	report add: 'Salida por transferencia de ', aWithdrawLeg value, '.'.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:47:57' prior: 50654713!
ofAccount: anAccount
	account := anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:48:10' prior: 50654816 overrides: 50654718!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	^report.
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:48:21' prior: 50654937 overrides: 50654718!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 19:48:41'!
addBalanceToReport: aReport

	aReport addBalance: self balance.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:49:18'!
addBalance: aBalanceValue

	report add: 'Balance = ', aBalanceValue.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:49:55' prior: 50654944 overrides: 50654718!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	
	^report.
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:50:39' prior: 50654962 overrides: 50654718!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:09' prior: 50654956!
addBalance: aBalanceValue

	report add: 'Balance = ', aBalanceValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:27' prior: 50654905 overrides: 50654884!
addDeposit: aDeposit

	report add: 'Depósito por ', aDeposit value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:31' prior: 50654911 overrides: 50654889!
addDepositLeg: aDepositLeg

	report add: 'Entrada por transferencia de ', aDepositLeg value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:36' prior: 50654918 overrides: 50654894!
addWithdraw: aWithdraw

	report add: 'Extracción por ', aWithdraw value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:40' prior: 50654924 overrides: 50654899!
addWithdrawLeg: aWithdrawLeg

	report add: 'Salida por transferencia de ', aWithdrawLeg value asString, '.'.! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 19:53:40'!
addTransactionsToReport: aReport

	accounts do: [ :anAccount | anAccount addTransactionsToReport: aReport ].! !

!methodRemoval: ReceptiveAccount #addBalanceToReport: stamp: 'sf 5/31/2023 23:49:02'!
addBalanceToReport: aReport

	aReport addBalance: self balance.!
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 19:54:02'!
addBalanceToReport: aReport

	aReport addBalance: self balance.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:54:39' overrides: 50654884!
addDeposit: aDeposit! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:54:43' prior: 50655029 overrides: 50654884!
addDeposit: aWithdraw! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:54:50' prior: 50655034 overrides: 50654884!
addDeposit: aDeposit! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:00' overrides: 50654894!
addWithdraw: aWithdraw! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:08' overrides: 50654889!
addDepositLeg: aDepositLeg

	report add: 'Entrada por transferencia de ', aDepositLeg value asString, '.'.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:18' overrides: 50654899!
addWithdrawLeg: aWithdrawLeg

	report add: 'Salida por transferencia de ', aWithdrawLeg value asString, '.'.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:30' prior: 50654758 overrides: 50654718!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:57:27' prior: 50655062 overrides: 50654718!
print
	
	report := 0.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:57:45' prior: 50655047 overrides: 50654889!
addDepositLeg: aDepositLeg

	report + aDepositLeg value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:57:53' prior: 50655078 overrides: 50654889!
addDepositLeg: aDepositLeg

	report := report + aDepositLeg value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:58:10' prior: 50655054 overrides: 50654899!
addWithdrawLeg: aWithdrawLeg

	report := report + aWithdrawLeg value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:58:18' prior: 50655070 overrides: 50654718!
print
	
	report := 0.
	account addTransactionsToReport: self.
	^report.
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:59:07' prior: 50655090 overrides: 50654899!
addWithdrawLeg: aWithdrawLeg

	report := report - aWithdrawLeg value! !

!methodRemoval: Portfolio #printTransactionsAndBalance stamp: 'sf 5/31/2023 23:49:02'!
printTransactionsAndBalance

	| res |
	res := OrderedCollection new.
	accounts do: [ :anAccount |
		res addAll: anAccount printTransactions.
		].
	res add: 'Balance = ', self balance asString.
	^ res.!

!methodRemoval: Portfolio #transferNet stamp: 'sf 5/31/2023 23:49:02'!
transferNet

	| res |
	res := 0.
	accounts do: [ :anAccount |
		res := res + anAccount transferNet.
		].
	^ res.!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'sf 5/31/2023 23:49:02'!
transferNet
	
	| res |
	res := 0.
	transactions do:  [ :aTransaction | 
		res := aTransaction affectTransferNet: res.
		].
	^res.!

!methodRemoval: ReceptiveAccount #printTransactionsAndBalance stamp: 'sf 5/31/2023 23:49:02'!
printTransactionsAndBalance
	
	| res |
	res := self printTransactions.
	res addAll: self printBalance.
	^ res.!

!methodRemoval: ReceptiveAccount #printTransactions stamp: 'sf 5/31/2023 23:49:02'!
printTransactions
	
	^ transactions collect: [ :aTransaction | aTransaction asAccountSummaryEntry ].!

!methodRemoval: ReceptiveAccount #printBalance stamp: 'sf 5/31/2023 23:49:02'!
printBalance

	^ OrderedCollection with: 'Balance = ', self balance asString.!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50653455!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04' prior: 50653461!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50653472!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50653495!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50653502!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50653513!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50653541!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50653547!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50653570!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50653604!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50653622!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50653644!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50653663!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50653683!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50653712!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50653750!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50653758!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50653767!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50653778!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50653788!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54' prior: 50653802!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24' prior: 50653815!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
ReportTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
ReportTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:55:23' prior: 50653857!
test01SummaryOfEmptyAccountOnlyShowsBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary new ofAccount: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:55:53' prior: 50653869!
test02SummaryOfAccountWithDepositShowsDepositAndBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:56:12' prior: 50653883!
test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance

	| account accountSummary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	accountSummary := AccountSummary new ofAccount: account.
	self assert: (OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:22' prior: 50653897!
test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: senderAccount.
	
	self assert: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:40' prior: 50653915!
test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance

	| senderAccount receiverAccount accountSummary |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	accountSummary := AccountSummary new ofAccount: receiverAccount.
	
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:57:59' prior: 50653933!
test06SummaryOfEmptyPortfolioOnlyShowsBalance

	| emptyPortfolio accountSummary |

	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'sf 5/31/2023 15:59:15' prior: 50653945!
test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100') equals: accountSummary print
	! !

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
ReportTest subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
ReportTest subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:17' prior: 50653979!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:20' prior: 50653988!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:23' prior: 50654002!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:25' prior: 50654017!
test04

	| emptyPortfolio transfernet |

	emptyPortfolio := Portfolio new.
	
	transfernet := TransferNet new ofAccount: emptyPortfolio.
	
	self assert: 0 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:33:27' prior: 50654027!
test05

	| simplePortfolio senderAccount receiverAccount transfernet |

	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	simplePortfolio := Portfolio with: senderAccount.
	
	transfernet := TransferNet new ofAccount: simplePortfolio.
		
	self assert: -100 equals: transfernet print! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:02'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:37:07' prior: 50654057!
test01ATransactionModifiesBothAccountsBalances

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:34' prior: 50654071!
test02AWithdrawalKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg parentTransfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:53:28' prior: 50654085!
test03ADepositKnowsWhichTransferItsFrom

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer depositLeg parentTransfer equals: aTransfer.! !
!TransferTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:52:21' prior: 50654099!
test04TransferLegsKnowTheirValue

	| senderAccount receiverAccount aTransfer|
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	aTransfer := Transfer new from: senderAccount to: 	receiverAccount withValue: 100.

	self assert: aTransfer withdrawalLeg value equals: 100.
	self assert: aTransfer depositLeg value equals: 100.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50654128!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50654133!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50654138!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50654143!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50654149!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 19:54:02' prior: 50655023!
addBalanceToReport: aReport

	aReport addBalance: self balance.! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50654154!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50654174!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50654179!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50654184!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50654189!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50654196!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50654204 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 19:53:40' prior: 50655012!
addTransactionsToReport: aReport

	accounts do: [ :anAccount | anAccount addTransactionsToReport: aReport ].! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50654210 overrides: 50655846!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50654234 overrides: 50655851!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50654242 overrides: 50655857!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50654251 overrides: 50655867!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50654256!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50654264 overrides: 50655836!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50654271 overrides: 50655841!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50654281!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50654290!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50654298!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55' prior: 50654313!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50654319!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50654325!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50654349 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' prior: 50654355 overrides: 50655851!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 19:42:14' prior: 50654836!
addTransactionsToReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50654382!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50654388 overrides: 50655857!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50654401 overrides: 50655846!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50654409 overrides: 50655836!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50654415 overrides: 50655841!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50654421 overrides: 50655867!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/31/2023 19:42:31' prior: 50654842!
addToReport: aReport

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:14' prior: 50654440!
affectTransferNet: aTransferNetValue

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'value' stamp: 'sf 5/31/2023 15:39:16' prior: 50654446!
asAccountSummaryEntry

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:20' prior: 50654452 overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50654457!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50654473!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50654496!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'SF 5/31/2023 19:42:51' prior: 50654847 overrides: 50656121!
addToReport: aReport

	aReport addDeposit: self.! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:32' prior: 50654501 overrides: 50656126!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.! !
!Deposit methodsFor: 'value' stamp: 'sf 5/31/2023 15:40:29' prior: 50654507 overrides: 50656132!
asAccountSummaryEntry

	^ 'Depósito por ', (value asString), '.'! !
!Deposit methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:40' prior: 50654513 overrides: 50656138!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50654517 overrides: 50656143!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50654531!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:33:35' prior: 50654553 overrides: 50656143!
affectBalance: aBalance

	^aBalance + self value ! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:07' prior: 50654559 overrides: 50656126!
affectTransferNet: aTransferNetValue

	^aTransferNetValue + self value ! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:31' prior: 50654565!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
	
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:07' prior: 50654570!
parentTransfer

	^ parentTransfer
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:34:34' prior: 50654575!
transaction

	^ transaction
! !
!DepositLeg methodsFor: 'value' stamp: 'SF 5/31/2023 19:43:06' prior: 50654852 overrides: 50656121!
addToReport: aReport

	aReport addDepositLeg: self.! !
!DepositLeg methodsFor: 'value' stamp: 'sf 5/31/2023 15:41:09' prior: 50654580 overrides: 50656132!
asAccountSummaryEntry

	^ 'Entrada por transferencia de ', (self value asString), '.'
! !
!DepositLeg methodsFor: 'value' stamp: 'SF 5/30/2023 17:52:04' prior: 50654587 overrides: 50656138!
value

	^ parentTransfer value.
! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50654607!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/31/2023 19:43:21' prior: 50654857 overrides: 50656121!
addToReport: aReport

	aReport addWithdraw: self! !
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 16:10:36' prior: 50654612 overrides: 50656126!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.! !
!Withdraw methodsFor: 'value' stamp: 'sf 5/31/2023 15:43:06' prior: 50654618 overrides: 50656132!
asAccountSummaryEntry
	
	^ 'Extracción por ', (value asString), '.'! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/30/2023 17:50:47' prior: 50654624 overrides: 50656138!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50654628 overrides: 50656143!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50654642!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #WithdrawLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
AccountTransaction subclass: #WithdrawLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:03'!
AccountTransaction subclass: #WithdrawLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:43:47' prior: 50654862 overrides: 50656121!
addToReport: aReport

	aReport addWithdrawLeg: self.! !
!WithdrawLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:33:48' prior: 50654665 overrides: 50656143!
affectBalance: aBalance

	^aBalance - self value! !
!WithdrawLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:11:26' prior: 50654671 overrides: 50656126!
affectTransferNet: aTransferNetValue

	^aTransferNetValue - self value! !
!WithdrawLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:42:28' prior: 50654678 overrides: 50656132!
asAccountSummaryEntry
	
	^ 'Salida por transferencia de ', (self value asString), '.'! !
!WithdrawLeg methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 15:32:24' prior: 50654684!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
	! !
!WithdrawLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:53:20' prior: 50654689!
parentTransfer

	^ parentTransfer ! !
!WithdrawLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:52:08' prior: 50654694 overrides: 50656138!
value

	^ parentTransfer value.! !

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
Object subclass: #Report
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
Object subclass: #Report
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:09' prior: 50654977!
addBalance: aBalanceValue

	report add: 'Balance = ', aBalanceValue asString.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:37' prior: 50654884!
addDeposit: aDeposit

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:43' prior: 50654889!
addDepositLeg: aDepositLeg

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:44:55' prior: 50654894!
addWithdraw: aWithdraw
	
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:45:04' prior: 50654899!
addWithdrawLeg: aWithdrawLeg
	
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:47:57' prior: 50654931!
ofAccount: anAccount
	account := anAccount.! !
!Report methodsFor: 'as yet unclassified' stamp: 'sf 5/31/2023 16:32:46' prior: 50654718 overrides: 16902957!
print

	self subclassResponsibility.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:27' prior: 50654984 overrides: 50656425!
addDeposit: aDeposit

	report add: 'Depósito por ', aDeposit value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:31' prior: 50654991 overrides: 50656430!
addDepositLeg: aDepositLeg

	report add: 'Entrada por transferencia de ', aDepositLeg value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:36' prior: 50654999 overrides: 50656435!
addWithdraw: aWithdraw

	report add: 'Extracción por ', aWithdraw value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:51:40' prior: 50655006 overrides: 50656440!
addWithdrawLeg: aWithdrawLeg

	report add: 'Salida por transferencia de ', aWithdrawLeg value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:50:39' prior: 50654969 overrides: 50656450!
print
	
	report := OrderedCollection new.
	account addTransactionsToReport: self.
	account addBalanceToReport: self.
	^report.
	! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:54:50' prior: 50655039 overrides: 50656425!
addDeposit: aDeposit! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:57:53' prior: 50655084 overrides: 50656430!
addDepositLeg: aDepositLeg

	report := report + aDepositLeg value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:55:00' prior: 50655043 overrides: 50656435!
addWithdraw: aWithdraw! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:59:07' prior: 50655103 overrides: 50656440!
addWithdrawLeg: aWithdrawLeg

	report := report - aWithdrawLeg value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:58:18' prior: 50655096 overrides: 50656450!
print
	
	report := 0.
	account addTransactionsToReport: self.
	^report.
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:31:26' prior: 50654778!
depositLeg

	^ depositLeg! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 19:43:55' prior: 50654872!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	value := aTransferValue.
	withdrawalLeg := WithdrawLeg new fromTransfer: self.
	depositLeg := DepositLeg new fromTransfer: self.
	aSenderAccount register: withdrawalLeg.
	aReceiverAccount register: depositLeg.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:21:08' prior: 50654794!
transfer

	^ self! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:51:20' prior: 50654799 overrides: 16902254!
value

	^ value.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:20:43' prior: 50654803!
withdrawalLeg

	^ withdrawalLeg! !

!classDefinition: #AccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
TestCase subclass: #AccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
TestCase subclass: #AccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
AccountTest subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
AccountTest subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
AccountTest subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:04'!
AccountTest subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 22:36:05' prior: 50655862!
addBalanceToReport: aReport

	aReport addBalance: self balance.! !
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 22:36:11' prior: 50655867!
addedTo: aPortfolio

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:36:17' prior: 50655851!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:36:21' prior: 50655857!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'SF 5/31/2023 22:36:27' prior: 50655846!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'SF 5/31/2023 22:36:40' prior: 50655841!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'SF 5/31/2023 22:36:46' prior: 50655836!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Portfolio methodsFor: 'accounts management' stamp: 'SF 5/31/2023 22:37:02' prior: 50655887!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'SF 5/31/2023 22:37:06' prior: 50655892!
accountsIsEmpty

	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'SF 5/31/2023 22:37:10' prior: 50655897!
accountsSize

	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'SF 5/31/2023 22:37:25' prior: 50655902!
add: accountToAdd

	self assertCanAdd: accountToAdd.
	
	accounts add: accountToAdd.
	
	accountToAdd addedTo: self	! !
!Portfolio methodsFor: 'accounts management' stamp: 'SF 5/31/2023 22:37:41' prior: 50655909!
rootParents

	| rootParents |
	
	rootParents := Set new.
	
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'account management - private' stamp: 'SF 5/31/2023 22:38:10' prior: 50655983!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ]
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:38:25' prior: 50655936 overrides: 50656652!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 22:38:30' prior: 50655923!
addTransactionsToReport: aReport

	accounts do: [ :anAccount | anAccount addTransactionsToReport: aReport ].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:38:46' prior: 50656064!
addTransactionsToReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:38:51' prior: 50656077 overrides: 50656658!
transactions 

	^ transactions copy! !
!Portfolio methodsFor: 'composition' stamp: 'SF 5/31/2023 22:39:09' prior: 50655953 overrides: 50656647!
addedTo: aPortfolio 

	parents add: aPortfolio ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'SF 5/31/2023 22:39:14' prior: 50656102 overrides: 50656647!
addedTo: aPortfolio
	! !

!methodRemoval: DepositLeg #affectTransferNet: stamp: 'sf 5/31/2023 23:49:04'!
affectTransferNet: aTransferNetValue

	^aTransferNetValue + self value !

!methodRemoval: DepositLeg #asAccountSummaryEntry stamp: 'sf 5/31/2023 23:49:04'!
asAccountSummaryEntry

	^ 'Entrada por transferencia de ', (self value asString), '.'
!

!methodRemoval: AccountTransaction #asAccountSummaryEntry stamp: 'sf 5/31/2023 23:49:04'!
asAccountSummaryEntry

	self subclassResponsibility !

!methodRemoval: AccountTransaction #affectTransferNet: stamp: 'sf 5/31/2023 23:49:04'!
affectTransferNet: aTransferNetValue

	self subclassResponsibility !

!methodRemoval: WithdrawLeg #asAccountSummaryEntry stamp: 'sf 5/31/2023 23:49:04'!
asAccountSummaryEntry
	
	^ 'Salida por transferencia de ', (self value asString), '.'!

!methodRemoval: WithdrawLeg #affectTransferNet: stamp: 'sf 5/31/2023 23:49:04'!
affectTransferNet: aTransferNetValue

	^aTransferNetValue - self value!

!methodRemoval: Deposit #affectTransferNet: stamp: 'sf 5/31/2023 23:49:04'!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.!

!methodRemoval: Deposit #asAccountSummaryEntry stamp: 'sf 5/31/2023 23:49:04'!
asAccountSummaryEntry

	^ 'Depósito por ', (value asString), '.'!

!methodRemoval: Withdraw #affectTransferNet: stamp: 'sf 5/31/2023 23:49:04'!
affectTransferNet: aTransferNetValue

	^ aTransferNetValue.!

!methodRemoval: Withdraw #asAccountSummaryEntry stamp: 'sf 5/31/2023 23:49:04'!
asAccountSummaryEntry
	
	^ 'Extracción por ', (value asString), '.'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:44:41' prior: 50656500 overrides: 50656450!
print

	report := OrderedCollection new.
	
	account addTransactionsToReport: self.
	
	^report.
	! !
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 22:45:15'!
addTransactionsToReport: aReport

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'SF 5/31/2023 22:45:39'!
fillReport: aReport

	self subclassResponsibility ! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 22:45:39' overrides: 50656809!
fillReport: aReport

	accounts do: [ :anAccount | anAccount addTransactionsToReport: aReport ].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:45:39' overrides: 50656809!
fillReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:45:39' prior: 50656545 overrides: 50656450!
print
	
	report := 0.
	account fillReport: self.
	^report.
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:45:39' prior: 50656798 overrides: 50656450!
print

	report := OrderedCollection new.
	
	account fillReport: self.
	
	^report.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:45:39' prior: 50656720 overrides: 50656804!
addTransactionsToReport: aReport

	accounts do: [ :anAccount | anAccount fillReport: aReport ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:45:39' prior: 50656814 overrides: 50656809!
fillReport: aReport

	accounts do: [ :anAccount | anAccount fillReport: aReport ].! !

!methodRemoval: Account #addTransactionsToReport: stamp: 'sf 5/31/2023 23:49:05'!
addTransactionsToReport: aReport

	self subclassResponsibility !

!methodRemoval: Portfolio #addTransactionsToReport: stamp: 'sf 5/31/2023 23:49:05'!
addTransactionsToReport: aReport

	accounts do: [ :anAccount | anAccount fillReport: aReport ].!

!methodRemoval: ReceptiveAccount #addTransactionsToReport: stamp: 'sf 5/31/2023 23:49:05'!
addTransactionsToReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:46:06' prior: 50656821 overrides: 50656809!
fillReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].
	aReport addBalance: self balance.! !

!methodRemoval: Account #addBalanceToReport: stamp: 'sf 5/31/2023 23:49:05'!
addBalanceToReport: aReport

	aReport addBalance: self balance.!
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 22:46:32' prior: 50656848 overrides: 50656809!
fillReport: aReport

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	aReport addBalance: self balance.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/31/2023 22:47:39' prior: 50655653!
test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance

	| simplePortfolio simplePortfolioAccount accountSummary |

	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	accountSummary := AccountSummary new ofAccount: simplePortfolio.
		
	self assert: (OrderedCollection with: 'Depósito por 100.' with: 'Balance = 100' with: 'Balance = 100') equals: accountSummary print
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:48:05' prior: 50656828 overrides: 50656450!
print

	report := 0.
	
	account fillReport: self.
	
	^report.
	! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:48:31' prior: 50656419!
addBalance: aBalanceValue
	self subclassResponsibility ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:48:45' overrides: 50656915!
addBalance: aBalanceValue

	report add: 'Balance = ', aBalanceValue asString.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:48:58' overrides: 50656915!
addBalance: aBalanceValue! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'SF 5/31/2023 22:49:21' prior: 50655641!
test06SummaryOfEmptyPortfolioOnlyShowsBalance
	
	| emptyPortfolio accountSummary |
	
	emptyPortfolio := Portfolio new.
	
	accountSummary := AccountSummary new ofAccount: emptyPortfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary print
	! !
!Portfolio methodsFor: 'testing' stamp: 'SF 5/31/2023 22:52:25' prior: 50655958!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'account management - private' stamp: 'SF 5/31/2023 22:52:34' prior: 50655992!
assertCanAdd: accountToAdd
	
	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 22:52:42' prior: 50655930 overrides: 50656662!
balance

	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 22:52:49' prior: 50656883 overrides: 50656809!
fillReport: aReport

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	
	aReport addBalance: self balance.! !
!Portfolio methodsFor: 'testing' stamp: 'SF 5/31/2023 22:52:59' prior: 50655966 overrides: 50656671!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:53:15' prior: 50655944 overrides: 50656658!
transactions

	| transactions |
	
	transactions := OrderedCollection new.
	
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'account management - private' stamp: 'SF 5/31/2023 22:53:23' prior: 50656000!
signalCanNotAddAccount

	self error: self class canNotAddAccountErrorMessage! !
!Portfolio methodsFor: 'testing' stamp: 'SF 5/31/2023 22:53:31' prior: 50655973 overrides: 50656666!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'initialization' stamp: 'SF 5/31/2023 22:53:49' prior: 50655917 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:54:09' prior: 50656057 overrides: 50656652!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'SF 5/31/2023 22:54:35' prior: 50656082 overrides: 50656662!
balance

	^transactions
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'SF 5/31/2023 22:54:45' prior: 50656090 overrides: 50656671!
hasRegistered: aTransaction

	^ transactions includes: aTransaction
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 22:54:54' prior: 50656071!
register: aTransaction

	transactions add: aTransaction
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'SF 5/31/2023 22:55:03' prior: 50656096 overrides: 50656666!
isComposedBy: anAccount

	^ self = anAccount ! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'SF 5/31/2023 22:55:11' prior: 50656051 overrides: 16920235!
initialize

	super initialize.
	
	transactions := OrderedCollection new.! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/31/2023 22:55:31' prior: 50656121!
addToReport: aReport

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'SF 5/31/2023 22:55:36' prior: 50656143!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'value' stamp: 'SF 5/31/2023 22:55:41' prior: 50656138 overrides: 16902254!
value

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'SF 5/31/2023 22:55:52' prior: 50656187 overrides: 50657049!
addToReport: aReport

	aReport addDeposit: self.! !
!Deposit methodsFor: 'value' stamp: 'SF 5/31/2023 22:55:56' prior: 50656204 overrides: 50657060!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'SF 5/31/2023 22:56:02' prior: 50656208 overrides: 50657054!
affectBalance: aBalance

	^ aBalance + value ! !
!DepositLeg methodsFor: 'value' stamp: 'SF 5/31/2023 22:56:08' prior: 50656271 overrides: 50657049!
addToReport: aReport

	aReport addDepositLeg: self.! !
!DepositLeg methodsFor: 'value' stamp: 'SF 5/31/2023 22:56:13' prior: 50656283 overrides: 50657060!
value

	^ parentTransfer value.
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:57:05' prior: 50656266!
transaction

	^ transaction
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:57:11' prior: 50656261!
parentTransfer

	^ parentTransfer
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:57:17' prior: 50656256!
fromTransfer: aTransfer

	parentTransfer := aTransfer.
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 22:57:22' prior: 50656244 overrides: 50657054!
affectBalance: aBalance

	^aBalance + self value ! !
!Deposit methodsFor: 'initialization' stamp: 'SF 5/31/2023 22:57:30' prior: 50656182!
initializeFor: aValue

	value := aValue ! !

!methodRemoval: DepositLeg #transaction stamp: 'sf 5/31/2023 23:49:05'!
transaction

	^ transaction
!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/31/2023 23:01:04' prior: 50656871 overrides: 50656809!
fillReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].
	
	aReport addBalance: self balance.! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/31/2023 23:01:58' prior: 50656308 overrides: 50657049!
addToReport: aReport

	aReport addWithdraw: self! !
!Withdraw methodsFor: 'balance' stamp: 'SF 5/31/2023 23:02:03' prior: 50656329 overrides: 50657054!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'initialization' stamp: 'SF 5/31/2023 23:02:08' prior: 50656303!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'SF 5/31/2023 23:02:14' prior: 50656325 overrides: 50657060!
value

	^ value! !
!WithdrawLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:02:21' prior: 50656372 overrides: 50657054!
affectBalance: aBalance

	^aBalance - self value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:02:47' prior: 50656528 overrides: 50656430!
addDepositLeg: aDepositLeg
	aDepositLeg affectBalance: report.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:03:00' prior: 50657152 overrides: 50656430!
addDepositLeg: aDepositLeg

	aDepositLeg affectBalance: report.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:03:12' prior: 50656539 overrides: 50656440!
addWithdrawLeg: aWithdrawLeg

	aWithdrawLeg affectBalance: report.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:03:58' prior: 50657158 overrides: 50656430!
addDepositLeg: aDepositLeg

	report := report + aDepositLeg value.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:04:08' prior: 50657164 overrides: 50656440!
addWithdrawLeg: aWithdrawLeg

	report := report - aWithdrawLeg value.! !

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:05'!
Report subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:05'!
Report subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:35' prior: 50656915!
addBalance: aBalanceValue

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:41' prior: 50656425!
addDeposit: aDeposit
	
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:46' prior: 50656430!
addDepositLeg: aDepositLeg
	
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:50' prior: 50656435!
addWithdraw: aWithdraw

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:55' prior: 50656440!
addWithdrawLeg: aWithdrawLeg

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:18:59' prior: 50656445!
ofAccount: anAccount

	account := anAccount.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:19:03' prior: 50656450 overrides: 16902957!
print

	self subclassResponsibility.! !
!TreeStructure methodsFor: 'no messages' stamp: 'SF 5/31/2023 23:19:46' overrides: 50657226!
print! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:20:15' prior: 50657231 overrides: 50657226!
print

	report := OrderedCollection new.
	
	account fillReport: self.
	
	^report.! !
!Account class methodsFor: 'no messages' stamp: 'SF 5/31/2023 23:27:00'!
named: anAccountName

	self subclassResponsibility ! !
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'SF 5/31/2023 23:30:12' overrides: 50657240!
named: anAccountName

	^ ReceptiveAccount new initializeWithName: anAccountName.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:06'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'SF 5/31/2023 23:30:36'!
initializeWithName: anAccountName

	super initialize.
	
	transactions := OrderedCollection new.
	name := anAccountName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'SF 5/31/2023 23:30:42' prior: 50657259!
initializeWithName: anAccountName

	super initialize.
	
	transactions := OrderedCollection new.
	
	name := anAccountName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'SF 5/31/2023 23:30:58' prior: 50657043 overrides: 16920235!
initialize

	super initialize.
	
	transactions := OrderedCollection new.
	
	name := ''.! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:06'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'SF 5/31/2023 23:31:21'!
initializeWithName: anAccountName

	accounts := OrderedCollection new.
	
	parents := OrderedCollection new.
	
	name := anAccountName.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:06'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:06'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:06'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:06'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:06'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:06'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:32:12' overrides: 50657240!
named: anAccountName

	^ Portfolio new initializeWithName: anAccountName.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:32:26'!
named: anAccountName with: anAccount

	^ Portfolio new initializeWithName: anAccountName.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:32:33' prior: 50657345!
named: anAccountName with: anAccount

	^ self new initializeWithName: anAccountName.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:32:39' prior: 50657340 overrides: 50657240!
named: anAccountName

	^ self new initializeWithName: anAccountName.! !
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:32:43' prior: 50657245 overrides: 50657240!
named: anAccountName

	^ self new initializeWithName: anAccountName.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:35:16' prior: 50657351!
named: anAccountName with: anAccount

	^ (self new initializeWithName: anAccountName) add: anAccount; yourself.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:36:09'!
named: anAccountName with: anAccount with: anotherAccount

	^ ((self new initializeWithName: anAccountName) add: anAccount) add: anotherAccount ; yourself.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:36:12' prior: 50657371!
named: anAccountName with: anAccount

	^ (self new initializeWithName: anAccountName) add: anAccount ; yourself.! !

!classDefinition: #TreeStructureTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:06'!
ReportTest subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:49:06'!
ReportTest subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructureTest methodsFor: 'no messages' stamp: 'SF 5/31/2023 23:38:52'!
test01

	! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:40:52' prior: 50657409!
test01

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructure ofAccount: portfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi') equals: report print.! !
!Portfolio methodsFor: 'balance' stamp: 'SF 5/31/2023 23:44:57' prior: 50656964 overrides: 50656809!
fillReport: aReport

	aReport addPortfolioName: name.

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	
	aReport addBalance: self balance.! !
!Report methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:45:41'!
addPortfolioName: aPortfolioName

	self subclassResponsibility ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:45:48' overrides: 50657432!
addPortfolioName: aPortfolioName! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:45:52' overrides: 50657432!
addPortfolioName: aPortfolioName! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:46:16' overrides: 50657432!
addPortfolioName: aPortfolioName

	report add: aPortfolioName.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'SF 5/31/2023 23:46:31' overrides: 50657196!
addBalance: aBalanceValue! !

----STARTUP---- (31 May 2023 23:49:35) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!

!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:00:44' prior: 50617643!
test09WhenATestIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'test03 self assert: false' in: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:00:47' prior: 50617663!
test10WhenATestClassIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self newClassNamed: #TestClassB subclassOf: TestCase.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/9/2019 16:45:59' prior: 50617683!
test11WhenOneOfTheTestTheTestsIsChangedIsStillInThisState
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assertHasNoErrors: result.! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:00:52' prior: 50617701!
test12WhenAnotherTestIsChangedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	
	self logChangesWhile: [
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'test03 self assert: false' in: #TestClassA.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test03 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:00:55' prior: 50617726!
test13WhenATestFailsAnErrorIsReportedAndGoesToRed
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self runTest: #test01 class: #TestClassA
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Red.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:08:13' prior: 50617746!
test14WhenOneOfTheTestsPassesTwoErrorsAreReported
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runTest: #test01 class: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assert: result hasNErrors: 2.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01 class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:13:22' prior: 50617770!
test15WhenAllOfTheTestsPassErrorsAreReportedAndGoesToGreen
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 3.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01 class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test02 class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:37:21' prior: 50617796!
test16WhenOneOfTheTestsIsRenamedIsStillInThisState
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self compileMethod: 'test02bla self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test02 from: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assertHasNoErrors: result.! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 18:42:10' prior: 50617815!
test17WhenAnotherTestIsRenamedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self compileMethod: 'test03 self assert: true' in: #TestClassA.
		self compileMethod: 'test01bla self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test01 from: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test03 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 18:54:28' prior: 50617842!
test18WhenATestUtilityIsChangedNothingHappens
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'setUp ^ 1' in: #TestClassA.
		self compileMethod: 'setUp ^ 2' in: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assertHasNoErrors: result.! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 7/28/2019 17:18:03' prior: 50617860!
test01WhenAProductionClassIsAddedIsStillNotDoingTDD
	tddGuru initialState: NotDoingTDD new.
	
	self logChangesWhile: [ self newClassNamed: #ProdClassA subclassOf: Object ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:30:44' prior: 50617870!
test02WhenAProductionMethodIsAddedIsStillNotDoingTDD
	tddGuru initialState: NotDoingTDD new.
	self newClassNamed: #ProdClassA subclassOf: Object.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^ 1' in: #ProdClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:31:10' prior: 50617882!
test03WhenATestIsAddedIsStillNotDoingTDD

	tddGuru initialState: NotDoingTDD new.
	self newClassNamed: #ProdClassA subclassOf: TestCase.
	
	self logChangesWhile: [ self compileMethod: 'test01 ^ self assert: false' in: #ProdClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 8/1/2019 09:30:02' prior: 50617894!
test04WhenATestClassIsAddedIsStillNotDoingTDD
	tddGuru initialState: NotDoingTDD new.
	
	self logChangesWhile: [ self newClassNamed: #TestClassA subclassOf: TestCase ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:31:48' prior: 50617904!
test05WhenATestIsChangedIsStillNotDoingTDD

	tddGuru initialState: NotDoingTDD new.
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	
	self logChangesWhile: [self compileMethod: 'test01 self assert: true' in: #TestClassA. ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:32:20' prior: 50617918!
test06WhenAProductionMethodIsChangedIsStillNotDoingTDD
	tddGuru initialState: NotDoingTDD new.
	self newClassNamed: #ProductionClassA subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ProductionClassA.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^ 2' in: #ProductionClassA. ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:32:42' prior: 50617932!
test07WhenAClassIsRemovedIsStillNotDoingTDD

	tddGuru initialState: NotDoingTDD new.
	self newClassNamed: #ProductionClassA subclassOf: Object.
	
	self logChangesWhile: [ self removeClass: #ProductionClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:33:26' prior: 50617943!
test08WhenThereIsOneTestAndPassesThenIsInGreen
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	tddGuru initialState: (NotDoingTDD new).
	
	self logChangesWhile: [ self runTest: #test01 class: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:34:23' prior: 50617958!
test09WhenOneOfTheTestFailsThenIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 ^ self assert: true' in: #TestClassA.
	self compileMethod: 'test02 ^ self assert: false' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	tddGuru initialState: NotDoingTDD new.
	
	self logChangesWhile: [ self runAllTestsOf: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:37:13' prior: 50617975!
test10WhenOneOfTheTestIsNotRunThenIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 ^ self assert: true' in: #TestClassA.
	self compileMethod: 'test02 ^ self assert: true' in: #TestClassA.

	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	tddGuru initialState: NotDoingTDD new.
	
	self logChangesWhile: [ self runTest: #test01 class: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:38:21' prior: 50617993!
test11WhenATestIsRenamedIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01bla self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #test01 from: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:39:04' prior: 50618011!
test12WhenThereIsMoreThanOneTestAndAllPassThenIsInGreen
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ self runAllTestsOf: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:40:21' prior: 50618028!
test13WhenATestIsRemovedIsNoLongerTakenIntoAccount
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: false' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ 
		self removeMethodWithSelector: #test02 from: #TestClassA.
		self runAllTestsOf: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 19:35:51' prior: 50618047!
test14WhenATestClassIsRemovedIsNoLongerTakenIntoAccount
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassB.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA. self classNamed: #TestClassB }.
	
	self logChangesWhile: [ 
		self removeClass: #TestClassB.
		self runAllTestsOf: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!NotDoingTDDTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 19:37:08' prior: 50618070!
test15WhenAllTestAreRemovedThenGoesToGreen
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA. }.
	
	self logChangesWhile: [ self removeClass: #TestClassA ].
	
	result := tddGuru run.
	
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 5/20/2019 19:51:30' prior: 50618088!
test01WhenNoChangesAreDoneThenNothingHappens
	| result |
	
	self logChangesWhile: [].
		
	result _ tddGuru run.
				
	self assertHasNoErrors: result.
	self assertCurrentStateIs: NotStarted.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 16:00:10' prior: 50618097!
test02WhenAModelClassIsAddedThenWeAsumeIsWritingAFailingTest
	| result |
	
	self logChangesWhile: [ self newClassNamed: #ModelClass subclassOf: Object ].
	
	result _ tddGuru run.
	
	self assert: result hasNErrors: 0.
	self assertCurrentStateIs: WritingAFailingTest
! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 5/20/2019 19:58:31' prior: 50618108!
test03WhenATestClassIsAddedThenIsWritingAFailingTest
	| result |
	
	self logChangesWhile: [ self newClassNamed: #TestClass subclassOf: TestCase ].
	
	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:02:25' prior: 50618119!
test04WhenAProductionMethodIsAddedResultShouldHaveAnError
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1. 
	self assert: result hasErrorWithDescription: (TDDGuru methodAddedBeforeTest: #m1 class: #ModelClass ).
	self assertCurrentStateIs: NotDoingTDD.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:02:53' prior: 50618135!
test05WhenAMethodIsChangedResultShouldHaveAnError
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	self compileMethod: 'm1 ^1' in: #ModelClass.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^2' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1. 
	self assert: result hasErrorWithDescription: (TDDGuru methodChangedBeforeTest: #m1 class: #ModelClass).
	self assertCurrentStateIs: NotDoingTDD.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 11:51:32' prior: 50618152!
test06WhenATestIsAddedThenIsWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ self compileMethod: 'test01 ^1' in: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 17:03:22' prior: 50618167!
test07WhenAClassIsRemovedResultShouldHaveAnError
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ self removeClass: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru classRemovedBeforeRunningTests: #ModelClass).
	self assertCurrentStateIs: NotDoingTDD.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 17:01:24' prior: 50618182!
test08WhenAMethodIsRemovedResultShouldHaveAnError
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	self compileMethod: 'm1 ^1' in: #ModelClass.
	
	self logChangesWhile: [ self removeMethodWithSelector: #m1 from: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodRemovedBeforeRunningTests: #m1 class: #ModelClass).
	self assertCurrentStateIs: NotDoingTDD ! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 9/16/2019 20:40:44' prior: 50618199!
test09WhenAllTestsPassThenIsInGreenState
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	self compileMethod: 'test02 self assert: true' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
	
	self logChangesWhile: [ self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 9/16/2019 20:40:39' prior: 50618217!
test10WhenATestFailsThenIsInRedState
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	self compileMethod: 'test02 self assert: false' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
	
	self logChangesWhile: [ self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 9/16/2019 20:50:01' prior: 50618235!
test11WhenATestHasAnErrorThenIsInRedState
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	self compileMethod: 'test02 self error: ''Unexpected error''' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
	
	self logChangesWhile: [ self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 3/2/2020 16:58:26' prior: 50618254!
test12WhenATestIsChangedThenIsWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ self compileMethod: 'test01 self assert: false' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01.! !
!NotStartedTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 11:17:15' prior: 50618274!
test13WhenATestIsRenamedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01A self assert: false' in: #TestSomething. 
		self removeMethodWithSelector: #test01 from: #TestSomething ].
		
	result _ tddGuru run.
		
	self assert: tddGuru currentState equals: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testRenamedBeforeRunningTheTests: #test01 class: #TestSomething)! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 8/30/2019 08:55:09' prior: 50618296!
test01ShouldIgnoreDoIts
	| result |
	
	self logChangesWhile: [ Compiler evaluate: '5 + 6' logged: true. ].
		
	result _ tddGuru run.
		
	self assert: result changeEvents size equals: 0.! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 9/9/2019 20:18:37' prior: 50618304!
test02ResultKnowsTheChangesThatWereDone
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClass subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestClass. 
		self runTest: #test01 class: #TestClass.
	].
		
	result _ tddGuru run.
	
	changes := result changes.
	self assert: changes size equals: 3.
	self assert: changes first category equals: #newTestClass.
	self assert: changes second category equals: #newTest.
	self assert: changes third category equals: #testRun.! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 9/9/2019 20:19:34' prior: 50618323!
test03TDDStateForEachChange
	| result firstChange secondChange thirdChange changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClass subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestClass.
		self runTest: #test01 class: #TestClass
	].
		
	result _ tddGuru run.
		
	changes := result changes.
	firstChange := changes first.
	secondChange := changes second.
	thirdChange := changes third.
	
	self assert: (result stateAfter: firstChange) equals: WritingAFailingTest .
	self assert: (result stateAfter: secondChange) equals: WritingAFailingTest .
	self assert: (result stateAfter: thirdChange) equals: Red .! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 5/9/2020 19:51:42' prior: 50618346!
test04TestRenamesAreGroupedInASingleChange
	| result |
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01A ^ 1' in: #TestClassA.
	
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01B ^ 1' in: #TestClassA.
		self removeMethodWithSelector: #test01A from: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assert: result changes size equals: 1! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 9/9/2019 20:25:59' prior: 50618362!
test05TestsWithSameNameInDifferentClassesAreDifferent
	| result changes |
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	
	tddGuru initialTestClasses: { self classNamed: #TestClassA. self classNamed: #TestClassB }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 ^ self assert: true' in: #TestClassA.
		self compileMethod: 'test01 ^ self assert: true' in: #TestClassB.
	].
		
	result _ tddGuru run.
	changes := result changes.
	self assert: changes first category equals: #newTest.
	self assert: changes second category equals: #newTest.
	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 6/1/2021 21:15:10' prior: 50618384!
test06WhenATestHasAnErrorThisTestDoesNotFail
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 ^ self error: ''An error''' in: #TestClassA.
		self runTest: #test01 class: #TestClassA
	].
		
	self shouldnt: [ tddGuru run ] raise: Error
	
	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 9/26/2019 20:44:32' prior: 50618396!
test07RunFromASpecificChange
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #ExampleClass subclassOf: Object.
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 ^ self error: ''An error''' in: #TestClassA.
		self runTest: #test01 class: #TestClassA
	].
		
	tddGuru startingFromChange: 2.
	result _ tddGuru run.
	changes := result changes.
	self assert: changes size equals: 3.

	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 11/7/2019 20:42:21' prior: 50618412!
test08ReRunTheWholeAnalysis
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self runTest: #test01 class: #TestClassA
	].
		
	result _ tddGuru run.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
	].

	result _ tddGuru rerun.
	changes := result changes.
	self assert: changes size equals: 4.

	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 11/7/2019 20:55:58' prior: 50618429!
test09ReRunFromASpecificChange
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #ModelClassA subclassOf: Object.
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self runTest: #test01 class: #TestClassA
	].
		
	tddGuru startingFromChange: 2.
	tddGuru run.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
	].

	result _ tddGuru rerun.
	self assert: result changes size equals: 4.

	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 11/12/2019 16:56:06' prior: 50618448!
test10ChangeWhenAMethodWasAdded
	| result changeInWhichWasAdded |
	
	self logChangesWhile: [ 
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm3 ^ 1' in: #ModelClassA.
	].
		
	result _ tddGuru run.
	
	changeInWhichWasAdded := result changes at: 3.
	self assert: (result changeWhenMethodWasAdded: #m2 in: #ModelClassA) equals: changeInWhichWasAdded.

	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 6/1/2021 21:10:33' prior: 50618466!
test11IgnorePassingTestChangesForUntrackedTests
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	
	self logChangesWhile: [ 
		self runTest: #test01 class: #TestClassA.
	].
		
	result := tddGuru run.
	
	self assert: result changes size equals: 0.

	! !
!OtherTest methodsFor: 'tests' stamp: 'MGD 6/1/2021 21:12:48' prior: 50618479!
test12IgnoreFailingTestChangesForUntrackedTests
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	
	self logChangesWhile: [ 
		self runTest: #test01 class: #TestClassA.
	].
		
	result := tddGuru run.
	
	self assert: result changes size equals: 0.

	! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:05:49' prior: 50618492!
test01WhenAProductionClassIsAddedIsStillInRed
	| result  |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ProductionClass subclassOf: Object ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:06:46' prior: 50618508!
test02WhenAProductionMethodIsAddedIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:15:01' prior: 50618525!
test03WhenTheTestPassesThenIsInGreen
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01 class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:18:13' prior: 50618544!
test04WhenTheTestFailsIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self runTest: #test01 class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:19:22' prior: 50618563!
test05WhenAProductionMethodIsChangedIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self compileMethod: 'm1 ^ 2' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:21:33' prior: 50618582!
test06WhenTheNewTestPassesButAnotherTestFailsThenIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m1) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:30:42' prior: 50618609!
test07WhenAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:04:52' prior: 50618639!
test08WhenATestIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assert: tddGuru currentState equals: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedErrorMessage: #test02 class: #TestSomething).! !
!RedTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:30:16' prior: 50618658!
test09WhenATestIsRenamedAndAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'test02A self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self removeMethodWithSelector: #test02 from: #TestSomething.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 10/3/2019 20:20:27' prior: 50618689!
test10WhenAModelMethodIsRemovedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	self compileMethod: 'm1 ^ 1.' in: #ModelClass.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self removeMethodWithSelector: #m1 from: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 10/3/2019 20:21:32' prior: 50618708!
test11WhenAModelClassIsRemovedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self removeClass: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 11/2/2019 16:44:19' prior: 50618724!
test11WhenATestClassIsAddedIsStillInRed
	| result |
		
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #TestSomethingB subclassOf: TestCase. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 14:51:26' prior: 50618740!
test12WhenTheTestIsChangedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 14:59:48' prior: 50618758!
test13WhenAnotherTestIsChangedIsStillInRed
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
		
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. 
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'tests' stamp: 'MGD 3/8/2020 14:47:39' prior: 50618778!
test14WhenATestIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
		
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. 
		self runTest: #test02 class: #TestSomething.
		self removeMethodWithSelector: #test01 from: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testRemovedWhileInRed: #test01 class: #TestSomething)! !
!RedTest methodsFor: 'tests' stamp: 'MGD 3/8/2020 14:49:26' prior: 50618801!
test15WhenATestClassIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestClassA.
	self compileMethod: 'test01 self assert: true.' in: #TestClassB.
	tddGuru initialTestClasses: { self classNamed: #TestClassA . self classNamed: #TestClassB }.
	tddGuru initialState: Red new.
		
	self logChangesWhile: [ self removeClass: #TestClassB ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testClassRemovedWhileInRed: #TestClassB)! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:32:05' prior: 50618826!
test01WhenAProductionMethodIsChangedIsStillRefactoring
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	self compileMethod: 'm1 ^ 1' in: #ModelClass.
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^ 2' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/26/2019 15:13:48' prior: 50618841!
test02WhenAProductionMethodIsAddedIsStillRefactoring

	self newClassNamed: #ModelClass subclassOf: Object. 
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	tddGuru run.
		
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 8/15/2019 16:29:57' prior: 50618853!
test03WhenAProductionClassIsAddedIsStillRefactoring
	| result |
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self newClassNamed: #ProductionClass subclassOf: Object.  ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:33:05' prior: 50618865!
test04WhenATestIsChangedIsStillRefactoring
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [  self compileMethod: 'test01 self assert: true' in: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:33:49' prior: 50618883!
test05WhenATestIsRenamedIsStillRefactoring
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	
	self logChangesWhile: [  
		self compileMethod: 'test01A self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test01 from: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 8/15/2019 17:20:37' prior: 50618903!
test06WhenATestClassIsAddedIsStillRefactoring
	| result |
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self newClassNamed: #TestClassA subclassOf: TestCase.  ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 4/7/2020 17:15:00' prior: 50618915!
test07WhenATestIsAddedResultHasAnErrorAndIsWritingAFailingTest
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	
	self logChangesWhile: [ self compileMethod: 'testA self assert: false' in: #TestClassA ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedBeforeRunningTheRestOfTheTests: #testA class: #TestClassA).
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:36:55' prior: 50618936!
test08WhenAllTestPassThenIsInGreen
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'testA self assert: true' in: #TestClassA.
	self compileMethod: 'testB self assert: true' in: #TestClassA.
	
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	
	self logChangesWhile: [ self runAllTestsOf: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:36:38' prior: 50618955!
test09WhenOneOfTheTestFailsThenIsStillRefactoring
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'testA self assert: false' in: #TestClassA.
	self compileMethod: 'testB self assert: true' in: #TestClassA.
	
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ self runAllTestsOf: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:37:14' prior: 50618974!
test10WhenAClassIsRemovedIsStillRefactoring
	| result |
	
	self newClassNamed: #TestClassA subclassOf: Object.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self removeClass: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 9/29/2019 19:22:28' prior: 50618987!
test11WhenAProductionMethodIsRemovedStillRefactoring
	| result |
	
	self newClassNamed: #ProductionClass subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ProductionClass.
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [  self removeMethodWithSelector: #m1 from: #ProductionClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 10/3/2019 16:09:22' prior: 50619003!
test12WhenATestClassIsRemovedThoseTestsAreNoLongerTakenIntoAccount
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test01 self assert: true' in: #TestClassB.
	tddGuru initialTestClasses: { self classNamed: #TestClassA . self classNamed: #TestClassB }.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ 
		self removeClass: #TestClassA.
		self runAllTestsOf: #TestClassB ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 18:52:49' prior: 50619026!
test13WhenATestIsRemovedIsNoLongerTakenIntoAccount
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ 
		self removeMethodWithSelector: #test02 from: #TestClassA.
		self runTest: #test01 class: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 18:54:50' prior: 50619047!
test14WhenAllTestAreRemovedThenGoesToGreen
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ self removeClass: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/12/2019 17:46:39' prior: 50619066!
test15WhenAModelMethodIsAddedButNotUsedThereIsAnError
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodWasNotUsedDuringRefactor: #m2 class: #ModelClassA).! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 18:40:59' prior: 50619093!
test16WhenAModelMethodIsAddedAndThenUsedThereAreNoErrors
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm1 ^ self m2' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 18:43:41' prior: 50619116!
test17WhenAModelMethodIsAddedAndRemovedAndIsNotUsedThereAreNoErrors
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self removeMethodWithSelector: #m2 from: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 19:06:58' prior: 50619140!
test18WhenAModelMethodIsAddedAndIsOnlyMentionedInACommentThereIsAnError
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm1 "m2 in a comment" ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 1.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 19:16:10' prior: 50619164!
test19WhenTwoModelMethodsAreAddedBothHaveToBeUsedInAValidRefactor
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm3 ^ 1' in: #ModelClassA.
		self compileMethod: 'm1 self m2. ^ self m3' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 19:36:24' prior: 50619189!
test20WhenTwoModelMethodsAreAddedAndNotUsedIsNotAValidRefactor
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm3 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 2.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodWasNotUsedDuringRefactor: #m2 class: #ModelClassA).
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodWasNotUsedDuringRefactor: #m3 class: #ModelClassA).! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/20/2019 19:32:52' prior: 50619220!
test21WhenAModelMethodIsAddedAndIsUsedAsAVariableNameIsNotAValidRefactor
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'm1 | m2 | m2 := 1. ^ m2' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodWasNotUsedDuringRefactor: #m2 class: #ModelClassA).! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 11/26/2019 15:02:15' prior: 50619248!
test22WhenAModelMethodIsNotUsedWhenAnalysisIsFinishedThereIsAnError
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Refactor.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodWasNotUsedDuringRefactor: #m2 class: #ModelClassA).! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 12/19/2019 20:08:26' prior: 50619273!
test23WhenATestClassIsRenamedThoseTestsAreStillTakenIntoAccount
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self renameClass: #TestClassA to: #TestClassB.
		self runTest: #test01 class: #TestClassB
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result ! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 3/15/2020 14:36:52' prior: 50619295!
test24WhenAMethodIsOverridenItIsConsideredUsedAndRefactorIsValid
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'initialize ^ self' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result ! !
!RefactorTest methodsFor: 'tests' stamp: 'MGD 6/9/2021 19:32:04' prior: 50619317!
test25WhenAModelMethodIsAddedAndUsedInATestRefactorIsValid
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self compileMethod: 'm2 ^ 1' in: #ModelClassA.
		self compileMethod: 'test01 self assert: ModelClassA new m2 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 12/19/2019 17:25:19' prior: 50619342!
test01WhenTheTestIsChangedThenIsStillWritingAFailingTest
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 ^ self assert: true' in: #TestSomething.
		self compileMethod: 'test01 ^ self assert: true' in: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 19:19:36' prior: 50619358!
test02WhenAModelClassIsAddedThenIsStillWritingAFailingTest
	"This is may sound wrong but we'll let write a class if it has no behaviour"
	| result |
	
	tddGuru initialState: WritingAFailingTest new.
	
	self logChangesWhile: [ self newClassNamed: #ProductionClass subclassOf: Object. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 6/20/2019 20:46:31' prior: 50619373!
test03WhenATestClassIsAddedThenIsStillWritingAFailingTest
	| result |
	
	tddGuru initialState: WritingAFailingTest new.
		
	self logChangesWhile: [ self newClassNamed: #TestSomething subclassOf: TestCase. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:39:14' prior: 50619386!
test04WhenATestFailsThenIsInRedState
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 18:44:18' prior: 50619400!
test05WhenAModelMethodIsAddedAndNoTestIsBeingWrittenThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodAddedBeforeTest:  #m1 class: #ModelClass).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:40:15' prior: 50619419!
test06WhenTheTestIsRenamedThenIsStillWritingAFailingTest
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01A self assert: true' in: #TestSomething.
		self compileMethod: 'test01B self assert: false' in: #TestSomething.
		self removeMethodWithSelector: #test01A from: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01B
	! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/7/2020 17:25:05' prior: 50619439!
test07WhenAModelMethodIsChangedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ModelClass.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'm1 ^ 2' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodChangedBeforeTest: #m1 class: #ModelClass).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:41:20' prior: 50619458!
test08WhenSetUpMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 ^ self assert: true' in: #TestSomething.
		self compileMethod: 'setUp ^ 1' in: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.
	self assert: result changes size equals: 3.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 9/14/2019 12:41:47' prior: 50619476!
test09WhenAMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 ^ self assert: true' in: #TestSomething.
		self compileMethod: 'aFactory ^ 1' in: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.
	self assert: result changes size equals: 3.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/6/2019 17:40:14' prior: 50619494!
test10WhenASecondTestIsAddedIsInMoreThanOneTestWritten
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestSomething.
		self compileMethod: 'test02 self assert: false' in: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assertHasNoErrors: result.
	! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:07:38' prior: 50619510!
test11WhenATestWithTheSameNameIsChangedInOtherClassThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self newClassNamed: #TestSomethingB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingB.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA. self classNamed: #TestSomethingB }.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test01 class: #TestSomethingA)).
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: false' in: #TestSomethingB.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testChangedWhileThisTestWasBeingWritten:  #test01 in: #TestSomethingB)! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:07:45' prior: 50619540!
test12WhenADifferentTestIsChangedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestSomethingA.
	self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test02 class: #TestSomethingA)).
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA}.
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testChangedWhileThisTestWasBeingWritten: #test01 in: #TestSomethingA)
	! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/6/2019 18:11:46' prior: 50619568!
test13WhenATestWithTheSameNameIsAddedInOtherClassThenIsInMoreThanOneTestWritten
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self newClassNamed: #TestSomethingB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA. self classNamed: #TestSomethingB }.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test01 class: #TestSomethingA)).
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: false' in: #TestSomethingB.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: MoreThanOneTestWritten .
	self assertHasNoErrors: result.
! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/14/2019 12:16:54' prior: 50619594!
test14WhenAModelMethodIsRemovedIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClassA subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ModelClassA.
	
	self logChangesWhile: [ 	
		self newClassNamed: #TestSomethingA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #m1 from: #ModelClassA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodRemovedWhileWritingATest: #m1 class: #ModelClassA).
! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 19:16:14' prior: 50619616!
test15WhenTheTestIsRemovedThenIsInGreen
	| result |

	self logChangesWhile: [ 	
		self newClassNamed: #TestSomethingA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #test01 from: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.
! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/2/2019 21:36:22' prior: 50619631!
test16WhenATestIsRenamedThenIsStillWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA }.

	self logChangesWhile: [ 	
		self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
		self compileMethod: 'test01A self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #test01 from: #TestSomethingA.
		self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: WritingAFailingTest.
	self assertHasNoErrors: result.
! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/7/2020 17:23:38' prior: 50619655!
test17WhenAModelClassIsRemovedThenIsNotDoingTDD
	| result |
	self newClassNamed: #ModelClassA subclassOf: Object.
	
	self logChangesWhile: [ 	
		self newClassNamed: #TestSomethingA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestSomethingA.
		self removeClass: #ModelClassA
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru classRemovedBeforeRunningTests: #ModelClassA).

! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/10/2019 17:08:20' prior: 50619673!
test18WhenTheTestPassesAnErrorIsReportedAndGoesToGreen
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01 class: #TestSomething).
	self assert: tddGuru currentState equals: Green.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 10/15/2019 21:00:10' prior: 50619691!
test19AnotherTestIsRemovedAnErrorIsReportedAndIsStillWritingAFailingTest
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestClassA.
	self compileMethod: 'test01 self assert: true.' in: #TestClassB.
	tddGuru initialTestClasses: { self classNamed: #TestClassA . self classNamed: #TestClassB }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestClassA.
		self removeMethodWithSelector: #test01 from: #TestClassB ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodRemovedWhileWritingATest: #test01 class: #TestClassB).
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 15:54:11' prior: 50619720!
test20WhenAFirstTestIsAddedIsStillWritingAFailingTest
	| result |
	
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true.' in: #TestClassA. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/3/2020 18:47:29' prior: 50619736!
test21WhenAModelMethodIsAddedBeforeRunningTestsThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: #test01 in: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodAddedBeforeRunningTests: #m1 class: #ModelClass).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/7/2020 17:01:17' prior: 50619756!
test22WhenAModelMethodIsChangedBeforeWritingATestThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ModelClass.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodChangedBeforeTest: #m1 class: #ModelClass).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!WritingAFailingTestTest methodsFor: 'tests' stamp: 'MGD 3/7/2020 17:31:12' prior: 50619776!
test23WhenATestClassIsRemovedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA }.
		
	self logChangesWhile: [ 
		self newClassNamed: #TestSomethingB subclassOf: TestCase.
		self compileMethod: 'test01 ^ 1' in: #TestSomethingB.
		self removeClass: #TestSomethingA ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru classRemovedBeforeRunningTests: #TestSomethingA).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 12/19/2019 17:33:03' prior: 50619797!
changeFileWithExtension: fileExtension

	^(FileIOAccessor default baseNameFor: Smalltalk imageName), fileExtension! !
!TestChangesTest methodsFor: 'helpers' stamp: 'HAW 7/11/2022 20:18:19' prior: 50619803!
changeUserChangesFileWhile: aBlock
	^Preferences
		withTemporaryValue: self userChangesForTestFileExtension
		of: #userChangesFileNameExtension
		do: aBlock. 
	! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 12/19/2019 17:33:19' prior: 50619811!
changesFileForTests
	^ self changeFileWithExtension: self userChangesForTestFileExtension ! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 12/19/2019 16:19:29' prior: 50619817!
classCategoryOfTestData
	^ '__TDDGuru-TestData__'! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 3/17/2020 15:52:00' prior: 50619821!
createTestClass

	| testClass |
	testClass := TestCase 
		subclass: 'TestChangesTestData' 
		instanceVariableNames: '' 
		classVariableNames: '' 
		poolDictionaries: '' 
		category: self classCategoryOfTestData.
		
	testClass compile: 'aTestThatPass self assert: true'.
	testClass compile: 'aTestThatFails self assert: false'.
	testClass compile: 'aTestThatErrors self error: ''error'''.
						
	^ testClass! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 3/17/2020 16:21:04' prior: 50619837!
createTestClassSubclassOf: aClass named: aName
	^ aClass 
		subclass: aName
		instanceVariableNames: '' 
		classVariableNames: '' 
		poolDictionaries: '' 
		category: self classCategoryOfTestData.! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 3/17/2020 15:29:23' prior: 50619846!
createTestDataClass.

	^ Object 
		subclass: self testDataClassName 
		instanceVariableNames: '' 
		classVariableNames: '' 
		poolDictionaries: '' 
		category: self classCategoryOfTestData.! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 12/19/2019 16:05:00' prior: 50619855!
scanChangesFromFile
	| fileStream changeList |

	fileStream := self changesFileForTests asFileEntry readStream.
	changeList := ChangeList new scanFile: fileStream from: 0 to: fileStream size.

	^ changeList changeList.! !
!TestChangesTest methodsFor: 'helpers' stamp: 'MGD 12/19/2019 16:03:48' prior: 50619865!
userChangesForTestFileExtension
	^ '.test.changes'! !
!TestChangesTest methodsFor: 'setUp/tearDown' stamp: 'MGD 12/19/2019 17:33:41' prior: 50619870 overrides: 16961402!
tearDown
	self changesFileForTests asFileEntry delete.
	SystemOrganization removeSystemCategory: self classCategoryOfTestData.! !
!TestChangesTest methodsFor: 'as yet unclassified' stamp: 'MGD 3/17/2020 16:19:05' prior: 50619877!
testDataClassName
	^ #TestChangesTestClass__! !
!LogTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 16:02:10' prior: 50619881!
test01RunningAPassingTestShouldBeLogged
	" Log format expected:

	!!testRun: #TestCase #testSelector stamp: changeStamp!!
	PASSED
	"
	| testName testClass |
	
	self changeUserChangesFileWhile: [
		testClass := self createTestClass.
		testName := #aTestThatPass. 
		self runTest: testName of: testClass.

		self assertIsLoggedOnce: '!!testRun: ', testClass name printString, ' #', testName, ' stamp:'.
		self assertIsLoggedOnce: 'PASSED!!' ]! !
!LogTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 16:01:16' prior: 50619898!
test02RunningAFailingTestShouldBeLogged
	" Log format expected:

	!!testRun #NewTestCase #testSelector stamp: changeStamp!!
	FAILURE
	"
	| testName testClass |
	
	self changeUserChangesFileWhile: [
		testClass := self createTestClass.
		testName := #aTestThatFails.
		
		self runTest: testName of: testClass.
		
		self assertIsLoggedOnce: '!!testRun: ', testClass name printString, ' #', testName, ' stamp:'.
		self assertIsLoggedOnce: 'FAILURE!!' ]! !
!LogTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 16:00:02' prior: 50619915!
test03RunningATestWithAnErrorShouldBeLogged
	" Log format expected:

	!!testRun NewTestCase #testSelector stamp: changeStamp!!
	ERROR
	"
	| testName testClass |
	
	self changeUserChangesFileWhile: [
		testClass := self createTestClass.
		testName := #aTestThatErrors.
		self runTest: testName of: testClass.

		self assertIsLoggedOnce: '!!testRun: ', testClass name printString, ' ', testName printString, ' stamp:'.
		self assertIsLoggedOnce: 'ERROR!!' ]! !
!LogTestChangesTest methodsFor: 'tests' stamp: '' prior: 50619931!
test04OverridingAMethodShouldBeLoggedWithAReferenceToTheOverridenMethod
	" Log format expected:

	!!Class methodsFor: 'category' stamp: 'author stamp' overrides: 'methodHash'!!
	newMethodSourceCode
	"
	| aSuperClass aSubClass |
	
	self changeUserChangesFileWhile: [
		aSuperClass := self createTestDataClass.
		aSuperClass compile: 'm1 ^ 1' classified: 'a-category'.
		aSubClass := self createTestClassSubclassOf: aSuperClass named: #SubclassTestDataClass__.
		aSubClass compile: 'm1 ^ 2' classified: 'a-category'.

		self assertIsLoggedOnce: '!!SubclassTestDataClass__ methodsFor: ''a-category'' stamp:'.
		self assertIsLoggedOnce: 'overrides: '.
		self assertIsLoggedOnce: 'm1 ^ 2' ] ! !
!LogTestChangesTest methodsFor: 'tests' stamp: '' prior: 50619954!
test05WhenAMethodIsNotOverridenTheMethodReferenceIsNotIncluded
	" Log format expected:

	!!Class methodsFor: 'category' stamp: 'author stamp'!!
	newMethodSourceCode
	"
	| aSuperClass aSubClass |

	self changeUserChangesFileWhile: [
		aSuperClass := self createTestDataClass.
		aSuperClass compile: 'm1 ^ 1' classified: 'a-category'.
		aSubClass := self createTestClassSubclassOf: aSuperClass named: #SubclassTestDataClass__.
		aSubClass compile: 'm2 ^ 2' classified: 'a-category'.

		self assertIsNotLogged: 'overrides:'.
	] ! !
!LogTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 19:04:43' prior: 50619973!
test06WhenAMethodIsChangedItIsNotConsideredOverriden
	" Log format expected:

	!!Class methodsFor: 'category' stamp: 'author stamp'!!
	newMethodSourceCode
	"
	| aClass |

	self changeUserChangesFileWhile: [
		aClass := self createTestDataClass.
		aClass compile: 'm1 ^ 1' classified: 'a-category'.
		aClass compile: 'm1 ^ 2' classified: 'a-category'.

		self assertIsNotLogged: 'overrides:'.
	] ! !
!LogTestChangesTest methodsFor: 'run tests' stamp: 'MGD 11/2/2019 17:04:07' prior: 50619988!
runTest: aTestSelector of: aTestClass
	[ aTestClass run: aTestSelector ] on: Error do: []! !
!LogTestChangesTest methodsFor: 'as yet unclassified' stamp: 'MGD 12/19/2019 16:24:17' prior: 50619994!
assertIsLogged: aString times: stringCount
	| logContent startPosition indexOfSubstring |

	logContent := self changesFileForTests asFileEntry textContents.

	(stringCount <= 0)
		ifTrue: [ self deny: (logContent includesSubString: aString) ]
		ifFalse:	[
			startPosition := 1.
			self assert: (logContent includesSubString: aString).
			stringCount timesRepeat: [
				indexOfSubstring := logContent findString: aString startingAt: startPosition.

				self assert: indexOfSubstring > 0.
				startPosition := indexOfSubstring.
			]
		]

	! !
!LogTestChangesTest methodsFor: 'as yet unclassified' stamp: 'MGD 12/19/2019 16:23:03' prior: 50620014!
assertIsLoggedOnce: aString
	self assertIsLogged: aString times: 1.
	! !
!LogTestChangesTest methodsFor: 'as yet unclassified' stamp: 'MGD 3/17/2020 16:23:22' prior: 50620019!
assertIsLoggedTwice: aString
	self assertIsLogged: aString times: 2.
	! !
!LogTestChangesTest methodsFor: 'as yet unclassified' stamp: '' prior: 50620024!
assertIsNotLogged: aString
	| logContent |

	logContent := self changesFileForTests asFileEntry textContents.
	self deny: (logContent includesSubString: aString).
	! !
!ScanTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 15:39:19' prior: 50620032!
test01ScanPassingTestChange

	| testRunChange testClass |

	self changeUserChangesFileWhile: [
		testClass := self createTestClass.
		testClass run: #aTestThatPass.

		testRunChange := self scanChangesFromFile last.

		self assert: testRunChange changeType equals: #testRun.
		self assert: testRunChange changeClassName equals: testClass name.
		self assert: testRunChange methodSelector equals: #aTestThatPass.
		self assert: testRunChange isPassed.
		self deny: testRunChange stamp isNil ]! !
!ScanTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 15:39:32' prior: 50620050!
test02ScanFailedTestChange

	| testRunChange testClass |

	self changeUserChangesFileWhile: [
		testClass := self createTestClass.
		testClass run: #aTestThatFails.

		testRunChange := self scanChangesFromFile last.

		self assert: testRunChange changeType equals: #testRun.
		self assert: testRunChange changeClassName equals: testClass name.
		self assert: testRunChange methodSelector equals: #aTestThatFails.
		self assert: testRunChange isFailure ]! !
!ScanTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 16:04:46' prior: 50620067!
test03ScanNewTestClass
	
	| newClassChange newClass |

	self changeUserChangesFileWhile: [
		newClass := TestCase 
			subclass: #TestClassA
			instanceVariableNames: '' 
			classVariableNames: '' 
			poolDictionaries: '' 
			category: self classCategoryOfTestData.
		newClassChange := self scanChangesFromFile last.

		self assert: newClassChange changeType equals: #classDefinition.
		self assert: newClassChange changeClassName equals: newClass name.
		self assert: newClassChange changeClass equals: newClass.
		self assert: newClassChange isTestClassChange.
		self deny: newClassChange stamp isNil ]! !
!ScanTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 19:26:02' prior: 50620089!
test04ScanOverridenMethod
	
	| methodChange aSuperClass aSubclass |

	self changeUserChangesFileWhile: [
		aSuperClass := self createTestDataClass.
		aSubclass := self createTestClassSubclassOf: aSuperClass named: #AClass__.		
		aSuperClass compile: 'm1 ^ 1'.
		aSubclass compile: 'm1 ^ 2'.

		methodChange := self scanChangesFromFile last.

		self assert: methodChange changeType equals: #method.
		self assert: methodChange changeClassName equals: aSubclass name.
		self assert: methodChange changeClass equals: aSubclass.
		self assert: methodChange methodSelector equals: #m1.
		self assert: methodChange overridesASuperclassMethod.
		self deny: methodChange stamp isNil ]! !
!ScanTestChangesTest methodsFor: 'tests' stamp: 'MGD 3/17/2020 19:33:24' prior: 50620113!
test05ScanAMethodThatIsNotOverriden
	
	| methodChange aSuperClass aSubclass |

	self changeUserChangesFileWhile: [
		aSuperClass := self createTestDataClass.
		aSubclass := self createTestClassSubclassOf: aSuperClass named: #AClass__.		
		aSuperClass compile: 'm1 ^ 1'.
		aSubclass compile: 'm2 ^ 2'.

		methodChange := self scanChangesFromFile last.

		self assert: methodChange changeType equals: #method.
		self assert: methodChange changeClassName equals: aSubclass name.
		self assert: methodChange changeClass equals: aSubclass.
		self assert: methodChange methodSelector equals: #m2.
		self deny: methodChange overridesASuperclassMethod.
		self deny: methodChange stamp isNil ]! !
!AnalysisResult methodsFor: 'initialization' stamp: 'MGD 1/3/2020 08:41:52' prior: 50620138 overrides: 16920235!
initialize
	timeline := TimeLine for: self.
	errors := Dictionary new.
	
	timeline addDependent: self.! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 5/14/2019 10:49:41' prior: 50620144!
addError: anErrorString in: aChange
	errors at: aChange put: anErrorString! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 8/30/2019 08:55:09' prior: 50620149!
changeAt: index
	^ self changeEvents at: index
! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 8/7/2019 20:02:50' prior: 50620153!
errorIn: aChange
	^ errors at: aChange.! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 12/1/2018 14:50:12' prior: 50620157!
errors
	^ errors! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 6/20/2019 18:22:50' prior: 50620160!
hasError: aChange
	^ errors includesKey: aChange.! !
!AnalysisResult methodsFor: 'errors' stamp: 'MGD 10/3/2019 19:15:08' prior: 50620164!
isCorrect: aChange
	| stateAfterChange |
	
	stateAfterChange := self timeline stateAfter: aChange.
	
	^ stateAfterChange isCorrect and: [ (self hasError: aChange) not ]! !
!AnalysisResult methodsFor: 'changes' stamp: 'MGD 6/20/2019 18:18:28' prior: 50620172!
addChange: aChange
	timeline addChange: aChange ! !
!AnalysisResult methodsFor: 'changes' stamp: 'MGD 8/30/2019 08:56:40' prior: 50620176!
changeEvents
	^ timeline changeEvents! !
!AnalysisResult methodsFor: 'timeline' stamp: 'MGD 6/20/2019 18:57:39' prior: 50620180!
stateAfter: aChange 
	^ timeline stateAfter: aChange! !
!AnalysisResult methodsFor: 'timeline' stamp: 'MGD 6/21/2019 07:31:17' prior: 50620184!
timeline
	^ timeline! !
!AnalysisResult methodsFor: 'timeline' stamp: 'MGD 6/25/2019 09:28:49' prior: 50620188 overrides: 16903929!
update: aSection
	self changed: aSection! !
!AnalysisResult methodsFor: 'states' stamp: 'MGD 6/27/2019 10:19:24' prior: 50620192!
stateTransitionFrom: previousTDDState to: currentTDDState
	timeline stateTransitionFrom: previousTDDState to: currentTDDState! !
!AnalysisResult methodsFor: 'accessing' stamp: 'MGD 11/12/2019 16:42:07' prior: 50620199!
changeWhenMethodWasAdded: aSelector in: className 
	^ timeline changeWhenMethodWasAdded: aSelector in: className! !
!AnalysisResult methodsFor: 'accessing' stamp: 'MGD 8/30/2019 09:02:51' prior: 50620205!
changes
	
	^ timeline changes! !
!Change methodsFor: 'accessing' stamp: 'MGD 5/31/2019 07:28:53' prior: 50620209!
category
	self subclassResponsibility ! !
!Change methodsFor: 'accessing' stamp: 'MGD 9/18/2019 20:40:55' prior: 50620213!
code
	
	^ changeRecord string.
	! !
!Change methodsFor: 'accessing' stamp: 'MGD 12/26/2019 19:48:15' prior: 50620217!
dateString
	^ self stamp substrings second! !
!Change methodsFor: 'accessing' stamp: 'MGD 5/16/2019 20:08:13' prior: 50620221!
description
	self subclassResponsibility.! !
!Change methodsFor: 'accessing' stamp: 'MGD 5/16/2019 19:34:59' prior: 50620225!
isRecognized
	^ true! !
!Change methodsFor: 'accessing' stamp: 'HAW 11/12/2021 12:33:07' prior: 50620228!
time
	| timeParts hours minutes seconds date time |
	
	date := FixedGregorianDate fromDate: self dateString asDate.
	timeParts := self timeString findTokens: ':'.
	"Some timestamps have only hour and minutes without seconds, so we add 0 to fix that problem - Hernan"
	timeParts add: 0.
	timeParts size < 3 ifTrue: [ self error: 'Incorrect time format ', self timeString ].
	
	hours := timeParts first asNumber.
	minutes := timeParts second asNumber.
	seconds := timeParts third asNumber.
	
	time := TimeOfDay hours: hours minutes: minutes seconds: seconds.	
	
	^ GregorianDateTime date: date timeOfDay: time.
	! !
!Change methodsFor: 'accessing' stamp: 'MGD 11/27/2019 19:06:57' prior: 50620250!
timeString
	^ self stamp substrings third! !
!Change methodsFor: 'printing' stamp: 'MGD 6/20/2019 15:19:42' prior: 50620255 overrides: 16902975!
printOn: aStream
	(self category printString, ' - ', self description) printOn: aStream.! !
!Change methodsFor: 'printing' stamp: 'MGD 11/26/2019 16:09:29' prior: 50620261 overrides: 16902983!
printString	
	^ '[', self category printString, '] ', self description.! !
!Change methodsFor: 'printing' stamp: 'MGD 5/23/2019 11:02:32' prior: 50620266!
stamp
	^ changeRecord stamp! !
!Change methodsFor: 'initialization' stamp: 'MGD 5/1/2019 16:13:26' prior: 50620270!
changeRecord: aChangeRecord
	changeRecord := aChangeRecord ! !
!Change methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:55:55' prior: 50620274!
reportChangeTo: tddGuru 
	self subclassResponsibility ! !
!Change class methodsFor: 'instance creation' stamp: 'MGD 7/12/2019 12:37:43' prior: 50620279!
newFor: aChangeRecord
	^ self new changeRecord: aChangeRecord! !
!ClassChange methodsFor: 'accessing' stamp: 'MGD 4/10/2020 16:45:39' prior: 50620284!
changeClass
	^ changeRecord changeClass! !
!ClassChange methodsFor: 'accessing' stamp: 'MGD 4/10/2020 16:45:53' prior: 50620288!
changeClassName
	^ changeRecord changeClassName ! !
!ClassRenamed methodsFor: 'accessing' stamp: 'MGD 12/19/2019 20:45:49' prior: 50620293 overrides: 50660174!
category
	^ #classRenamed! !
!ClassRenamed methodsFor: 'accessing' stamp: 'MGD 12/19/2019 19:49:20' prior: 50620297!
currentName
	^ changeRecord newClassName ! !
!ClassRenamed methodsFor: 'accessing' stamp: 'MGD 12/19/2019 20:46:38' prior: 50620302 overrides: 50660186!
description
	^ self previousName , ' was renamed to ', self currentName.! !
!ClassRenamed methodsFor: 'accessing' stamp: 'MGD 12/19/2019 19:49:03' prior: 50620307!
previousName
	^ changeRecord changeClassName ! !
!ClassRenamed methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:55:38' prior: 50620312 overrides: 50660243!
reportChangeTo: tddGuru 
	tddGuru classRenamedFrom: self previousName to: self currentName! !
!ModelClassRemoved methodsFor: 'accessing' stamp: 'MGD 7/15/2019 07:40:25' prior: 50620318 overrides: 50660174!
category
	^ #classRemoved! !
!ModelClassRemoved methodsFor: 'printing' stamp: 'MGD 10/2/2019 19:39:53' prior: 50620322 overrides: 50660186!
description
	^ self changeClassName, ' was removed'! !
!ModelClassRemoved methodsFor: 'reporting' stamp: 'MGD 10/14/2019 16:24:29' prior: 50620327 overrides: 50660243!
reportChangeTo: tddGuru
	tddGuru modelClassRemoved: changeRecord changeClassName! !
!NewModelClass methodsFor: 'accessing' stamp: 'MGD 8/16/2019 09:58:58' prior: 50620333 overrides: 50660174!
category
	^ #newModelClass! !
!NewModelClass methodsFor: 'printing' stamp: 'MGD 8/16/2019 10:07:20' prior: 50620337 overrides: 50660186!
description
	^ 'New model class ', self changeClassName! !
!NewModelClass methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:39:14' prior: 50620342 overrides: 50660243!
reportChangeTo: tddGuru
	tddGuru newModelClass: self changeClassName! !
!NewTestClass methodsFor: 'accessing' stamp: 'MGD 5/11/2019 15:47:31' prior: 50620348 overrides: 50660174!
category
	^ #newTestClass! !
!NewTestClass methodsFor: 'printing' stamp: 'MGD 5/16/2019 20:10:25' prior: 50620352 overrides: 50660186!
description
	^ 'New test class ', self changeClassName.! !
!NewTestClass methodsFor: 'reporting' stamp: 'MGD 10/15/2019 17:47:12' prior: 50620357 overrides: 50660243!
reportChangeTo: tddGuru
	tddGuru newTestClass: self changeClassName! !
!TestClassRemoved methodsFor: 'accessing' stamp: 'MGD 10/14/2019 16:19:30' prior: 50620363 overrides: 50660174!
category
	^ #testClassRemoved! !
!TestClassRemoved methodsFor: 'printing' stamp: 'MGD 10/14/2019 16:19:44' prior: 50620367 overrides: 50660186!
description
	^ self changeClassName, ' was removed'! !
!TestClassRemoved methodsFor: 'reporting' stamp: 'MGD 10/14/2019 16:16:48' prior: 50620372 overrides: 50660243!
reportChangeTo: aTDDGuru 
	aTDDGuru testClassRemoved: self changeClassName ! !
!MethodChange methodsFor: 'accessing' stamp: 'MGD 4/10/2020 16:34:29' prior: 50620377!
changeClass
	^ changeRecord changeClass! !
!MethodChange methodsFor: 'accessing' stamp: 'MGD 4/10/2020 16:45:59' prior: 50620381!
changeClassName
	^ changeRecord changeClassName ! !
!MethodChange methodsFor: 'accessing' stamp: 'MGD 3/18/2020 20:09:33' prior: 50620385!
methodReference
	^ UninstalledMethodReference selector: self methodSelector class: self changeClassName sourceCode: self code overrides: self overridesASuperclassMethod! !
!MethodChange methodsFor: 'accessing' stamp: 'MGD 3/17/2020 20:14:15' prior: 50620393!
methodSelector
	^ changeRecord methodSelector! !
!MethodChange methodsFor: 'accessing' stamp: 'MGD 3/17/2020 20:11:57' prior: 50620397!
overridesASuperclassMethod
	^ changeRecord overridesASuperclassMethod ! !
!MethodRemoved methodsFor: 'accessing' stamp: 'MGD 6/26/2019 19:12:27' prior: 50620403 overrides: 50660174!
category
	^ #methodRemoved! !
!MethodRemoved methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:25:44' prior: 50620407 overrides: 50660186!
description
	^ self changeClassName, '>>', self methodSelector, ' was removed'! !
!MethodRemoved methodsFor: 'accessing' stamp: 'MGD 3/18/2020 21:05:10' prior: 50620413 overrides: 50660370!
methodReference
	^ UninstalledMethodReference selector: self methodSelector class: self changeClassName sourceCode: self code! !
!MethodRemoved methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:13:15' prior: 50620420 overrides: 50660243!
reportChangeTo: tddGuru
	tddGuru modelMethodRemoved: self methodReference! !
!ModelMethodChanged methodsFor: 'accessing' stamp: 'MGD 8/16/2019 09:58:50' prior: 50620426 overrides: 50660174!
category
	^ #modelMethodChanged! !
!ModelMethodChanged methodsFor: 'accessing' stamp: 'HAW 4/5/2020 18:57:47' prior: 50620431 overrides: 50660178!
code
	| changeClass sourceString |
	sourceString := changeRecord string.
	changeClass := changeRecord changeClass.
	changeClass ifNil: [ ^ sourceString ].
	
	^ [changeClass compilerClass new
		format: sourceString in: changeClass notifying: nil]
		on: InMidstOfFileinNotification
		do: [ :anException | anException resume: true ]! !
!ModelMethodChanged methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:26:56' prior: 50620445 overrides: 50660186!
description
	^ self changeClassName, '>>', self methodSelector, ' was modified'! !
!ModelMethodChanged methodsFor: 'reporting' stamp: 'MGD 3/18/2020 20:14:18' prior: 50620451 overrides: 50660243!
reportChangeTo: tddGuru
	tddGuru modelMethodChanged: self methodReference ! !
!NewModelMethod methodsFor: 'accessing' stamp: 'MGD 8/16/2019 10:08:12' prior: 50620457 overrides: 50660174!
category
	^ #newModelMethod! !
!NewModelMethod methodsFor: 'accessing' stamp: 'MGD 9/18/2019 20:41:35' prior: 50620461 overrides: 50660178!
code
	| changeClass sourceString |
	sourceString := changeRecord string.
	changeClass := changeRecord changeClass.
	changeClass ifNil: [ ^ sourceString ].
	
	^ changeClass compilerClass new
		format: sourceString in: changeClass notifying: nil! !
!NewModelMethod methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:27:52' prior: 50620472 overrides: 50660186!
description
	^ self changeClassName, '>>', self methodSelector, ' was added'! !
!NewModelMethod methodsFor: 'reporting' stamp: 'MGD 4/2/2020 19:15:50' prior: 50620478 overrides: 50660243!
reportChangeTo: tddGuru
	tddGuru newModelMethod: self methodReference ! !
!NewTest methodsFor: 'accessing' stamp: 'MGD 5/24/2019 11:48:13' prior: 50620483 overrides: 50660174!
category
	^ #newTest! !
!NewTest methodsFor: 'accessing' stamp: 'MGD 9/18/2019 20:41:29' prior: 50620487 overrides: 50660178!
code
	| changeClass sourceString |
	sourceString := changeRecord string.
	changeClass := changeRecord changeClass.
	changeClass ifNil: [ ^ sourceString ].
	
	^ changeClass compilerClass new
		format: sourceString in: changeClass notifying: nil! !
!NewTest methodsFor: 'accessing' stamp: 'MGD 10/15/2019 16:28:13' prior: 50620498 overrides: 50660186!
description
	^ self changeClassName, '>>', self methodSelector, ' was added'! !
!NewTest methodsFor: 'reporting' stamp: 'MGD 4/2/2020 19:47:57' prior: 50620504 overrides: 50660243!
reportChangeTo: tddGuru
	tddGuru newTest: self methodReference! !
!TestChanged methodsFor: 'accessing' stamp: 'MGD 5/16/2019 20:15:49' prior: 50620509 overrides: 50660174!
category
	^ #testChanged! !

----STARTUP---- (31 May 2023 23:50:56) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!


!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:22'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04'!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:23'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:24'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:24'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' overrides: 50660890!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50660894!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' overrides: 50660899!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50660903!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' overrides: 50660882!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50660886!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:26'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:26'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' overrides: 50660894!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50660899!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50660890!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50660882!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50660886!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50660903!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:27'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:27'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:27'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50661102!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50661106!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:27'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:27'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50661102!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50661106!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:28'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #TransactionTest category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:28'!
TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransactionTest methodsFor: 'tests' stamp: 'SF 5/30/2023 17:01:39'!
test01

	| senderAccount receiverAccount |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	senderAccount transfer: 100 to: receiverAccount.

	self assert: -100 equals: senderAccount balance.
	self assert: 100 equals: receiverAccount balance.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:02:06'!
transfer: aRenameMe1 to: receiverAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:02:27' prior: 50661203!
transfer: anAmountToTransfer to: anAccountToTransferTo

	 
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'SF 5/30/2023 17:03:57' prior: 50661209!
transfer: anAmountToTransfer to: anAccountToTransferTo

	Withdraw register: anAmountToTransfer on: self.
	Deposit register: anAmountToTransfer on: anAccountToTransferTo.
	
	 
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:28'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:13:32'!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	! !

!methodRemoval: ReceptiveAccount #transfer:to: stamp: 'sf 5/31/2023 23:52:28'!
transfer: anAmountToTransfer to: anAccountToTransferTo

	Withdraw register: anAmountToTransfer on: self.
	Deposit register: anAmountToTransfer on: anAccountToTransferTo.
	
	 
	!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:14:09' prior: 50661229!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	Withdraw register: aTransferValue on: aReceiverAccount.
	Deposit register: aTransferValue on: aSenderAccount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:14:15' prior: 50661243!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	Withdraw register: aTransferValue on: aSenderAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:29'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:20:30' prior: 50661252!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := Withdraw register: aTransferValue on: aSenderAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:20:43'!
withdrawalLeg

	^ withdrawalLeg! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:21:08'!
transfer

	^ self! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:29'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:23:57' prior: 50661269!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andReceiver: aReceiverAccount.
	Deposit register: aTransferValue on: aReceiverAccount.! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:29'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:24:46'!
from: aTransfer withSender: aSenderAccount andReceiver: aReceiverAccount

	parentTransfer := aTransfer.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:26:29' prior: 50661293!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	Deposit register: aTransferValue on: aReceiverAccount.! !

!methodRemoval: WithdrawalLeg #from:withSender:andReceiver: stamp: 'sf 5/31/2023 23:52:29'!
from: aTransfer withSender: aSenderAccount andReceiver: aReceiverAccount

	parentTransfer := aTransfer.
	!
!WithdrawalLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:26:44'!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:27:14' prior: 50661334!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	Withdraw register: aTransferValue on: aSenderAccount.! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:28:02' overrides: 50661282!
transfer

	^ parentTransfer! !

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:30'!
Transfer subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:30'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawalLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:29:23' prior: 50661318!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue

	withdrawalLeg := WithdrawalLeg new from: self withSender: aSenderAccount andValue: aTransferValue.
	depositLeg := DepositLeg new from: self withReceiver: aReceiverAccount andValue: aTransferValue.! !
!DepositLeg methodsFor: 'no messages' stamp: 'SF 5/30/2023 17:29:49'!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.

! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:30:07' prior: 50661380!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	Deposit register: aTransferValue on: aReceiverAccount.
! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:30:21' overrides: 50661282!
transfer

	^ parentTransfer
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:31:26'!
depositLeg

	^ depositLeg! !

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:30'!
Transfer subclass: #DepositLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:33:31' prior: 50661387!
from: aTransfer withReceiver: aReceiverAccount andValue: aTransferValue

	parentTransfer := aTransfer.
	transaction := Deposit register: aTransferValue on: aReceiverAccount.
! !

!classDefinition: #WithdrawalLeg category: 'Portfolio-Solucion' stamp: 'sf 5/31/2023 23:52:30'!
Transfer subclass: #WithdrawalLeg
	instanceVariableNames: 'parentTransfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:33:43' prior: 50661340!
from: aTransfer withSender: aSenderAccount andValue: aTransferValue.

	parentTransfer := aTransfer.
	transaction := Withdraw register: aTransferValue on: aSenderAccount.! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:34:34'!
transaction

	^ transaction
! !
!WithdrawalLeg methodsFor: 'as yet unclassified' stamp: 'SF 5/30/2023 17:34:39' prior: 50661349 overrides: 50661282!
transfer

	^ transaction! !

----STARTUP---- (31 May 2023 23:52:59) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\Santii\Desktop\UBA\inge1\windows64\Portfolio-Solucion.st----!

Report subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'dsf 5/31/2023 23:54:13'!
Report subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account class methodsFor: 'no messages' stamp: 'dsf 5/31/2023 23:54:52'!
named: anAccountName

	self subclassResponsibility ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'dsf 5/31/2023 23:55:15' overrides: 50662757!
named: anAccountName
	^self new initializeWithName: anAccountName.! !
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'dsf 5/31/2023 23:55:25' overrides: 50662757!
named: anAccountName

	^self new initializeWithName: anAccountName.! !

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'dsf 5/31/2023 23:55:48'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'dsf 5/31/2023 23:56:15'!
initializeWithName: anAccountName

	name := anAccountName.

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'dsf 5/31/2023 23:56:32'!
initializeWithName: anAccountName

	super initialize.
	
	name := anAccountName.
	
	transactions := OrderedCollection new.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'dsf 5/31/2023 23:57:20'!
named: anAccountName with: anAccount
	^(self new 		initializeWithName: anAccountName)
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'dsf 5/31/2023 23:57:26' prior: 50662798!
named: anAccountName with: anAccount
	^(self new 
		initializeWithName: anAccountName)
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'dsf 5/31/2023 23:57:44'!
named: anAccountName with: anAccount with: anotherAccount

	^((self new 
		initializeWithName: anAccountName)
		add: anAccount)
		add: anotherAccount;
		yourself! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'dsf 5/31/2023 23:57:55'!
PASSED!

ReportTest subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureTest category: 'Portfolio-Solucion' stamp: 'dsf 5/31/2023 23:58:23'!
ReportTest subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructureTest methodsFor: 'no messages' stamp: 'dsf 5/31/2023 23:58:53'!
test01

	| portfolio |
	
	portfolio := Portfolio initialize.! !
!Portfolio methodsFor: 'initialization' stamp: 'dsf 5/31/2023 23:59:18' prior: 50662180 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:00:25' prior: 50662890!
test01

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructure ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi') equals: report print.! !

----SNAPSHOT----(1 June 2023 00:00:32) CuisUniversity-5832.image priorSource: 9366758!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:00:34'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:00:34'!
ERROR!

----STARTUP---- (1 June 2023 00:00:43) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!

!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:01:40' prior: 50662902!
test01

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructure new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi') equals: report print.! !

----SNAPSHOT----(1 June 2023 00:01:44) CuisUniversity-5832.image priorSource: 10600352!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:01:49'!
ERROR!
!TreeStructure methodsFor: 'no messages' stamp: 'dsf 6/1/2023 00:02:12' overrides: 50662605!
print

	report := OrderedCollection new.
	
	account fillReport: self.
	
	^report.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:02:24' overrides: 50662575!
addBalance: aBalanceValue! !
!Portfolio methodsFor: 'balance' stamp: 'dsf 6/1/2023 00:03:07' prior: 50662192 overrides: 50662136!
fillReport: aReport

	aReport addPortfolioName: name.

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	
	aReport addBalance: self balance.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:03:50'!
addPortfolioName: aPortfolioName! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:03:54'!
addPortfolioName: aPortfolioName! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:04:03'!
addPortfolioName: aPortfolioName

	report add: aPortfolioName! !

----SNAPSHOT----(1 June 2023 00:04:11) CuisUniversity-5832.image priorSource: 10601060!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:04:15'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:06:52' prior: 50662924!
test01

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  ' with: 'Cuenta de Juampi') equals: report print.! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:08:28' prior: 50662978!
test01

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi') equals: report print.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'dsf 6/1/2023 00:08:58' prior: 50662315 overrides: 50662136!
fillReport: aReport

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].
	
	aReport addBalance: self balance.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'dsf 6/1/2023 00:09:28' prior: 50663007 overrides: 50662136!
fillReport: aReport

	aReport addAccountName: name.

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].
	
	aReport addBalance: self balance.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:10:33'!
addName: aPortfolioName! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:10:33'!
addName: aPortfolioName! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:10:34'!
addName: aPortfolioName

	report add: aPortfolioName! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:10:34' prior: 50662951 overrides: 50662136!
fillReport: aReport

	aReport addName: name.

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	
	aReport addBalance: self balance.! !

!methodRemoval: AccountSummary #addPortfolioName: stamp: 'dsf 6/1/2023 00:10:34'!
addPortfolioName: aPortfolioName!

!methodRemoval: TransferNet #addPortfolioName: stamp: 'dsf 6/1/2023 00:10:34'!
addPortfolioName: aPortfolioName!

!methodRemoval: TreeStructure #addPortfolioName: stamp: 'dsf 6/1/2023 00:10:34'!
addPortfolioName: aPortfolioName

	report add: aPortfolioName!
!Report methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:10:53'!
addName: anAccountName

	self subclassResponsibility ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:11:00' prior: 50663023 overrides: 50663056!
addName: anAccountName! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:11:05' prior: 50663027 overrides: 50663056!
addName: anAccountName! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:11:10' prior: 50663031 overrides: 50663056!
addName: anAccountName

	report add: anAccountName! !

Report subclass: #TreeStructure
	instanceVariableNames: 'depth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'dsf 6/1/2023 00:13:41'!
Report subclass: #TreeStructure
	instanceVariableNames: 'depth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:14:05' overrides: 50662600!
ofAccount: anAccount

	account := anAccount.
	depth := 0.! !
!Portfolio methodsFor: 'balance' stamp: 'dsf 6/1/2023 00:15:21' prior: 50663037 overrides: 50662136!
fillReport: aReport

	aReport addName: name.

	aReport increaseDepth.

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	
	aReport addBalance: self balance.! !
!Portfolio methodsFor: 'balance' stamp: 'dsf 6/1/2023 00:15:46' prior: 50663095 overrides: 50662136!
fillReport: aReport

	aReport addName: name.

	aReport increaseDepth.

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	
	aReport decreaseDepth.
	
	aReport addBalance: self balance.! !
!Report methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:16:22' prior: 50663056!
addName: anAccountName! !

!methodRemoval: AccountSummary #addName: stamp: 'dsf 6/1/2023 00:16:25'!
addName: anAccountName!

!methodRemoval: TransferNet #addName: stamp: 'dsf 6/1/2023 00:16:27'!
addName: anAccountName!
!Report methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:16:50' prior: 50662580!
addDeposit: aDeposit! !
!Report methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:16:53' prior: 50662575!
addBalance: aBalanceValue! !
!Report methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:16:56' prior: 50662585!
addDepositLeg: aDepositLeg! !
!Report methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:17:00' prior: 50662590!
addWithdraw: aWithdraw! !
!Report methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:17:04' prior: 50662595!
addWithdrawLeg: aWithdrawLeg! !

!methodRemoval: TransferNet #addBalance: stamp: 'dsf 6/1/2023 00:17:18'!
addBalance: aBalanceValue!

!methodRemoval: TransferNet #addDeposit: stamp: 'dsf 6/1/2023 00:17:21'!
addDeposit: aDeposit!

!methodRemoval: TransferNet #addWithdraw: stamp: 'dsf 6/1/2023 00:17:24'!
addWithdraw: aWithdraw!

!methodRemoval: TreeStructure #addBalance: stamp: 'dsf 6/1/2023 00:17:29'!
addBalance: aBalanceValue!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:17:35' prior: 50663089 overrides: 50662600!
ofAccount: anAccount

	account := anAccount.
	
	depth := 0.! !
!Report methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:17:54'!
increaseDepth! !
!Report methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:17:58'!
decreaseDepth! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:18:13' overrides: 50663163!
increaseDepth

	depth := depth + 1! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:18:18' overrides: 50663166!
decreaseDepth

	depth := depth - 1! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:21:10' prior: 50663072 overrides: 50663114!
addName: anAccountName

	report add: (self addDepthNumberOfTabsTo: anAccountName)! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:22:20'!
addDepthNumberOfTabsTo: anAccountName

	| tabbedName |
	tabbedName := anAccountName.
	1 to: depth do: [
		tabbedName := '  ', tabbedName.
		]
	^ tabbedName.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:22:26' prior: 50663186!
addDepthNumberOfTabsTo: anAccountName

	| tabbedName |
	tabbedName := anAccountName.
	1 to: depth do: [
		tabbedName := '  ', tabbedName.
		].
	^ tabbedName.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:22:30' prior: 50663195!
addDepthNumberOfTabsTo: anAccountName

	| tabbedName |
	
	tabbedName := anAccountName.
	1 to: depth do: [
		tabbedName := '  ', tabbedName.
		].
	^ tabbedName.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:22:52' prior: 50663204!
addDepthNumberOfTabsTo: anAccountName

	| tabbedName |
	
	tabbedName := anAccountName.
	depth timesRepeat: [
		tabbedName := '  ', tabbedName.
		].
	^ tabbedName.! !

----SNAPSHOT----(1 June 2023 00:23:00) CuisUniversity-5832.image priorSource: 10602272!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:23:12'!
test02

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi') equals: report print.! !

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:23:13'!
ERROR!

----STARTUP---- (1 June 2023 00:23:20) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!

!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:23:33'!
test02

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi') equals: report print.! !

| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure new ofAccount: portfolio.	!

| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure new ofAccount: portfolio.	!

a Portfolio!

----STARTUP---- (1 June 2023 00:24:54) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!

!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:25:47'!
test02

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi') equals: report print.! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:26:23' prior: 50662992!
test01

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructure new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi') equals: report print.! !

----SNAPSHOT----(1 June 2023 00:26:35) CuisUniversity-5832.image priorSource: 10610245!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:26:37'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'dsf 6/1/2023 00:29:25'!
ERROR!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'dsf 6/1/2023 00:29:25'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'dsf 6/1/2023 00:29:25'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'dsf 6/1/2023 00:29:25'!
ERROR!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'dsf 6/1/2023 00:29:25'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'dsf 6/1/2023 00:29:25'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'dsf 6/1/2023 00:29:25'!
ERROR!

!testRun: #TransferNetTest #test02 stamp: 'dsf 6/1/2023 00:29:25'!
ERROR!

!testRun: #TransferNetTest #test03 stamp: 'dsf 6/1/2023 00:29:25'!
ERROR!

!testRun: #TransferNetTest #test04 stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'dsf 6/1/2023 00:29:25'!
ERROR!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:29:25'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:29:25'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:29:32'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:29:32'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:29:32'!
ERROR!

----STARTUP---- (1 June 2023 00:29:43) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!

!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:29:55' prior: 50663275!
test02

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure new ofAccount: portfolio.	! !

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:29:58'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:29:58'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:29:58'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:30:17' prior: 50663458!
test02

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi') equals: 'lol'.! !

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:30:19'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:33:05' prior: 50663180 overrides: 50663114!
addName: anAccountName

	report add: (anAccountName)! !

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:33:12'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:33:12'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:33:35' prior: 50663476!
test02

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi') equals: report print.! !

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:33:36'!
ERROR!

----STARTUP---- (1 June 2023 00:33:40) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!

!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:34:14' prior: 50663180 overrides: 50663114!
addName: anAccountName

	report add: (anAccountName)! !

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:34:17'!
ERROR!

----STARTUP---- (1 June 2023 00:34:21) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!

!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:34:45' prior: 50663180 overrides: 50663114!
addName: anAccountName

	"report add: (self addDepthNumberOfTabsTo: anAccountName)"
	report add: anAccountName.! !
!Portfolio methodsFor: 'balance' stamp: 'dsf 6/1/2023 00:36:16' prior: 50663104 overrides: 50662136!
fillReport: aReport

	aReport addName: name.

	"aReport increaseDepth."

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	
	"aReport decreaseDepth."
	
	aReport addBalance: self balance.! !

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:36:32'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:36:32'!
ERROR!

----STARTUP---- (1 June 2023 00:36:37) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!

!Portfolio class methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:36:58' prior: 50662805!
named: anAccountName with: anAccount
	^((self new 
		initializeWithName: anAccountName)
		add: anAccount)
		yourself! !

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:37:06'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:37:06'!
ERROR!

----STARTUP---- (1 June 2023 00:37:10) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!


Portfolio named: 'aa' with: (ReceptiveAccount named: 'bb')!

a ReceptiveAccount!

----STARTUP---- (1 June 2023 00:38:17) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!


ReceptiveAccount named: 'Cuenta de Juampi'.!

Portfolio named: 'Portfolio de Juampi' with: (ReceptiveAccount named: 'Cuenta de Juampi')!

ReceptiveAccount named: 'Cuenta de Juampi'!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:40:50' prior: 50662940 overrides: 50662605!
print

	report := OrderedCollection new.
	
	"account fillReport: self."
	
	^report.! !

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:40:52'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:40:52'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:40:59' prior: 50663589 overrides: 50662605!
print

	report := OrderedCollection new.
	
	account fillReport: self.
	
	^report.! !
!Portfolio methodsFor: 'balance' stamp: 'dsf 6/1/2023 00:41:10' prior: 50663104 overrides: 50662136!
fillReport: aReport

	aReport addName: name.

	aReport increaseDepth.

	"accounts do: [ :anAccount | anAccount fillReport: aReport ]."
	
	aReport decreaseDepth.
	
	aReport addBalance: self balance.! !

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:41:18'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:41:18'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:41:26'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'dsf 6/1/2023 00:41:39' prior: 50663607 overrides: 50662136!
fillReport: aReport

	aReport addName: name.

	aReport increaseDepth.

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	
	aReport decreaseDepth.
	
	aReport addBalance: self balance.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'dsf 6/1/2023 00:41:55' prior: 50663015 overrides: 50662136!
fillReport: aReport

	aReport addName: name.

	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].
	
	aReport addBalance: self balance.! !

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:42:00'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:42:00'!
PASSED!

----SNAPSHOT----(1 June 2023 00:42:17) CuisUniversity-5832.image priorSource: 10612740!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:49:56'!
test03

	| johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio report |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	report := TreeStructure ofAccount: familyPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de la familia'
							     with: '  Cuenta Mia'
							     with: '  Portfolio de hijos'
							     with: '    Cuenta de Juan'
							     with: '    Cuenta de Angeles') equals: report print.! !

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 00:49:58'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 00:50:09'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 00:50:09'!
ERROR!

OrderedCollection with: 'Portfolio de la familia'
							     with: '  Cuenta Mia'
							     with: '  Portfolio de hijos'
							     with: '    Cuenta de Juan'
							     with: '    Cuenta de Angeles'!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:52:05'!
PASSED!

----STARTUP---- (1 June 2023 00:52:40) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!


!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:52:44'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:54:44'!
test03

	|  johnsAccount report |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	
	report := TreeStructure new ofAccount: johnsAccount.
	
	self assert: 
		(
		OrderedCollection
		with: 'Cuenta de Juan'
		) 
		equals: report print.
	! !

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 00:55:04'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:55:04'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:55:04'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 00:55:04'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:55:25' prior: 50663700!
test03

	|  johnsAccount report angiesAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angie'.
	
	report := TreeStructure new ofAccount: johnsAccount.
	
	self assert: 
		(
		OrderedCollection
		with: 'Cuenta de Juan'
		) 
		equals: report print.
	! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:56:30' prior: 50663721!
test03

	|  johnsAccount report angiesAccount childrenPortfolio |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angie'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	
	report := TreeStructure new ofAccount: childrenPortfolio.
	
	self assert: 
		(
		OrderedCollection
		with: 'Portfolio de hijos'
		with: '  Cuenta de Juan'
		with: '  Cuenta de Angie'
		) 
		equals: report print.
	! !

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 00:56:37'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:56:37'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:56:37'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 00:56:37'!
PASSED!

----SNAPSHOT----(1 June 2023 00:56:46) CuisUniversity-5832.image priorSource: 10623866!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:57:49' prior: 50663735!
test03

	|  johnsAccount report angiesAccount childrenPortfolio familyPortfolio myAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angie'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta de Mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	report := TreeStructure new ofAccount: familyPortfolio.
	
	self assert: 
		(
		OrderedCollection
		with: 'Portfolio de hijos'
		with: '  Cuenta de Juan'
		with: '  Cuenta de Angie'
		) 
		equals: report print.
	! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:58:23' prior: 50663767!
test03

	|  johnsAccount report angiesAccount childrenPortfolio familyPortfolio myAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angie'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta de Mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	report := TreeStructure new ofAccount: familyPortfolio.
	
	self assert: 
		(
		OrderedCollection
		with: 'Portfolio de la familia'
		with: '  Cuenta Mia'
		with: '  Portfolio de hijos'
		with: '    Cuenta de Juan'
		with: '    Cuenta de Angie'
		) 
		equals: report print.
	! !

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 00:58:25'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 00:58:58' prior: 50663792!
test03

	|  johnsAccount report angiesAccount childrenPortfolio familyPortfolio myAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angie'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	report := TreeStructure new ofAccount: familyPortfolio.
	
	self assert: 
		(
		OrderedCollection
		with: 'Portfolio de la familia'
		with: '  Cuenta Mia'
		with: '  Portfolio de hijos'
		with: '    Cuenta de Juan'
		with: '    Cuenta de Angie'
		) 
		equals: report print.
	! !

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 00:58:59'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 00:58:59'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 00:58:59'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 00:58:59'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:00:33'!
test01TransferNetOfEmptyAccountIsZero

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.! !

!methodRemoval: TransferNetTest #test01 stamp: 'dsf 6/1/2023 01:00:35'!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.!
!TreeStructure class methodsFor: 'no messages' stamp: 'dsf 6/1/2023 01:09:37'!
ofAccount: anAccount

	anAccount triedToCreateTreeStructure.
	
	self new ofAccount: anAccount.! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:10:14' prior: 50663289!
test01

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructure ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi') equals: report print.! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:10:20' prior: 50663275!
test02

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi') equals: report print.! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:10:23' prior: 50663822!
test03

	|  johnsAccount report angiesAccount childrenPortfolio familyPortfolio myAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angie'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	report := TreeStructure ofAccount: familyPortfolio.
	
	self assert: 
		(
		OrderedCollection
		with: 'Portfolio de la familia'
		with: '  Cuenta Mia'
		with: '  Portfolio de hijos'
		with: '    Cuenta de Juan'
		with: '    Cuenta de Angie'
		) 
		equals: report print.
	! !

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 01:10:24'!
ERROR!

----STARTUP---- (1 June 2023 01:10:31) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!

!TreeStructure class methodsFor: 'no messages' stamp: 'dsf 6/1/2023 01:10:49'!
ofAccount: anAccount

	self new ofAccount: anAccount.! !
!TreeStructure class methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:11:06' prior: 50663939!
ofAccount: anAccount

	^ self new ofAccount: anAccount.! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:11:20' prior: 50663289!
test01

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructure ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi') equals: report print.! !

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 01:11:20'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 01:11:20'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 01:11:20'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 01:11:20'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:11:25' prior: 50663275!
test02

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi') equals: report print.! !

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 01:11:25'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 01:11:25'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 01:11:25'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 01:11:25'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:11:29' prior: 50663735!
test03

	|  johnsAccount report angiesAccount childrenPortfolio |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angie'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	
	report := TreeStructure ofAccount: childrenPortfolio.
	
	self assert: 
		(
		OrderedCollection
		with: 'Portfolio de hijos'
		with: '  Cuenta de Juan'
		with: '  Cuenta de Angie'
		) 
		equals: report print.
	! !

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 01:11:30'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 01:11:30'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 01:11:30'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 01:11:30'!
PASSED!
!TreeStructure class methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:11:50' prior: 50663944!
ofAccount: anAccount

	anAccount triedToCreateTreeStructure.
	
	^ self new ofAccount: anAccount.! !
!Account methodsFor: 'transactions' stamp: 'dsf 6/1/2023 01:12:14'!
triedToCreateTreeStructure

	self subclassResponsibility ! !
!Portfolio methodsFor: 'transactions' stamp: 'dsf 6/1/2023 01:12:21' overrides: 50664028!
triedToCreateTreeStructure! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'dsf 6/1/2023 01:13:18' overrides: 50664028!
triedToCreateTreeStructure

	TreeStructure triedToCreateTreeStructureOfReceptiveAccountError.! !
!TreeStructure class methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:13:48'!
triedToCreateTreeStructureOfReceptiveAccountError

	self error: self triedToCreateTreeStructureOfReceptiveAccountErrorDescription.! !
!TreeStructure class methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:14:33'!
triedToCreateTreeStructureOfReceptiveAccountErrorDescription

	^ 'Se intentó crear un TreeStructure de una ReceptiveAccount y sólo se puede con portfolios'
! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:16:44' prior: 50663993!
test03

	|  johnsAccount  |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	
	self should: [ 
		TreeStructure ofAccount: johnsAccount. 
		]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = TreeStructure triedToCreateTreeStructureOfReceptiveAccountErrorDescription
			]
	
	
	! !

----SNAPSHOT----(1 June 2023 01:16:52) CuisUniversity-5832.image priorSource: 10627603!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 01:17:08'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 01:17:09'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 01:17:09'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 01:17:09'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:17:16'!
test04

	|  johnsAccount  |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	
	self should: [ 
		TreeStructure ofAccount: johnsAccount. 
		]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = TreeStructure triedToCreateTreeStructureOfReceptiveAccountErrorDescription
			]
	! !

!testRun: #TreeStructureTest #test04 stamp: 'dsf 6/1/2023 01:17:17'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'dsf 6/1/2023 01:17:17'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'dsf 6/1/2023 01:17:17'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 01:17:17'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'dsf 6/1/2023 01:17:17'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:17:56'!
test01TransferNetOfEmptyAccountIsZero

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.! !

!methodRemoval: TransferNetTest #test01 stamp: 'dsf 6/1/2023 01:17:59'!
test01

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:18:44'!
test02TransferNetGetsAffectedByTransaction

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !

!methodRemoval: TransferNetTest #test02 stamp: 'dsf 6/1/2023 01:18:46'!
test02

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:19:19'!
test03TransferNetDoesntGetAffectedByRegularTransaction

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:19:25'!
test02TransferNetGetsAffectedByTransferTransaction

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.! !

!methodRemoval: TransferNetTest #test02TransferNetGetsAffectedByTransaction stamp: 'dsf 6/1/2023 01:19:27'!
test02TransferNetGetsAffectedByTransaction

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.!

!methodRemoval: TransferNetTest #test03 stamp: 'dsf 6/1/2023 01:19:29'!
test03

	| senderAccount receiverAccount transfernet |
	
	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	Deposit register: 100 on: senderAccount.
	
	transfernet := TransferNet new ofAccount: senderAccount.
	
	self assert: -100 equals: transfernet print.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:19:46'!
test01TransferNetOfEmptyReceptiveAccountIsZero

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.! !

!methodRemoval: TransferNetTest #test01TransferNetOfEmptyAccountIsZero stamp: 'dsf 6/1/2023 01:19:48'!
test01TransferNetOfEmptyAccountIsZero

	| account transfernet |
	
	account := ReceptiveAccount new.
	
	transfernet := TransferNet new ofAccount: account.
	
	self assert: 0 equals: transfernet print.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:19:58'!
test04TransferNetOfEmptyPortfolioIsZero

	| emptyPortfolio transfernet |

	emptyPortfolio := Portfolio new.
	
	transfernet := TransferNet new ofAccount: emptyPortfolio.
	
	self assert: 0 equals: transfernet print.! !

!methodRemoval: TransferNetTest #test04 stamp: 'dsf 6/1/2023 01:20:00'!
test04

	| emptyPortfolio transfernet |

	emptyPortfolio := Portfolio new.
	
	transfernet := TransferNet new ofAccount: emptyPortfolio.
	
	self assert: 0 equals: transfernet print.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:20:23'!
test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet

	| simplePortfolio senderAccount receiverAccount transfernet |

	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	simplePortfolio := Portfolio with: senderAccount.
	
	transfernet := TransferNet new ofAccount: simplePortfolio.
		
	self assert: -100 equals: transfernet print! !

!methodRemoval: TransferNetTest #test05 stamp: 'dsf 6/1/2023 01:20:25'!
test05

	| simplePortfolio senderAccount receiverAccount transfernet |

	senderAccount := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	Transfer new from: senderAccount to: receiverAccount withValue: 100.
	simplePortfolio := Portfolio with: senderAccount.
	
	transfernet := TransferNet new ofAccount: simplePortfolio.
		
	self assert: -100 equals: transfernet print!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:21:23'!
test01TreeStructureOfEmptyPortfolioOnlyShowsItsName

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructure ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi') equals: report print.! !

!methodRemoval: TreeStructureTest #test01 stamp: 'dsf 6/1/2023 01:21:25'!
test01

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructure ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi') equals: report print.!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:22:02'!
test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi') equals: report print.! !

!methodRemoval: TreeStructureTest #test02 stamp: 'dsf 6/1/2023 01:22:05'!
test02

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
	
	report := TreeStructure ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi') equals: report print.!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:22:39'!
test04cantCreateTreeStructureOfReceptiveAccount

	|  johnsAccount  |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	
	self should: [ 
		TreeStructure ofAccount: johnsAccount. 
		]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = TreeStructure triedToCreateTreeStructureOfReceptiveAccountErrorDescription
			]
	! !

!methodRemoval: TreeStructureTest #test04 stamp: 'dsf 6/1/2023 01:22:40'!
test04

	|  johnsAccount  |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	
	self should: [ 
		TreeStructure ofAccount: johnsAccount. 
		]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = TreeStructure triedToCreateTreeStructureOfReceptiveAccountErrorDescription
			]
	!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:23:48' prior: 50664059!
test03

	| johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio report |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	report := TreeStructure ofAccount: familyPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de la familia'
							     with: '  Cuenta Mia'
							     with: '  Portfolio de hijos'
							     with: '    Cuenta de Juan'
							     with: '    Cuenta de Angeles') equals: report print.! !

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 01:23:49'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'dsf 6/1/2023 01:23:49'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'dsf 6/1/2023 01:23:49'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'dsf 6/1/2023 01:23:49'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'dsf 6/1/2023 01:23:49'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'dsf 6/1/2023 01:25:05'!
test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended

	| johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio report |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	report := TreeStructure ofAccount: familyPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de la familia'
							     with: '  Cuenta Mia'
							     with: '  Portfolio de hijos'
							     with: '    Cuenta de Juan'
							     with: '    Cuenta de Angeles') equals: report print.! !

!methodRemoval: TreeStructureTest #test03 stamp: 'dsf 6/1/2023 01:25:08'!
test03

	| johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio report |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	report := TreeStructure ofAccount: familyPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de la familia'
							     with: '  Cuenta Mia'
							     with: '  Portfolio de hijos'
							     with: '    Cuenta de Juan'
							     with: '    Cuenta de Angeles') equals: report print.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'dsf 6/1/2023 01:25:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'dsf 6/1/2023 01:25:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'dsf 6/1/2023 01:25:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'dsf 6/1/2023 01:25:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'dsf 6/1/2023 01:25:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'dsf 6/1/2023 01:25:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'dsf 6/1/2023 01:25:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'dsf 6/1/2023 01:25:27'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'dsf 6/1/2023 01:25:31'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'dsf 6/1/2023 01:25:31'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'dsf 6/1/2023 01:25:31'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'dsf 6/1/2023 01:25:31'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'dsf 6/1/2023 01:25:31'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'dsf 6/1/2023 01:25:31'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'dsf 6/1/2023 01:25:31'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'dsf 6/1/2023 01:25:33'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'dsf 6/1/2023 01:25:33'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'dsf 6/1/2023 01:25:33'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'dsf 6/1/2023 01:25:33'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'dsf 6/1/2023 01:25:33'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'dsf 6/1/2023 01:25:35'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'dsf 6/1/2023 01:25:36'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'dsf 6/1/2023 01:25:36'!
PASSED!

----SNAPSHOT----(1 June 2023 01:25:41) CuisUniversity-5832.image priorSource: 10637479!

----STARTUP---- (1 June 2023 15:31:41) as C:\Users\005675613\Documents\Inge 1\windows64\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\005675613\Documents\Inge 1\windows64\windows64\Portfolio-Solucion.st----!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 6/1/2023 15:32:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 15:32:37'!
PASSED!

----SNAPSHOT----(1 June 2023 15:32:44) CuisUniversity-5832.image priorSource: 9366758!
!Account methodsFor: 'reports' stamp: 'SF 6/1/2023 15:35:30' prior: 50665539!
triedToCreateTreeStructure! !

!methodRemoval: Portfolio #triedToCreateTreeStructure stamp: 'SF 6/1/2023 15:35:39'!
triedToCreateTreeStructure!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 6/1/2023 15:37:11'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 6/1/2023 15:37:11'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 6/1/2023 15:37:11'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 6/1/2023 15:37:11'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 6/1/2023 15:37:11'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 6/1/2023 15:37:11'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 6/1/2023 15:37:11'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 6/1/2023 15:37:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 6/1/2023 15:37:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 6/1/2023 15:37:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 6/1/2023 15:37:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 15:37:12'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 6/1/2023 15:46:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 15:46:08'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 15:46:08'!
PASSED!
!DepositLeg methodsFor: 'transfer' stamp: 'SF 6/1/2023 15:46:19' prior: 50665956!
transaction! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 6/1/2023 15:46:20'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 6/1/2023 15:46:20'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 6/1/2023 15:46:20'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 6/1/2023 15:46:20'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 6/1/2023 15:46:20'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 6/1/2023 15:46:20'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 6/1/2023 15:46:20'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 15:46:21'!
PASSED!

!methodRemoval: DepositLeg #transaction stamp: 'SF 6/1/2023 15:46:23'!
transaction!

----SNAPSHOT----(1 June 2023 15:47:00) CuisUniversity-5832.image priorSource: 10714021!
!Behavior method!
register: aTransaction
	#_coverageTracker927922_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker927922_
		cover: (28 to: 39)
		declaredAt: (28 to: 39)
		by: transactions.
	#_coverageTracker927922_
		coverAll:
			{41 to: 44}
		evaluating: [
			receiver1 add:
				(#_coverageTracker927922_
					cover: (46 to: 57)
					declaredAt: (11 to: 22)
					by: aTransaction) ]
		thatSends: #add:
		to: receiver1 ] value.! !
!Behavior method!
parentTransfer
	#_coverageTracker927929_ markAsExecuted.
	^ #_coverageTracker927929_
		cover: (22 to: 35)
		declaredAt: (22 to: 35)
		by: parentTransfer.! !
!Behavior method!
named: anAccountName
	#_coverageTracker927943_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker927943_
		coverAll:
			{25 to: 28}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker927943_
		coverAll:
			{30 to: 32}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker927943_
		coverAll:
			{34 to: 52}
		evaluating: [
			receiver2 initializeWithName:
				(#_coverageTracker927943_
					cover: (54 to: 66)
					declaredAt: (8 to: 20)
					by: anAccountName) ]
		thatSends: #initializeWithName:
		to: receiver2 ] value.! !
!Behavior method!
addDepositLeg: aDepositLeg
	#_coverageTracker927949_ markAsExecuted.! !
!Behavior method!
addToReport: aReport
	#_coverageTracker927969_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker927969_
		cover: (26 to: 32)
		declaredAt: (14 to: 20)
		by: aReport.
	#_coverageTracker927969_
		coverAll:
			{34 to: 48}
		evaluating: [
			receiver1 addWithdrawLeg:
				(#_coverageTracker927969_
					coverAll:
						{50 to: 53}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addWithdrawLeg:
		to: receiver1 ] value.! !
!Behavior method!
addWithdraw: aWithdraw
	#_coverageTracker927979_ markAsExecuted.
	[ | receiver5 |
	receiver5 _ #_coverageTracker927979_
		cover: (28 to: 33)
		declaredAt: (28 to: 33)
		by: report.
	#_coverageTracker927979_
		coverAll:
			{35 to: 38}
		evaluating: [
			receiver5 add:
				[ | receiver4 |
				receiver4 _ [ | receiver3 |
				receiver3 _ #_coverageTracker927979_
					coverAll:
						{40 to: 56}
					byLiteralOrPseudoVariable: 'Extracción por '.
				#_coverageTracker927979_
					coverAll:
						{57 to: 57}
					evaluating: [
						receiver3 ,
							[ | receiver2 |
							receiver2 _ [ | receiver1 |
							receiver1 _ #_coverageTracker927979_
								cover: (59 to: 67)
								declaredAt: (14 to: 22)
								by: aWithdraw.
							#_coverageTracker927979_
								coverAll:
									{69 to: 73}
								evaluating: [ receiver1 value ]
								thatSends: #value
								to: receiver1 ] value.
							#_coverageTracker927979_
								coverAll:
									{75 to: 82}
								evaluating: [ receiver2 asString ]
								thatSends: #asString
								to: receiver2 ] value ]
					thatSends: #,
					to: receiver3 ] value.
				#_coverageTracker927979_
					coverAll:
						{83 to: 83}
					evaluating: [
						receiver4 ,
							(#_coverageTracker927979_
								coverAll:
									{85 to: 87}
								byLiteralOrPseudoVariable: '.') ]
					thatSends: #,
					to: receiver4 ] value ]
		thatSends: #add:
		to: receiver5 ] value.! !
!Behavior method!
from: aSenderAccount to: aReceiverAccount withValue: aTransferValue
	#_coverageTracker927997_ markAsExecuted.
	#_coverageTracker927997_
		cover: (73 to: 77)
		declaredAt: (73 to: 77)
		by:
			(value _ #_coverageTracker927997_
				cover: (82 to: 95)
				declaredAt: (54 to: 67)
				by: aTransferValue).
	#_coverageTracker927997_
		cover: (100 to: 112)
		declaredAt: (100 to: 112)
		by:
			(withdrawalLeg _ [ | receiver2 |
			receiver2 _ [ | receiver1 |
			receiver1 _ #_coverageTracker927997_
				coverAll:
					{117 to: 127}
				by: WithdrawLeg.
			#_coverageTracker927997_
				coverAll:
					{129 to: 131}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value.
			#_coverageTracker927997_
				coverAll:
					{133 to: 145}
				evaluating: [
					receiver2 fromTransfer:
						(#_coverageTracker927997_
							coverAll:
								{147 to: 150}
							byLiteralOrPseudoVariable: self) ]
				thatSends: #fromTransfer:
				to: receiver2 ] value).
	#_coverageTracker927997_
		cover: (155 to: 164)
		declaredAt: (155 to: 164)
		by:
			(depositLeg _ [ | receiver4 |
			receiver4 _ [ | receiver3 |
			receiver3 _ #_coverageTracker927997_
				coverAll:
					{169 to: 178}
				by: DepositLeg.
			#_coverageTracker927997_
				coverAll:
					{180 to: 182}
				evaluating: [ receiver3 new ]
				thatSends: #new
				to: receiver3 ] value.
			#_coverageTracker927997_
				coverAll:
					{184 to: 196}
				evaluating: [
					receiver4 fromTransfer:
						(#_coverageTracker927997_
							coverAll:
								{198 to: 201}
							byLiteralOrPseudoVariable: self) ]
				thatSends: #fromTransfer:
				to: receiver4 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker927997_
		cover: (206 to: 219)
		declaredAt: (7 to: 20)
		by: aSenderAccount.
	#_coverageTracker927997_
		coverAll:
			{221 to: 229}
		evaluating: [
			receiver5 register:
				(#_coverageTracker927997_
					cover: (231 to: 243)
					declaredAt: (100 to: 112)
					by: withdrawalLeg) ]
		thatSends: #register:
		to: receiver5 ] value.
	[ | receiver6 |
	receiver6 _ #_coverageTracker927997_
		cover: (248 to: 263)
		declaredAt: (26 to: 41)
		by: aReceiverAccount.
	#_coverageTracker927997_
		coverAll:
			{265 to: 273}
		evaluating: [
			receiver6 register:
				(#_coverageTracker927997_
					cover: (275 to: 284)
					declaredAt: (155 to: 164)
					by: depositLeg) ]
		thatSends: #register:
		to: receiver6 ] value.! !
!Behavior method!
print
	#_coverageTracker928010_ markAsExecuted.
	#_coverageTracker928010_
		cover: (11 to: 16)
		declaredAt: (11 to: 16)
		by:
			(report _ [ | receiver1 |
			receiver1 _ #_coverageTracker928010_
				coverAll:
					{21 to: 37}
				by: OrderedCollection.
			#_coverageTracker928010_
				coverAll:
					{39 to: 41}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker928010_
		cover: (49 to: 55)
		declaredAt: (49 to: 55)
		by: account.
	#_coverageTracker928010_
		coverAll:
			{57 to: 67}
		evaluating: [
			receiver2 fillReport:
				(#_coverageTracker928010_
					coverAll:
						{69 to: 72}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #fillReport:
		to: receiver2 ] value.
	^ #_coverageTracker928010_
		cover: (81 to: 86)
		declaredAt: (11 to: 16)
		by: report.! !
!Behavior method!
assertCanAdd: accountToAdd
	#_coverageTracker928021_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker928021_
		coverAll:
			{33 to: 36}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928021_
		coverAll:
			{38 to: 63}
		evaluating: [
			receiver1 anyRootParentIsComposedBy:
				(#_coverageTracker928021_
					cover: (65 to: 76)
					declaredAt: (15 to: 26)
					by: accountToAdd) ]
		thatSends: #anyRootParentIsComposedBy:
		to: receiver1 ] value.
	#_coverageTracker928021_
		coverAll:
			{79 to: 85}
		evaluating: [
			receiver3 ifTrue: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker928021_
					coverAll:
						{89 to: 92}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker928021_
					coverAll:
						{94 to: 115}
					evaluating: [ receiver2 signalCanNotAddAccount ]
					thatSends: #signalCanNotAddAccount
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.! !
!Behavior method!
fillReport: aReport
	#_coverageTracker928029_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker928029_
		cover: (25 to: 31)
		declaredAt: (13 to: 19)
		by: aReport.
	#_coverageTracker928029_
		coverAll:
			{33 to: 40}
		evaluating: [
			receiver1 addName:
				(#_coverageTracker928029_
					cover: (42 to: 45)
					declaredAt: (42 to: 45)
					by: name) ]
		thatSends: #addName:
		to: receiver1 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker928029_
		cover: (52 to: 63)
		declaredAt: (52 to: 63)
		by: transactions.
	#_coverageTracker928029_
		coverAll:
			{65 to: 67}
		evaluating: [
			receiver3 do: [ :aTransaction |
				[ | receiver2 |
				receiver2 _ #_coverageTracker928029_
					cover: (87 to: 98)
					declaredAt: (72 to: 83)
					by: aTransaction.
				#_coverageTracker928029_
					coverAll:
						{100 to: 111}
					evaluating: [
						receiver2 addToReport:
							(#_coverageTracker928029_
								cover: (113 to: 119)
								declaredAt: (13 to: 19)
								by: aReport) ]
					thatSends: #addToReport:
					to: receiver2 ] value ]]
		thatSends: #do:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker928029_
		cover: (129 to: 135)
		declaredAt: (13 to: 19)
		by: aReport.
	#_coverageTracker928029_
		coverAll:
			{137 to: 147}
		evaluating: [
			receiver5 addBalance:
				[ | receiver4 |
				receiver4 _ #_coverageTracker928029_
					coverAll:
						{149 to: 152}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker928029_
					coverAll:
						{154 to: 160}
					evaluating: [ receiver4 balance ]
					thatSends: #balance
					to: receiver4 ] value ]
		thatSends: #addBalance:
		to: receiver5 ] value.! !
!Behavior method!
addName: anAccountName
	#_coverageTracker928038_ markAsExecuted.! !
!Behavior method!
addToReport: aReport
	#_coverageTracker928050_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker928050_
		cover: (26 to: 32)
		declaredAt: (14 to: 20)
		by: aReport.
	#_coverageTracker928050_
		coverAll:
			{34 to: 45}
		evaluating: [
			receiver1 addWithdraw:
				(#_coverageTracker928050_
					coverAll:
						{47 to: 50}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addWithdraw:
		to: receiver1 ] value.! !
!Behavior method!
ofAccount: anAccount
	#_coverageTracker928056_ markAsExecuted.
	#_coverageTracker928056_
		cover: (24 to: 30)
		declaredAt: (24 to: 30)
		by:
			(account _ #_coverageTracker928056_
				cover: (35 to: 43)
				declaredAt: (12 to: 20)
				by: anAccount).! !
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	#_coverageTracker928063_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker928063_
		cover: (50 to: 74)
		declaredAt: (20 to: 44)
		by: aCollectionOfTransactions.
	#_coverageTracker928063_
		coverAll:
			{76 to: 82}
		evaluating: [
			receiver1 addAll:
				(#_coverageTracker928063_
					cover: (84 to: 95)
					declaredAt: (84 to: 95)
					by: transactions) ]
		thatSends: #addAll:
		to: receiver1 ] value.! !
!Behavior method!
accountsIncludes: anAccount
	#_coverageTracker928069_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker928069_
		cover: (34 to: 41)
		declaredAt: (34 to: 41)
		by: accounts.
	#_coverageTracker928069_
		coverAll:
			{43 to: 51}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker928069_
					cover: (53 to: 61)
					declaredAt: (19 to: 27)
					by: anAccount) ]
		thatSends: #includes:
		to: receiver1 ] value.! !
!Behavior method!
value
	#_coverageTracker928076_ markAsExecuted.
	^ #_coverageTracker928076_
		cover: (13 to: 17)
		declaredAt: (13 to: 17)
		by: value.! !
!Behavior method!
accountsSize
	#_coverageTracker928089_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker928089_
		cover: (19 to: 26)
		declaredAt: (19 to: 26)
		by: accounts.
	#_coverageTracker928089_
		coverAll:
			{28 to: 31}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
with: anAccount with: anotherAccount
	#_coverageTracker928095_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ [ | receiver1 |
	receiver1 _ #_coverageTracker928095_
		coverAll:
			{43 to: 46}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928095_
		coverAll:
			{48 to: 50}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker928095_
		coverAll:
			{56 to: 59}
		evaluating: [
			receiver2 add:
				(#_coverageTracker928095_
					cover: (61 to: 69)
					declaredAt: (7 to: 15)
					by: anAccount) ]
		thatSends: #add:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker928095_
		coverAll:
			{75 to: 78}
		evaluating: [
			receiver3 add:
				(#_coverageTracker928095_
					cover: (80 to: 93)
					declaredAt: (23 to: 36)
					by: anotherAccount) ]
		thatSends: #add:
		to: receiver3 ] value.
	[ | receiver4 |
	receiver4 _ cascadeReceiver.
	#_coverageTracker928095_
		coverAll:
			{99 to: 106}
		evaluating: [ receiver4 yourself ]
		thatSends: #yourself
		to: receiver4 ] value ] value.! !
!Behavior method!
addedTo: aPortfolio
	#_coverageTracker928115_ markAsExecuted.! !
!Behavior method!
canNotAddAccountErrorMessage
	#_coverageTracker928118_ markAsExecuted.
	^ #_coverageTracker928118_
		coverAll:
			{36 to: 80}
		byLiteralOrPseudoVariable: 'Can not add repeated account to a portfolio'.! !
!Behavior method!
isComposedBy: anAccount
	#_coverageTracker928126_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 _ [ | receiver1 |
	receiver1 _ #_coverageTracker928126_
		coverAll:
			{31 to: 34}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928126_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver1 =
				(#_coverageTracker928126_
					cover: (38 to: 46)
					declaredAt: (15 to: 23)
					by: anAccount) ]
		thatSends: #=
		to: receiver1 ] value.
	#_coverageTracker928126_
		coverAll:
			{48 to: 50}
		evaluating: [
			receiver6 or: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker928126_
					cover: (54 to: 61)
					declaredAt: (54 to: 61)
					by: accounts.
				#_coverageTracker928126_
					coverAll:
						{63 to: 73}
					evaluating: [
						receiver5 anySatisfy: [ :composedAccount |
							[ | receiver4 |
							receiver4 _ [ | receiver2 |
							receiver2 _ #_coverageTracker928126_
								cover: (97 to: 111)
								declaredAt: (78 to: 92)
								by: composedAccount.
							#_coverageTracker928126_
								coverAll:
									{113 to: 125}
								evaluating: [
									receiver2 isComposedBy:
										(#_coverageTracker928126_
											cover: (127 to: 135)
											declaredAt: (15 to: 23)
											by: anAccount) ]
								thatSends: #isComposedBy:
								to: receiver2 ] value.
							#_coverageTracker928126_
								coverAll:
									{138 to: 140}
								evaluating: [
									receiver4 or: [
										[ | receiver3 |
										receiver3 _ #_coverageTracker928126_
											cover: (144 to: 152)
											declaredAt: (15 to: 23)
											by: anAccount.
										#_coverageTracker928126_
											coverAll:
												{154 to: 166}
											evaluating: [
												receiver3 isComposedBy:
													(#_coverageTracker928126_
														cover: (168 to: 182)
														declaredAt: (78 to: 92)
														by: composedAccount) ]
											thatSends: #isComposedBy:
											to: receiver3 ] value ]]
								thatSends: #or:
								to: receiver4 ] value ]]
					thatSends: #anySatisfy:
					to: receiver5 ] value ]]
		thatSends: #or:
		to: receiver6 ] value.! !
!Behavior method!
triedToCreateTreeStructureOfReceptiveAccountError
	#_coverageTracker928136_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker928136_
		coverAll:
			{55 to: 58}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928136_
		coverAll:
			{60 to: 65}
		evaluating: [
			receiver2 error:
				[ | receiver1 |
				receiver1 _ #_coverageTracker928136_
					coverAll:
						{67 to: 70}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker928136_
					coverAll:
						{72 to: 131}
					evaluating: [ receiver1 triedToCreateTreeStructureOfReceptiveAccountErrorDescription ]
					thatSends: #triedToCreateTreeStructureOfReceptiveAccountErrorDescription
					to: receiver1 ] value ]
		thatSends: #error:
		to: receiver2 ] value.! !
!Behavior method!
addDepositLeg: aDepositLeg
	#_coverageTracker928151_ markAsExecuted.
	[ | receiver5 |
	receiver5 _ #_coverageTracker928151_
		cover: (32 to: 37)
		declaredAt: (32 to: 37)
		by: report.
	#_coverageTracker928151_
		coverAll:
			{39 to: 42}
		evaluating: [
			receiver5 add:
				[ | receiver4 |
				receiver4 _ [ | receiver3 |
				receiver3 _ #_coverageTracker928151_
					coverAll:
						{44 to: 74}
					byLiteralOrPseudoVariable: 'Entrada por transferencia de '.
				#_coverageTracker928151_
					coverAll:
						{75 to: 75}
					evaluating: [
						receiver3 ,
							[ | receiver2 |
							receiver2 _ [ | receiver1 |
							receiver1 _ #_coverageTracker928151_
								cover: (77 to: 87)
								declaredAt: (16 to: 26)
								by: aDepositLeg.
							#_coverageTracker928151_
								coverAll:
									{89 to: 93}
								evaluating: [ receiver1 value ]
								thatSends: #value
								to: receiver1 ] value.
							#_coverageTracker928151_
								coverAll:
									{95 to: 102}
								evaluating: [ receiver2 asString ]
								thatSends: #asString
								to: receiver2 ] value ]
					thatSends: #,
					to: receiver3 ] value.
				#_coverageTracker928151_
					coverAll:
						{103 to: 103}
					evaluating: [
						receiver4 ,
							(#_coverageTracker928151_
								coverAll:
									{105 to: 107}
								byLiteralOrPseudoVariable: '.') ]
					thatSends: #,
					to: receiver4 ] value ]
		thatSends: #add:
		to: receiver5 ] value.! !
!Behavior method!
addToReport: aReport
	#_coverageTracker928158_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker928158_
		cover: (26 to: 32)
		declaredAt: (14 to: 20)
		by: aReport.
	#_coverageTracker928158_
		coverAll:
			{34 to: 47}
		evaluating: [
			receiver1 addDepositLeg:
				(#_coverageTracker928158_
					coverAll:
						{49 to: 52}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addDepositLeg:
		to: receiver1 ] value.! !
!Behavior method!
initialize
	#_coverageTracker928164_ markAsExecuted.
	#_coverageTracker928164_
		cover: (16 to: 23)
		declaredAt: (16 to: 23)
		by:
			(accounts _ [ | receiver1 |
			receiver1 _ #_coverageTracker928164_
				coverAll:
					{28 to: 44}
				by: OrderedCollection.
			#_coverageTracker928164_
				coverAll:
					{46 to: 48}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker928164_
		cover: (53 to: 59)
		declaredAt: (53 to: 59)
		by:
			(parents _ [ | receiver2 |
			receiver2 _ #_coverageTracker928164_
				coverAll:
					{64 to: 80}
				by: OrderedCollection.
			#_coverageTracker928164_
				coverAll:
					{82 to: 84}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).! !
!Behavior method!
addRootParentsTo: rootParents
	#_coverageTracker928181_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ #_coverageTracker928181_
		cover: (35 to: 41)
		declaredAt: (35 to: 41)
		by: parents.
	#_coverageTracker928181_
		coverAll:
			{47 to: 54. 85 to: 95}
		evaluating: [
			receiver4
				ifEmpty: [
					[ | receiver1 |
					receiver1 _ #_coverageTracker928181_
						cover: (58 to: 68)
						declaredAt: (19 to: 29)
						by: rootParents.
					#_coverageTracker928181_
						coverAll:
							{70 to: 73}
						evaluating: [
							receiver1 add:
								(#_coverageTracker928181_
									coverAll:
										{75 to: 78}
									byLiteralOrPseudoVariable: self) ]
						thatSends: #add:
						to: receiver1 ] value ]
				ifNotEmpty: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker928181_
						cover: (99 to: 105)
						declaredAt: (35 to: 41)
						by: parents.
					#_coverageTracker928181_
						coverAll:
							{107 to: 109}
						evaluating: [
							receiver3 do: [ :aParent |
								[ | receiver2 |
								receiver2 _ #_coverageTracker928181_
									cover: (124 to: 130)
									declaredAt: (114 to: 120)
									by: aParent.
								#_coverageTracker928181_
									coverAll:
										{132 to: 148}
									evaluating: [
										receiver2 addRootParentsTo:
											(#_coverageTracker928181_
												cover: (150 to: 160)
												declaredAt: (19 to: 29)
												by: rootParents) ]
									thatSends: #addRootParentsTo:
									to: receiver2 ] value ]]
						thatSends: #do:
						to: receiver3 ] value ]]
		thatSends: #ifEmpty:ifNotEmpty:
		to: receiver4 ] value.! !
!Behavior method!
value
	#_coverageTracker928189_ markAsExecuted.
	^ #_coverageTracker928189_
		cover: (13 to: 17)
		declaredAt: (13 to: 17)
		by: value.! !
!Behavior method!
transfer
	#_coverageTracker928220_ markAsExecuted.
	^ #_coverageTracker928220_
		coverAll:
			{16 to: 19}
		byLiteralOrPseudoVariable: self.! !
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	#_coverageTracker928251_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker928251_
		cover: (50 to: 57)
		declaredAt: (50 to: 57)
		by: accounts.
	#_coverageTracker928251_
		coverAll:
			{59 to: 61}
		evaluating: [
			receiver2 do: [ :anAccount |
				[ | receiver1 |
				receiver1 _ #_coverageTracker928251_
					cover: (78 to: 86)
					declaredAt: (66 to: 74)
					by: anAccount.
				#_coverageTracker928251_
					coverAll:
						{88 to: 105}
					evaluating: [
						receiver1 addTransactionsTo:
							(#_coverageTracker928251_
								cover: (107 to: 131)
								declaredAt: (20 to: 44)
								by: aCollectionOfTransactions) ]
					thatSends: #addTransactionsTo:
					to: receiver1 ] value ]]
		thatSends: #do:
		to: receiver2 ] value.! !
!Behavior method!
affectBalance: aBalance
	#_coverageTracker928289_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker928289_
		cover: (30 to: 37)
		declaredAt: (16 to: 23)
		by: aBalance.
	#_coverageTracker928289_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver1 -
				(#_coverageTracker928289_
					cover: (41 to: 45)
					declaredAt: (41 to: 45)
					by: value) ]
		thatSends: #-
		to: receiver1 ] value.! !
!Behavior method!
addWithdraw: aWithdraw
	#_coverageTracker928350_ markAsExecuted.! !
!Behavior method!
affectBalance: aBalance
	#_coverageTracker928384_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker928384_
		cover: (30 to: 37)
		declaredAt: (16 to: 23)
		by: aBalance.
	#_coverageTracker928384_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver2 +
				[ | receiver1 |
				receiver1 _ #_coverageTracker928384_
					coverAll:
						{41 to: 44}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker928384_
					coverAll:
						{46 to: 50}
					evaluating: [ receiver1 value ]
					thatSends: #value
					to: receiver1 ] value ]
		thatSends: #+
		to: receiver2 ] value.! !
!Behavior method!
balance
	#_coverageTracker928417_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker928417_
		cover: (14 to: 25)
		declaredAt: (14 to: 25)
		by: transactions.
	#_coverageTracker928417_
		coverAll:
			{31 to: 37. 44 to: 48}
		evaluating: [
			receiver2
				inject:
					(#_coverageTracker928417_
						coverAll:
							{39 to: 39}
						byLiteralOrPseudoVariable: 0)
				into: [ :currentBalance :transaction |
					[ | receiver1 |
					receiver1 _ #_coverageTracker928417_
						cover: (83 to: 93)
						declaredAt: (69 to: 79)
						by: transaction.
					#_coverageTracker928417_
						coverAll:
							{95 to: 108}
						evaluating: [
							receiver1 affectBalance:
								(#_coverageTracker928417_
									cover: (110 to: 123)
									declaredAt: (53 to: 66)
									by: currentBalance) ]
						thatSends: #affectBalance:
						to: receiver1 ] value ]]
		thatSends: #inject:into:
		to: receiver2 ] value.! !
!Behavior method!
addToReport: aReport
	#_coverageTracker928459_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker928459_
		cover: (26 to: 32)
		declaredAt: (14 to: 20)
		by: aReport.
	#_coverageTracker928459_
		coverAll:
			{34 to: 44}
		evaluating: [
			receiver1 addDeposit:
				(#_coverageTracker928459_
					coverAll:
						{46 to: 49}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addDeposit:
		to: receiver1 ] value.! !
!Behavior method!
value
	#_coverageTracker928466_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker928466_
		cover: (13 to: 26)
		declaredAt: (13 to: 26)
		by: parentTransfer.
	#_coverageTracker928466_
		coverAll:
			{28 to: 32}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !
!Behavior method!
affectBalance: aBalance
	#_coverageTracker928475_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker928475_
		cover: (30 to: 37)
		declaredAt: (16 to: 23)
		by: aBalance.
	#_coverageTracker928475_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver2 -
				[ | receiver1 |
				receiver1 _ #_coverageTracker928475_
					coverAll:
						{41 to: 44}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker928475_
					coverAll:
						{46 to: 50}
					evaluating: [ receiver1 value ]
					thatSends: #value
					to: receiver1 ] value ]
		thatSends: #-
		to: receiver2 ] value.! !
!Behavior method!
addDepthNumberOfTabsTo: anAccountName
	| tabbedName |
	#_coverageTracker928481_ markAsExecuted.
	#_coverageTracker928481_
		cover: (63 to: 72)
		declaredAt: (45 to: 54)
		by:
			(tabbedName _ #_coverageTracker928481_
				cover: (77 to: 89)
				declaredAt: (25 to: 37)
				by: anAccountName).
	[ | receiver2 |
	receiver2 _ #_coverageTracker928481_
		cover: (94 to: 98)
		declaredAt: (94 to: 98)
		by: depth.
	#_coverageTracker928481_
		coverAll:
			{100 to: 111}
		evaluating: [
			receiver2 timesRepeat: [
				#_coverageTracker928481_
					cover: (138 to: 147)
					declaredAt: (45 to: 54)
					by:
						(tabbedName _ [ | receiver1 |
						receiver1 _ #_coverageTracker928481_
							coverAll:
								{132 to: 135}
							byLiteralOrPseudoVariable: '  '.
						#_coverageTracker928481_
							coverAll:
								{136 to: 136}
							evaluating: [
								receiver1 ,
									(#_coverageTracker928481_
										cover: (118 to: 127)
										declaredAt: (45 to: 54)
										by: tabbedName) ]
							thatSends: #,
							to: receiver1 ] value) ]]
		thatSends: #timesRepeat:
		to: receiver2 ] value.
	^ #_coverageTracker928481_
		cover: (160 to: 169)
		declaredAt: (45 to: 54)
		by: tabbedName.! !
!Behavior method!
addDeposit: aDeposit
	#_coverageTracker928497_ markAsExecuted.! !
!Behavior method!
addDeposit: aDeposit
	#_coverageTracker928504_ markAsExecuted.
	[ | receiver5 |
	receiver5 _ #_coverageTracker928504_
		cover: (26 to: 31)
		declaredAt: (26 to: 31)
		by: report.
	#_coverageTracker928504_
		coverAll:
			{33 to: 36}
		evaluating: [
			receiver5 add:
				[ | receiver4 |
				receiver4 _ [ | receiver3 |
				receiver3 _ #_coverageTracker928504_
					coverAll:
						{38 to: 52}
					byLiteralOrPseudoVariable: 'Depósito por '.
				#_coverageTracker928504_
					coverAll:
						{53 to: 53}
					evaluating: [
						receiver3 ,
							[ | receiver2 |
							receiver2 _ [ | receiver1 |
							receiver1 _ #_coverageTracker928504_
								cover: (55 to: 62)
								declaredAt: (13 to: 20)
								by: aDeposit.
							#_coverageTracker928504_
								coverAll:
									{64 to: 68}
								evaluating: [ receiver1 value ]
								thatSends: #value
								to: receiver1 ] value.
							#_coverageTracker928504_
								coverAll:
									{70 to: 77}
								evaluating: [ receiver2 asString ]
								thatSends: #asString
								to: receiver2 ] value ]
					thatSends: #,
					to: receiver3 ] value.
				#_coverageTracker928504_
					coverAll:
						{78 to: 78}
					evaluating: [
						receiver4 ,
							(#_coverageTracker928504_
								coverAll:
									{80 to: 82}
								byLiteralOrPseudoVariable: '.') ]
					thatSends: #,
					to: receiver4 ] value ]
		thatSends: #add:
		to: receiver5 ] value.! !
!Behavior method!
affectBalance: aBalance
	#_coverageTracker928530_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker928530_
		cover: (30 to: 37)
		declaredAt: (16 to: 23)
		by: aBalance.
	#_coverageTracker928530_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver1 +
				(#_coverageTracker928530_
					cover: (41 to: 45)
					declaredAt: (41 to: 45)
					by: value) ]
		thatSends: #+
		to: receiver1 ] value.! !
!Behavior method!
accountsIsEmpty
	#_coverageTracker928540_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker928540_
		cover: (22 to: 29)
		declaredAt: (22 to: 29)
		by: accounts.
	#_coverageTracker928540_
		coverAll:
			{31 to: 37}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.! !
!Behavior method!
addDepositLeg: aDepositLeg
	#_coverageTracker928549_ markAsExecuted.
	#_coverageTracker928549_
		cover: (42 to: 47)
		declaredAt: (32 to: 37)
		by:
			(report _ [ | receiver2 |
			receiver2 _ #_coverageTracker928549_
				cover: (32 to: 37)
				declaredAt: (32 to: 37)
				by: report.
			#_coverageTracker928549_
				coverAll:
					{49 to: 49}
				evaluating: [
					receiver2 +
						[ | receiver1 |
						receiver1 _ #_coverageTracker928549_
							cover: (51 to: 61)
							declaredAt: (16 to: 26)
							by: aDepositLeg.
						#_coverageTracker928549_
							coverAll:
								{63 to: 67}
							evaluating: [ receiver1 value ]
							thatSends: #value
							to: receiver1 ] value ]
				thatSends: #+
				to: receiver2 ] value).! !
!Behavior method!
print
	#_coverageTracker928561_ markAsExecuted.
	#_coverageTracker928561_
		cover: (11 to: 16)
		declaredAt: (11 to: 16)
		by:
			(report _ [ | receiver1 |
			receiver1 _ #_coverageTracker928561_
				coverAll:
					{21 to: 37}
				by: OrderedCollection.
			#_coverageTracker928561_
				coverAll:
					{39 to: 41}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker928561_
		cover: (49 to: 55)
		declaredAt: (49 to: 55)
		by: account.
	#_coverageTracker928561_
		coverAll:
			{57 to: 67}
		evaluating: [
			receiver2 fillReport:
				(#_coverageTracker928561_
					coverAll:
						{69 to: 72}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #fillReport:
		to: receiver2 ] value.
	^ #_coverageTracker928561_
		cover: (81 to: 86)
		declaredAt: (11 to: 16)
		by: report.! !
!Behavior method!
for: aValue
	#_coverageTracker928568_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker928568_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928568_
		coverAll:
			{24 to: 26}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker928568_
		coverAll:
			{28 to: 41}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker928568_
					cover: (43 to: 48)
					declaredAt: (6 to: 11)
					by: aValue) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
named: anAccountName with: anAccount
	#_coverageTracker928575_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker928575_
		coverAll:
			{42 to: 45}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928575_
		coverAll:
			{47 to: 49}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker928575_
		coverAll:
			{55 to: 73}
		evaluating: [
			receiver2 initializeWithName:
				(#_coverageTracker928575_
					cover: (75 to: 87)
					declaredAt: (8 to: 20)
					by: anAccountName) ]
		thatSends: #initializeWithName:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker928575_
		coverAll:
			{93 to: 96}
		evaluating: [
			receiver3 add:
				(#_coverageTracker928575_
					cover: (98 to: 106)
					declaredAt: (28 to: 36)
					by: anAccount) ]
		thatSends: #add:
		to: receiver3 ] value.
	[ | receiver4 |
	receiver4 _ cascadeReceiver.
	#_coverageTracker928575_
		coverAll:
			{112 to: 119}
		evaluating: [ receiver4 yourself ]
		thatSends: #yourself
		to: receiver4 ] value ] value.! !
!Behavior method!
ofAccount: anAccount
	#_coverageTracker928582_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker928582_
		cover: (26 to: 34)
		declaredAt: (12 to: 20)
		by: anAccount.
	#_coverageTracker928582_
		coverAll:
			{36 to: 61}
		evaluating: [ receiver1 triedToCreateTreeStructure ]
		thatSends: #triedToCreateTreeStructure
		to: receiver1 ] value.
	^ [ | receiver3 |
	receiver3 _ [ | receiver2 |
	receiver2 _ #_coverageTracker928582_
		coverAll:
			{71 to: 74}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928582_
		coverAll:
			{76 to: 78}
		evaluating: [ receiver2 new ]
		thatSends: #new
		to: receiver2 ] value.
	#_coverageTracker928582_
		coverAll:
			{80 to: 89}
		evaluating: [
			receiver3 ofAccount:
				(#_coverageTracker928582_
					cover: (91 to: 99)
					declaredAt: (12 to: 20)
					by: anAccount) ]
		thatSends: #ofAccount:
		to: receiver3 ] value.! !
!Behavior method!
fillReport: aReport
	#_coverageTracker928597_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker928597_
		cover: (25 to: 31)
		declaredAt: (13 to: 19)
		by: aReport.
	#_coverageTracker928597_
		coverAll:
			{33 to: 40}
		evaluating: [
			receiver1 addName:
				(#_coverageTracker928597_
					cover: (42 to: 45)
					declaredAt: (42 to: 45)
					by: name) ]
		thatSends: #addName:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker928597_
		cover: (52 to: 58)
		declaredAt: (13 to: 19)
		by: aReport.
	#_coverageTracker928597_
		coverAll:
			{60 to: 72}
		evaluating: [ receiver2 increaseDepth ]
		thatSends: #increaseDepth
		to: receiver2 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker928597_
		cover: (79 to: 86)
		declaredAt: (79 to: 86)
		by: accounts.
	#_coverageTracker928597_
		coverAll:
			{88 to: 90}
		evaluating: [
			receiver4 do: [ :anAccount |
				[ | receiver3 |
				receiver3 _ #_coverageTracker928597_
					cover: (107 to: 115)
					declaredAt: (95 to: 103)
					by: anAccount.
				#_coverageTracker928597_
					coverAll:
						{117 to: 127}
					evaluating: [
						receiver3 fillReport:
							(#_coverageTracker928597_
								cover: (129 to: 135)
								declaredAt: (13 to: 19)
								by: aReport) ]
					thatSends: #fillReport:
					to: receiver3 ] value ]]
		thatSends: #do:
		to: receiver4 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker928597_
		cover: (145 to: 151)
		declaredAt: (13 to: 19)
		by: aReport.
	#_coverageTracker928597_
		coverAll:
			{153 to: 165}
		evaluating: [ receiver5 decreaseDepth ]
		thatSends: #decreaseDepth
		to: receiver5 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker928597_
		cover: (173 to: 179)
		declaredAt: (13 to: 19)
		by: aReport.
	#_coverageTracker928597_
		coverAll:
			{181 to: 191}
		evaluating: [
			receiver7 addBalance:
				[ | receiver6 |
				receiver6 _ #_coverageTracker928597_
					coverAll:
						{193 to: 196}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker928597_
					coverAll:
						{198 to: 204}
					evaluating: [ receiver6 balance ]
					thatSends: #balance
					to: receiver6 ] value ]
		thatSends: #addBalance:
		to: receiver7 ] value.! !
!Behavior method!
triedToCreateTreeStructure
	#_coverageTracker928608_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker928608_
		coverAll:
			{32 to: 44}
		by: TreeStructure.
	#_coverageTracker928608_
		coverAll:
			{46 to: 94}
		evaluating: [ receiver1 triedToCreateTreeStructureOfReceptiveAccountError ]
		thatSends: #triedToCreateTreeStructureOfReceptiveAccountError
		to: receiver1 ] value.! !
!Behavior method!
transactions
	#_coverageTracker928615_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker928615_
		cover: (21 to: 32)
		declaredAt: (21 to: 32)
		by: transactions.
	#_coverageTracker928615_
		coverAll:
			{34 to: 37}
		evaluating: [ receiver1 copy ]
		thatSends: #copy
		to: receiver1 ] value.! !
!Behavior method!
balance
	#_coverageTracker928628_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker928628_
		cover: (15 to: 22)
		declaredAt: (15 to: 22)
		by: accounts.
	#_coverageTracker928628_
		coverAll:
			{24 to: 27. 64 to: 71}
		evaluating: [
			receiver2
				sum: [ :anAccount |
					[ | receiver1 |
					receiver1 _ #_coverageTracker928628_
						cover: (44 to: 52)
						declaredAt: (32 to: 40)
						by: anAccount.
					#_coverageTracker928628_
						coverAll:
							{54 to: 60}
						evaluating: [ receiver1 balance ]
						thatSends: #balance
						to: receiver1 ] value ]
				ifEmpty: [
					#_coverageTracker928628_
						coverAll:
							{75 to: 75}
						byLiteralOrPseudoVariable: 0 ]]
		thatSends: #sum:ifEmpty:
		to: receiver2 ] value.! !
!Behavior method!
initialize
	#_coverageTracker928636_ markAsExecuted.
	#_coverageTracker928636_
		coverAll:
			{22 to: 31}
		evaluating: [ super initialize ]
		thatSends: #initialize
		to: super.
	#_coverageTracker928636_
		cover: (36 to: 47)
		declaredAt: (36 to: 47)
		by:
			(transactions _ [ | receiver1 |
			receiver1 _ #_coverageTracker928636_
				coverAll:
					{52 to: 68}
				by: OrderedCollection.
			#_coverageTracker928636_
				coverAll:
					{70 to: 72}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
withdrawalLeg
	#_coverageTracker928659_ markAsExecuted.
	^ #_coverageTracker928659_
		cover: (21 to: 33)
		declaredAt: (21 to: 33)
		by: withdrawalLeg.! !
!Behavior method!
named: anAccountName
	#_coverageTracker928691_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker928691_
		coverAll:
			{27 to: 30}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928691_
		coverAll:
			{32 to: 34}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker928691_
		coverAll:
			{36 to: 54}
		evaluating: [
			receiver2 initializeWithName:
				(#_coverageTracker928691_
					cover: (56 to: 68)
					declaredAt: (8 to: 20)
					by: anAccountName) ]
		thatSends: #initializeWithName:
		to: receiver2 ] value.! !
!Behavior method!
rootParents
	| rootParents |
	#_coverageTracker928716_ markAsExecuted.
	#_coverageTracker928716_
		cover: (38 to: 48)
		declaredAt: (19 to: 29)
		by:
			(rootParents _ [ | receiver1 |
			receiver1 _ #_coverageTracker928716_
				coverAll:
					{53 to: 55}
				by: Set.
			#_coverageTracker928716_
				coverAll:
					{57 to: 59}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker928716_
		coverAll:
			{67 to: 70}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928716_
		coverAll:
			{72 to: 88}
		evaluating: [
			receiver2 addRootParentsTo:
				(#_coverageTracker928716_
					cover: (90 to: 100)
					declaredAt: (19 to: 29)
					by: rootParents) ]
		thatSends: #addRootParentsTo:
		to: receiver2 ] value.
	^ #_coverageTracker928716_
		cover: (110 to: 120)
		declaredAt: (19 to: 29)
		by: rootParents.! !
!Behavior method!
with: anAccount
	#_coverageTracker928750_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ [ | receiver1 |
	receiver1 _ #_coverageTracker928750_
		coverAll:
			{22 to: 25}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928750_
		coverAll:
			{27 to: 29}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker928750_
		coverAll:
			{35 to: 38}
		evaluating: [
			receiver2 add:
				(#_coverageTracker928750_
					cover: (40 to: 48)
					declaredAt: (7 to: 15)
					by: anAccount) ]
		thatSends: #add:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker928750_
		coverAll:
			{54 to: 61}
		evaluating: [ receiver3 yourself ]
		thatSends: #yourself
		to: receiver3 ] value ] value.! !
!Behavior method!
value
	#_coverageTracker928775_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker928775_
		cover: (13 to: 26)
		declaredAt: (13 to: 26)
		by: parentTransfer.
	#_coverageTracker928775_
		coverAll:
			{28 to: 32}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !
!Behavior method!
hasRegistered: aTransaction
	#_coverageTracker928814_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker928814_
		cover: (34 to: 41)
		declaredAt: (34 to: 41)
		by: accounts.
	#_coverageTracker928814_
		coverAll:
			{43 to: 53}
		evaluating: [
			receiver2 anySatisfy: [ :anAccount |
				[ | receiver1 |
				receiver1 _ #_coverageTracker928814_
					cover: (70 to: 78)
					declaredAt: (58 to: 66)
					by: anAccount.
				#_coverageTracker928814_
					coverAll:
						{80 to: 93}
					evaluating: [
						receiver1 hasRegistered:
							(#_coverageTracker928814_
								cover: (95 to: 106)
								declaredAt: (16 to: 27)
								by: aTransaction) ]
					thatSends: #hasRegistered:
					to: receiver1 ] value ]]
		thatSends: #anySatisfy:
		to: receiver2 ] value.! !
!Behavior method!
increaseDepth
	#_coverageTracker928843_ markAsExecuted.! !
!Behavior method!
hasRegistered: aTransaction
	#_coverageTracker928851_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker928851_
		cover: (35 to: 46)
		declaredAt: (35 to: 46)
		by: transactions.
	#_coverageTracker928851_
		coverAll:
			{48 to: 56}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker928851_
					cover: (58 to: 69)
					declaredAt: (16 to: 27)
					by: aTransaction) ]
		thatSends: #includes:
		to: receiver1 ] value.! !
!Behavior method!
add: accountToAdd
	#_coverageTracker928864_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker928864_
		coverAll:
			{23 to: 26}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928864_
		coverAll:
			{28 to: 40}
		evaluating: [
			receiver1 assertCanAdd:
				(#_coverageTracker928864_
					cover: (42 to: 53)
					declaredAt: (6 to: 17)
					by: accountToAdd) ]
		thatSends: #assertCanAdd:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker928864_
		cover: (61 to: 68)
		declaredAt: (61 to: 68)
		by: accounts.
	#_coverageTracker928864_
		coverAll:
			{70 to: 73}
		evaluating: [
			receiver2 add:
				(#_coverageTracker928864_
					cover: (75 to: 86)
					declaredAt: (6 to: 17)
					by: accountToAdd) ]
		thatSends: #add:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker928864_
		cover: (94 to: 105)
		declaredAt: (6 to: 17)
		by: accountToAdd.
	#_coverageTracker928864_
		coverAll:
			{107 to: 114}
		evaluating: [
			receiver3 addedTo:
				(#_coverageTracker928864_
					coverAll:
						{116 to: 119}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addedTo:
		to: receiver3 ] value.! !
!Behavior method!
for: aValue
	#_coverageTracker928874_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker928874_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928874_
		coverAll:
			{24 to: 26}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker928874_
		coverAll:
			{28 to: 41}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker928874_
					cover: (43 to: 48)
					declaredAt: (6 to: 11)
					by: aValue) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
transactions
	| transactions |
	#_coverageTracker928882_ markAsExecuted.
	#_coverageTracker928882_
		cover: (41 to: 52)
		declaredAt: (21 to: 32)
		by:
			(transactions _ [ | receiver1 |
			receiver1 _ #_coverageTracker928882_
				coverAll:
					{57 to: 73}
				by: OrderedCollection.
			#_coverageTracker928882_
				coverAll:
					{75 to: 77}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker928882_
		cover: (82 to: 89)
		declaredAt: (82 to: 89)
		by: accounts.
	#_coverageTracker928882_
		coverAll:
			{91 to: 93}
		evaluating: [
			receiver3 do: [ :anAccount |
				[ | receiver2 |
				receiver2 _ #_coverageTracker928882_
					cover: (110 to: 118)
					declaredAt: (98 to: 106)
					by: anAccount.
				#_coverageTracker928882_
					coverAll:
						{120 to: 137}
					evaluating: [
						receiver2 addTransactionsTo:
							(#_coverageTracker928882_
								cover: (139 to: 150)
								declaredAt: (21 to: 32)
								by: transactions) ]
					thatSends: #addTransactionsTo:
					to: receiver2 ] value ]]
		thatSends: #do:
		to: receiver3 ] value.
	^ #_coverageTracker928882_
		cover: (161 to: 172)
		declaredAt: (21 to: 32)
		by: transactions.! !
!Behavior method!
depositLeg
	#_coverageTracker928893_ markAsExecuted.
	^ #_coverageTracker928893_
		cover: (18 to: 27)
		declaredAt: (18 to: 27)
		by: depositLeg.! !
!Behavior method!
value
	#_coverageTracker928900_ markAsExecuted.
	^ #_coverageTracker928900_
		cover: (13 to: 17)
		declaredAt: (13 to: 17)
		by: value.! !
!Behavior method!
named: anAccountName with: anAccount with: anotherAccount
	#_coverageTracker928909_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ [ | receiver3 |
	receiver3 _ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker928909_
		coverAll:
			{66 to: 69}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker928909_
		coverAll:
			{71 to: 73}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker928909_
		coverAll:
			{79 to: 97}
		evaluating: [
			receiver2 initializeWithName:
				(#_coverageTracker928909_
					cover: (99 to: 111)
					declaredAt: (8 to: 20)
					by: anAccountName) ]
		thatSends: #initializeWithName:
		to: receiver2 ] value.
	#_coverageTracker928909_
		coverAll:
			{117 to: 120}
		evaluating: [
			receiver3 add:
				(#_coverageTracker928909_
					cover: (122 to: 130)
					declaredAt: (28 to: 36)
					by: anAccount) ]
		thatSends: #add:
		to: receiver3 ] value.
	[ | receiver4 |
	receiver4 _ cascadeReceiver.
	#_coverageTracker928909_
		coverAll:
			{136 to: 139}
		evaluating: [
			receiver4 add:
				(#_coverageTracker928909_
					cover: (141 to: 154)
					declaredAt: (44 to: 57)
					by: anotherAccount) ]
		thatSends: #add:
		to: receiver4 ] value.
	[ | receiver5 |
	receiver5 _ cascadeReceiver.
	#_coverageTracker928909_
		coverAll:
			{160 to: 167}
		evaluating: [ receiver5 yourself ]
		thatSends: #yourself
		to: receiver5 ] value ] value.! !
!Behavior method!
decreaseDepth
	#_coverageTracker928918_ markAsExecuted.! !
!Behavior method!
addName: anAccountName
	#_coverageTracker928926_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker928926_
		cover: (28 to: 33)
		declaredAt: (28 to: 33)
		by: report.
	#_coverageTracker928926_
		coverAll:
			{35 to: 38}
		evaluating: [
			receiver2 add:
				[ | receiver1 |
				receiver1 _ #_coverageTracker928926_
					coverAll:
						{41 to: 44}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker928926_
					coverAll:
						{46 to: 68}
					evaluating: [
						receiver1 addDepthNumberOfTabsTo:
							(#_coverageTracker928926_
								cover: (70 to: 82)
								declaredAt: (10 to: 22)
								by: anAccountName) ]
					thatSends: #addDepthNumberOfTabsTo:
					to: receiver1 ] value ]
		thatSends: #add:
		to: receiver2 ] value.! !
!Behavior method!
parentTransfer
	#_coverageTracker928940_ markAsExecuted.
	^ #_coverageTracker928940_
		cover: (22 to: 35)
		declaredAt: (22 to: 35)
		by: parentTransfer.! !
!Behavior method!
initializeFor: aValue
	#_coverageTracker928949_ markAsExecuted.
	#_coverageTracker928949_
		cover: (27 to: 31)
		declaredAt: (27 to: 31)
		by:
			(value _ #_coverageTracker928949_
				cover: (36 to: 41)
				declaredAt: (16 to: 21)
				by: aValue).! !
!Behavior method!
increaseDepth
	#_coverageTracker928957_ markAsExecuted.
	#_coverageTracker928957_
		cover: (28 to: 32)
		declaredAt: (19 to: 23)
		by:
			(depth _ [ | receiver1 |
			receiver1 _ #_coverageTracker928957_
				cover: (19 to: 23)
				declaredAt: (19 to: 23)
				by: depth.
			#_coverageTracker928957_
				coverAll:
					{34 to: 34}
				evaluating: [
					receiver1 +
						(#_coverageTracker928957_
							coverAll:
								{35 to: 36}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
triedToCreateTreeStructureOfReceptiveAccountErrorDescription
	#_coverageTracker928974_ markAsExecuted.
	^ #_coverageTracker928974_
		coverAll:
			{68 to: 157}
		byLiteralOrPseudoVariable: 'Se intentó crear un TreeStructure de una ReceptiveAccount y sólo se puede con portfolios'.! !
!Behavior method!
addBalance: aBalanceValue
	#_coverageTracker928988_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker928988_
		cover: (31 to: 36)
		declaredAt: (31 to: 36)
		by: report.
	#_coverageTracker928988_
		coverAll:
			{38 to: 41}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker928988_
					coverAll:
						{43 to: 54}
					byLiteralOrPseudoVariable: 'Balance = '.
				#_coverageTracker928988_
					coverAll:
						{55 to: 55}
					evaluating: [
						receiver2 ,
							[ | receiver1 |
							receiver1 _ #_coverageTracker928988_
								cover: (57 to: 69)
								declaredAt: (13 to: 25)
								by: aBalanceValue.
							#_coverageTracker928988_
								coverAll:
									{71 to: 78}
								evaluating: [ receiver1 asString ]
								thatSends: #asString
								to: receiver1 ] value ]
					thatSends: #,
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.! !
!Behavior method!
addWithdrawLeg: aWithdrawLeg
	#_coverageTracker929004_ markAsExecuted.! !
!Behavior method!
initializeWithName: anAccountName
	#_coverageTracker929011_ markAsExecuted.
	#_coverageTracker929011_
		cover: (39 to: 42)
		declaredAt: (39 to: 42)
		by:
			(name _ #_coverageTracker929011_
				cover: (47 to: 59)
				declaredAt: (21 to: 33)
				by: anAccountName).
	#_coverageTracker929011_
		cover: (66 to: 73)
		declaredAt: (66 to: 73)
		by:
			(accounts _ [ | receiver1 |
			receiver1 _ #_coverageTracker929011_
				coverAll:
					{78 to: 94}
				by: OrderedCollection.
			#_coverageTracker929011_
				coverAll:
					{96 to: 98}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker929011_
		cover: (103 to: 109)
		declaredAt: (103 to: 109)
		by:
			(parents _ [ | receiver2 |
			receiver2 _ #_coverageTracker929011_
				coverAll:
					{114 to: 130}
				by: OrderedCollection.
			#_coverageTracker929011_
				coverAll:
					{132 to: 134}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).! !
!Behavior method!
addWithdrawLeg: aWithdrawLeg
	#_coverageTracker929024_ markAsExecuted.
	[ | receiver5 |
	receiver5 _ #_coverageTracker929024_
		cover: (34 to: 39)
		declaredAt: (34 to: 39)
		by: report.
	#_coverageTracker929024_
		coverAll:
			{41 to: 44}
		evaluating: [
			receiver5 add:
				[ | receiver4 |
				receiver4 _ [ | receiver3 |
				receiver3 _ #_coverageTracker929024_
					coverAll:
						{46 to: 75}
					byLiteralOrPseudoVariable: 'Salida por transferencia de '.
				#_coverageTracker929024_
					coverAll:
						{76 to: 76}
					evaluating: [
						receiver3 ,
							[ | receiver2 |
							receiver2 _ [ | receiver1 |
							receiver1 _ #_coverageTracker929024_
								cover: (78 to: 89)
								declaredAt: (17 to: 28)
								by: aWithdrawLeg.
							#_coverageTracker929024_
								coverAll:
									{91 to: 95}
								evaluating: [ receiver1 value ]
								thatSends: #value
								to: receiver1 ] value.
							#_coverageTracker929024_
								coverAll:
									{97 to: 104}
								evaluating: [ receiver2 asString ]
								thatSends: #asString
								to: receiver2 ] value ]
					thatSends: #,
					to: receiver3 ] value.
				#_coverageTracker929024_
					coverAll:
						{105 to: 105}
					evaluating: [
						receiver4 ,
							(#_coverageTracker929024_
								coverAll:
									{107 to: 109}
								byLiteralOrPseudoVariable: '.') ]
					thatSends: #,
					to: receiver4 ] value ]
		thatSends: #add:
		to: receiver5 ] value.! !
!Behavior method!
decreaseDepth
	#_coverageTracker929040_ markAsExecuted.
	#_coverageTracker929040_
		cover: (28 to: 32)
		declaredAt: (19 to: 23)
		by:
			(depth _ [ | receiver1 |
			receiver1 _ #_coverageTracker929040_
				cover: (19 to: 23)
				declaredAt: (19 to: 23)
				by: depth.
			#_coverageTracker929040_
				coverAll:
					{34 to: 34}
				evaluating: [
					receiver1 -
						(#_coverageTracker929040_
							coverAll:
								{35 to: 36}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #-
				to: receiver1 ] value).! !
!Behavior method!
print
	#_coverageTracker929049_ markAsExecuted.
	#_coverageTracker929049_
		cover: (11 to: 16)
		declaredAt: (11 to: 16)
		by:
			(report _ #_coverageTracker929049_
				coverAll:
					{21 to: 21}
				byLiteralOrPseudoVariable: 0).
	[ | receiver1 |
	receiver1 _ #_coverageTracker929049_
		cover: (29 to: 35)
		declaredAt: (29 to: 35)
		by: account.
	#_coverageTracker929049_
		coverAll:
			{37 to: 47}
		evaluating: [
			receiver1 fillReport:
				(#_coverageTracker929049_
					coverAll:
						{49 to: 52}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #fillReport:
		to: receiver1 ] value.
	^ #_coverageTracker929049_
		cover: (61 to: 66)
		declaredAt: (11 to: 16)
		by: report.! !
!Behavior method!
isComposedBy: anAccount
	#_coverageTracker929055_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker929055_
		coverAll:
			{30 to: 33}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker929055_
		coverAll:
			{35 to: 35}
		evaluating: [
			receiver1 =
				(#_coverageTracker929055_
					cover: (37 to: 45)
					declaredAt: (15 to: 23)
					by: anAccount) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
triedToCreateTreeStructure
	#_coverageTracker929068_ markAsExecuted.! !
!Behavior method!
signalCanNotAddAccount
	#_coverageTracker929075_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker929075_
		coverAll:
			{29 to: 32}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker929075_
		coverAll:
			{34 to: 39}
		evaluating: [
			receiver3 error:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker929075_
					coverAll:
						{41 to: 44}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker929075_
					coverAll:
						{46 to: 50}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value.
				#_coverageTracker929075_
					coverAll:
						{52 to: 79}
					evaluating: [ receiver2 canNotAddAccountErrorMessage ]
					thatSends: #canNotAddAccountErrorMessage
					to: receiver2 ] value ]
		thatSends: #error:
		to: receiver3 ] value.! !
!Behavior method!
addWithdrawLeg: aWithdrawLeg
	#_coverageTracker929083_ markAsExecuted.
	#_coverageTracker929083_
		cover: (44 to: 49)
		declaredAt: (34 to: 39)
		by:
			(report _ [ | receiver2 |
			receiver2 _ #_coverageTracker929083_
				cover: (34 to: 39)
				declaredAt: (34 to: 39)
				by: report.
			#_coverageTracker929083_
				coverAll:
					{51 to: 51}
				evaluating: [
					receiver2 -
						[ | receiver1 |
						receiver1 _ #_coverageTracker929083_
							cover: (53 to: 64)
							declaredAt: (17 to: 28)
							by: aWithdrawLeg.
						#_coverageTracker929083_
							coverAll:
								{66 to: 70}
							evaluating: [ receiver1 value ]
							thatSends: #value
							to: receiver1 ] value ]
				thatSends: #-
				to: receiver2 ] value).! !
!Behavior method!
fromTransfer: aTransfer
	#_coverageTracker929099_ markAsExecuted.
	#_coverageTracker929099_
		cover: (29 to: 42)
		declaredAt: (29 to: 42)
		by:
			(parentTransfer _ #_coverageTracker929099_
				cover: (47 to: 55)
				declaredAt: (15 to: 23)
				by: aTransfer).! !
!Behavior method!
ofAccount: anAccount
	#_coverageTracker929106_ markAsExecuted.
	#_coverageTracker929106_
		cover: (26 to: 32)
		declaredAt: (26 to: 32)
		by:
			(account _ #_coverageTracker929106_
				cover: (37 to: 45)
				declaredAt: (12 to: 20)
				by: anAccount).
	#_coverageTracker929106_
		cover: (53 to: 57)
		declaredAt: (53 to: 57)
		by:
			(depth _ #_coverageTracker929106_
				coverAll:
					{62 to: 62}
				byLiteralOrPseudoVariable: 0).! !
!Behavior method!
initializeWithName: anAccountName
	#_coverageTracker929112_ markAsExecuted.
	#_coverageTracker929112_
		coverAll:
			{45 to: 54}
		evaluating: [ super initialize ]
		thatSends: #initialize
		to: super.
	#_coverageTracker929112_
		cover: (62 to: 65)
		declaredAt: (62 to: 65)
		by:
			(name _ #_coverageTracker929112_
				cover: (70 to: 82)
				declaredAt: (21 to: 33)
				by: anAccountName).
	#_coverageTracker929112_
		cover: (90 to: 101)
		declaredAt: (90 to: 101)
		by:
			(transactions _ [ | receiver1 |
			receiver1 _ #_coverageTracker929112_
				coverAll:
					{106 to: 122}
				by: OrderedCollection.
			#_coverageTracker929112_
				coverAll:
					{124 to: 126}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
addedTo: aPortfolio
	#_coverageTracker929121_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker929121_
		cover: (26 to: 32)
		declaredAt: (26 to: 32)
		by: parents.
	#_coverageTracker929121_
		coverAll:
			{34 to: 37}
		evaluating: [
			receiver1 add:
				(#_coverageTracker929121_
					cover: (39 to: 48)
					declaredAt: (10 to: 19)
					by: aPortfolio) ]
		thatSends: #add:
		to: receiver1 ] value.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	#_coverageTracker929130_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker929130_
		coverAll:
			{46 to: 49}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker929130_
		coverAll:
			{51 to: 61}
		evaluating: [ receiver1 rootParents ]
		thatSends: #rootParents
		to: receiver1 ] value.
	#_coverageTracker929130_
		coverAll:
			{63 to: 73}
		evaluating: [
			receiver3 anySatisfy: [ :aParent |
				[ | receiver2 |
				receiver2 _ #_coverageTracker929130_
					cover: (88 to: 94)
					declaredAt: (78 to: 84)
					by: aParent.
				#_coverageTracker929130_
					coverAll:
						{96 to: 108}
					evaluating: [
						receiver2 isComposedBy:
							(#_coverageTracker929130_
								cover: (110 to: 121)
								declaredAt: (28 to: 39)
								by: accountToAdd) ]
					thatSends: #isComposedBy:
					to: receiver2 ] value ]]
		thatSends: #anySatisfy:
		to: receiver3 ] value.! !
!Behavior method!
fromTransfer: aTransfer
	#_coverageTracker929137_ markAsExecuted.
	#_coverageTracker929137_
		cover: (29 to: 42)
		declaredAt: (29 to: 42)
		by:
			(parentTransfer _ #_coverageTracker929137_
				cover: (47 to: 55)
				declaredAt: (15 to: 23)
				by: aTransfer).! !
!Behavior method!
register: aValue on: account
	| transaction |
	#_coverageTracker929143_ markAsExecuted.
	#_coverageTracker929143_
		cover: (55 to: 65)
		declaredAt: (36 to: 46)
		by:
			(transaction _ [ | receiver1 |
			receiver1 _ #_coverageTracker929143_
				coverAll:
					{70 to: 73}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker929143_
				coverAll:
					{75 to: 78}
				evaluating: [
					receiver1 for:
						(#_coverageTracker929143_
							cover: (80 to: 85)
							declaredAt: (11 to: 16)
							by: aValue) ]
				thatSends: #for:
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker929143_
		cover: (90 to: 96)
		declaredAt: (22 to: 28)
		by: account.
	#_coverageTracker929143_
		coverAll:
			{98 to: 106}
		evaluating: [
			receiver2 register:
				(#_coverageTracker929143_
					cover: (108 to: 118)
					declaredAt: (36 to: 46)
					by: transaction) ]
		thatSends: #register:
		to: receiver2 ] value.
	^ #_coverageTracker929143_
		cover: (129 to: 139)
		declaredAt: (36 to: 46)
		by: transaction.! !
!Behavior method!
initializeFor: aValue
	#_coverageTracker929148_ markAsExecuted.
	#_coverageTracker929148_
		cover: (27 to: 31)
		declaredAt: (27 to: 31)
		by:
			(value _ #_coverageTracker929148_
				cover: (36 to: 41)
				declaredAt: (16 to: 21)
				by: aValue).! !
!Behavior method!
addBalance: aBalanceValue
	#_coverageTracker929162_ markAsExecuted.! !

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 15:47:10'!
PASSED!

!methodRemoval: Transfer #transfer stamp: 'SF 6/1/2023 15:48:25'!
transfer

	^ self!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'SF 6/1/2023 15:48:38'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 15:48:39'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 15:54:23'!
PASSED!

Report subclass: #TreeStructureWithSummary
	instanceVariableNames: 'depth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureWithSummary category: 'Portfolio-Solucion' stamp: 'SF 6/1/2023 15:56:35'!
Report subclass: #TreeStructureWithSummary
	instanceVariableNames: 'depth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportTest subclass: #TreeStructureWithSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureWithSummaryTest category: 'Portfolio-Solucion' stamp: 'SF 6/1/2023 15:57:24'!
ReportTest subclass: #TreeStructureWithSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructureWithSummaryTest methodsFor: 'no messages' stamp: 'SF 6/1/2023 15:58:40'!
test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructure ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Balance = 0') equals: report print.! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 15:58:50'!
FAILURE!
!TreeStructureWithSummary methodsFor: 'no messages' stamp: 'SF 6/1/2023 15:59:14' overrides: 50666062!
addBalance: aBalanceValue

	report add: 'Balance = ', aBalanceValue asString.! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 15:59:27'!
FAILURE!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 15:59:53' prior: 50669373!
test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructureWithSummary ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Balance = 0') equals: report print.! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 15:59:55'!
ERROR!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 15:59:55'!
ERROR!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:00:41' prior: 50669402!
test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Balance = 0') equals: report print.! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:00:42'!
ERROR!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:01:06' overrides: 50666097!
print

	report := OrderedCollection new.
	
	account fillReport: self.
	
	^report.! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:01:08'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:01:08'!
FAILURE!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:01:24' overrides: 50666074!
addName: anAccountName

	report add: (self addDepthNumberOfTabsTo: anAccountName)! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:01:25'!
ERROR!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:01:25'!
ERROR!

TreeStructure subclass: #TreeStructureWithSummary
	instanceVariableNames: 'depth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TreeStructure subclass: #TreeStructureWithSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureWithSummary category: 'Portfolio-Solucion' stamp: 'SF 6/1/2023 16:02:18'!
TreeStructure subclass: #TreeStructureWithSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TreeStructureWithSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureWithSummary category: 'Portfolio-Solucion' stamp: 'SF 6/1/2023 16:03:18'!
Report subclass: #TreeStructureWithSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TreeStructureWithSummary
	instanceVariableNames: 'depth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureWithSummary category: 'Portfolio-Solucion' stamp: 'SF 6/1/2023 16:03:27'!
Report subclass: #TreeStructureWithSummary
	instanceVariableNames: 'depth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:03:40'!
addDepthNumberOfTabsTo: anAccountName

	| tabbedName |
	
	tabbedName := anAccountName.
	depth timesRepeat: [
		tabbedName := '  ', tabbedName.
		].
	^ tabbedName.! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:03:41'!
ERROR!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:03:41'!
ERROR!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:04:13' overrides: 50666086!
decreaseDepth

	depth := depth - 1! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:04:20' overrides: 50666089!
increaseDepth

	depth := depth - 1! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:04:32' overrides: 50666092!
ofAccount: anAccount

	account := anAccount.
	
	depth := 0.! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:04:33'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:04:33'!
FAILURE!

----STARTUP---- (1 June 2023 16:05:39) as C:\Users\005675613\Documents\Inge 1\windows64\windows64\CuisUniversity-5832.image!


!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 16:05:48'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 16:05:49'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 6/1/2023 16:05:49'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 16:05:49'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 16:05:49'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 16:05:49'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 16:05:49'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 6/1/2023 16:07:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 16:07:37'!
PASSED!

----SNAPSHOT----(1 June 2023 16:07:46) CuisUniversity-5832.image priorSource: 10729886!

!methodRemoval: Transfer #transfer stamp: 'SF 6/1/2023 16:07:53'!
transfer

	^ self!

!testRun: #AccountSummaryTest #test01SummaryOfEmptyAccountOnlyShowsBalance stamp: 'SF 6/1/2023 16:07:56'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAccountWithDepositShowsDepositAndBalance stamp: 'SF 6/1/2023 16:07:56'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAccountWithWithdrawShowsWithdrawAndBalance stamp: 'SF 6/1/2023 16:07:56'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAccountWithWithdrawLegShowsWithdrawLegAndBalance stamp: 'SF 6/1/2023 16:07:56'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfAccountWithDepositLegShowsDepositLegAndBalance stamp: 'SF 6/1/2023 16:07:56'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfEmptyPortfolioOnlyShowsBalance stamp: 'SF 6/1/2023 16:07:56'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryOfPortfolioWithAccountsShowsSummaryOfAllAccountsAndItsBalance stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetOfEmptyReceptiveAccountIsZero stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetGetsAffectedByTransferTransaction stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetDoesntGetAffectedByRegularTransaction stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetOfEmptyPortfolioIsZero stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfPortfolioWithAccountsAddsTheirTransferNet stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 16:07:57'!
PASSED!

----SNAPSHOT----(1 June 2023 16:08:07) CuisUniversity-5832.image priorSource: 10823443!

Report subclass: #TreeStructureWithSummary
	instanceVariableNames: 'depth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureWithSummary category: 'Portfolio-Solucion' stamp: 'SF 6/1/2023 16:08:31'!
Report subclass: #TreeStructureWithSummary
	instanceVariableNames: 'depth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportTest subclass: #TreeStructureWithSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureWithSummaryTest category: 'Portfolio-Solucion' stamp: 'SF 6/1/2023 16:08:39'!
ReportTest subclass: #TreeStructureWithSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructureWithSummaryTest methodsFor: 'no messages' stamp: 'SF 6/1/2023 16:09:17'!
test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
	
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Balance = 0') equals: report print.! !

----SNAPSHOT----(1 June 2023 16:09:29) CuisUniversity-5832.image priorSource: 10828735!
!TreeStructureWithSummary methodsFor: 'no messages' stamp: 'SF 6/1/2023 16:09:43' overrides: 50666092!
ofAccount: anAccount

	account := anAccount.
	
	depth := 0.! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:09:53' overrides: 50666097!
print

	report := OrderedCollection new.
	
	account fillReport: self.
	
	^report.! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:10:15'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:10:15'!
FAILURE!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:10:30' overrides: 50666074!
addName: anAccountName

	report add: (self addDepthNumberOfTabsTo: anAccountName)! !

----SNAPSHOT----(1 June 2023 16:10:48) CuisUniversity-5832.image priorSource: 10830076!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:10:49'!
ERROR!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:10:49'!
ERROR!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:11:01'!
addDepthNumberOfTabsTo: anAccountName

	| tabbedName |
	
	tabbedName := anAccountName.
	depth timesRepeat: [
		tabbedName := '  ', tabbedName.
		].
	^ tabbedName.! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:11:02'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:11:02'!
FAILURE!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:11:24' overrides: 50666062!
addBalance: aBalanceValue

	report add: 'Balance = ', aBalanceValue asString.! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:11:25'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:11:25'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:12:02'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:12:02'!
FAILURE!

----SNAPSHOT----(1 June 2023 16:12:16) CuisUniversity-5832.image priorSource: 10831060!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:12:19'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:12:19'!
FAILURE!

----STARTUP---- (1 June 2023 16:12:30) as C:\Users\005675613\Documents\Inge 1\windows64\windows64\CuisUniversity-5832.image!


!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:12:39'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:12:39'!
FAILURE!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:12:53' overrides: 50666089!
increaseDepth

	depth := depth + 1! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:12:57'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:12:57'!
FAILURE!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:14:31' prior: 50670152 overrides: 50666062!
addBalance: aBalanceValue

	report add: (self addDepthNumberOfTabsTo: 'Balance = ', aBalanceValue asString).! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:14:32'!
PASSED!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:15:37' prior: 50670078!
test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Balance = 0') equals: report print.! !
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:16:17' prior: 50670228!
test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi' with: '    Balance = 0'  with: '  Balance = 0') equals: report print.! !
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:16:39'!
test02

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi' with: '    Balance = 0'  with: '  Balance = 0') equals: report print.! !

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:16:40'!
FAILURE!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:18:50' overrides: 50666086!
decreaseDepth

	depth := depth - 1! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:18:52'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:18:52'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:19:05'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:19:05'!
FAILURE!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:20:29' prior: 50670244!
test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance

	| portfolio report |
	
	portfolio := Portfolio named: 'Portfolio de Juampi'.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Balance = 0') equals: report print.! !

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:20:31'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:20:58'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:20:58'!
FAILURE!

!methodRemoval: TreeStructureWithSummary #decreaseDepth stamp: 'SF 6/1/2023 16:23:02'!
decreaseDepth

	depth := depth - 1!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:23:07'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:23:10'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:23:10'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'SF 6/1/2023 16:24:45' prior: 50665781 overrides: 50665548!
fillReport: aReport

	aReport addName: name.
	aReport increaseDepth.
	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].
	aReport decreaseDepth.	
	aReport addBalance: self balance.! !

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 16:24:49'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 16:24:49'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 16:24:49'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 16:24:49'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:24:53'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:24:53'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:24:53'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'SF 6/1/2023 16:26:03' prior: 50665624 overrides: 50665548!
fillReport: aReport

	aReport addName: name.

	aReport increaseDepthForPortfolio.

	accounts do: [ :anAccount | anAccount fillReport: aReport ].
	
	aReport decreaseDepthForPortfolio.
	
	aReport addBalance: self balance.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'SF 6/1/2023 16:26:26' prior: 50670340 overrides: 50665548!
fillReport: aReport

	aReport addName: name.
	aReport increaseDepthForReceptiveAccount.
	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].
	aReport decreaseDepthForReceptiveAccount.	
	aReport addBalance: self balance.! !
!Report methodsFor: 'depth control' stamp: 'SF 6/1/2023 16:26:40'!
decreaseDepthForPortfolio! !
!Report methodsFor: 'depth control' stamp: 'SF 6/1/2023 16:26:46'!
increaseDepthForPortfolio! !
!Report methodsFor: 'depth control' stamp: 'SF 6/1/2023 16:26:50'!
increaseDepthForReceptiveAccount! !
!Report methodsFor: 'depth control' stamp: 'SF 6/1/2023 16:26:57'!
decreaseDepthForReceptiveAccount! !

!methodRemoval: Report #increaseDepth stamp: 'SF 6/1/2023 16:26:59'!
increaseDepth!

!methodRemoval: Report #decreaseDepth stamp: 'SF 6/1/2023 16:27:03'!
decreaseDepth!
!TreeStructure methodsFor: 'depth control' stamp: 'SF 6/1/2023 16:27:10' overrides: 50670401!
increaseDepthForPortfolio

	depth := depth + 1! !

!methodRemoval: TreeStructure #increaseDepth stamp: 'SF 6/1/2023 16:27:12'!
increaseDepth

	depth := depth + 1!
!TreeStructure methodsFor: 'depth control' stamp: 'SF 6/1/2023 16:27:17' overrides: 50670398!
decreaseDepthForPortfolio

	depth := depth - 1! !

!methodRemoval: TreeStructure #decreaseDepth stamp: 'SF 6/1/2023 16:27:20'!
decreaseDepth

	depth := depth - 1!

!testRun: #TreeStructureTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'SF 6/1/2023 16:27:21'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfPortfolioWithAccountShowsPortfolioNameAndIndentedAccountName stamp: 'SF 6/1/2023 16:27:21'!
PASSED!

!testRun: #TreeStructureTest #test03TreeStructureOfPortfolioWithPortfolioAndAccountShowsAllNamesCorrectlyIntended stamp: 'SF 6/1/2023 16:27:21'!
PASSED!

!testRun: #TreeStructureTest #test04cantCreateTreeStructureOfReceptiveAccount stamp: 'SF 6/1/2023 16:27:21'!
PASSED!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:27:43'!
decreaseDepthForAccount

	depth := depth - 1! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:27:49' overrides: 50670408!
decreaseDepthForReceptiveAccount

	depth := depth - 1! !

!methodRemoval: TreeStructureWithSummary #decreaseDepthForAccount stamp: 'SF 6/1/2023 16:27:51'!
decreaseDepthForAccount

	depth := depth - 1!
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:27:58' overrides: 50670401!
increaseDepthForPortfolio

	depth := depth + 1! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:28:03' overrides: 50670404!
increaseDepthForReceptiveAccount

	depth := depth + 1! !

!methodRemoval: TreeStructureWithSummary #increaseDepth stamp: 'SF 6/1/2023 16:28:05'!
increaseDepth

	depth := depth + 1!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:28:14'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:28:14'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:28:14'!
FAILURE!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:29:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'SF 6/1/2023 16:29:49' prior: 50670388 overrides: 50665548!
fillReport: aReport

	aReport addName: name.
	aReport increaseDepthForReceptiveAccount.
	transactions do: [ :aTransaction | aTransaction addToReport: aReport ].
	aReport addBalance: self balance.
	
	aReport decreaseDepthForReceptiveAccount.	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SF 6/1/2023 16:29:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 16:29:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SF 6/1/2023 16:29:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SF 6/1/2023 16:29:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SF 6/1/2023 16:29:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SF 6/1/2023 16:29:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SF 6/1/2023 16:29:50'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:29:56'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:29:56'!
PASSED!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:33:07'!
test03

	| portfolio juampisAccount santisAccount report |
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Transfer new from: juampisAccount to: santisAccount withValue: 1000000.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio del grupo' with: '  Cuenta de Juampi' with: '    Balance = -1000000'  with: '  Cuenta de Santi' with: '    Balance = 1000000' with: '  Balance = 0') equals: report print.! !

!testRun: #TreeStructureWithSummaryTest #test03 stamp: 'SF 6/1/2023 16:33:08'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:33:08'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:33:08'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test03 stamp: 'SF 6/1/2023 16:33:08'!
PASSED!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:35:07' prior: 50670541!
test03

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Transfer new from: juampisAccount to: santisAccount withValue: 1000000.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.! !

----SNAPSHOT----(1 June 2023 16:35:14) CuisUniversity-5832.image priorSource: 10832784!

!testRun: #TreeStructureWithSummaryTest #test03 stamp: 'SF 6/1/2023 16:35:16'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:35:16'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:35:16'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test03 stamp: 'SF 6/1/2023 16:35:16'!
PASSED!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:35:39' prior: 50670578!
test03

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Transfer new from: juampisAccount to: santisAccount withValue: 1000000.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Salida por transferencia de 1000000.'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.! !
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:36:30' prior: 50670621!
test03

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Transfer new from: juampisAccount to: santisAccount withValue: 1000000.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Salida por transferencia de 1000000.'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Entrada por transferencia de 1000000.'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:36:49' overrides: 50666082!
addWithdrawLeg: aWithdrawLeg

	report add: 'Salida por transferencia de ', aWithdrawLeg value asString, '.'.! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:37:02' overrides: 50666070!
addDepositLeg: aDepositLeg

	report add: 'Entrada por transferencia de ', aDepositLeg value asString, '.'.! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:37:29' prior: 50670681 overrides: 50666082!
addWithdrawLeg: aWithdrawLeg

	report add: (self addDepthNumberOfTabsTo: 'Salida por transferencia de ', aWithdrawLeg value asString, '.').! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:38:16' prior: 50670688 overrides: 50666070!
addDepositLeg: aDepositLeg

	report add: (self addDepthNumberOfTabsTo: 'Entrada por transferencia de ', aDepositLeg value asString, '.').! !

----SNAPSHOT----(1 June 2023 16:38:26) CuisUniversity-5832.image priorSource: 10846497!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:38:28'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:38:28'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test03 stamp: 'SF 6/1/2023 16:38:28'!
PASSED!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:40:01'!
test04

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Withdraw register: 1000000 on: juampisAccount.
	Deposit register: 1000000 on: santisAccount.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Extracción por 1000000.'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Depósito por 1000000.'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:40:19' overrides: 50666066!
addDeposit: aDeposit

	report add: 'Depósito por ', aDeposit value asString, '.'.! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:40:31' overrides: 50666078!
addWithdraw: aWithdraw

	report add: 'Extracción por ', aWithdraw value asString, '.'.! !
!TreeStructureWithSummary methodsFor: 'adding' stamp: 'SF 6/1/2023 16:41:57' prior: 50670757 overrides: 50666066!
addDeposit: aDeposit

	report add: (self addDepthNumberOfTabsTo: 'Depósito por ', aDeposit value asString, '.').! !
!TreeStructureWithSummary methodsFor: 'adding' stamp: 'SF 6/1/2023 16:42:25' prior: 50670764 overrides: 50666078!
addWithdraw: aWithdraw

	report add: (self addDepthNumberOfTabsTo: 'Extracción por ', aWithdraw value asString, '.').! !

----SNAPSHOT----(1 June 2023 16:42:44) CuisUniversity-5832.image priorSource: 10849964!

!testRun: #TransferTest #test01ATransactionModifiesBothAccountsBalances stamp: 'SF 6/1/2023 16:42:47'!
PASSED!

!testRun: #TransferTest #test02AWithdrawalKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 16:42:47'!
PASSED!

!testRun: #TransferTest #test03ADepositKnowsWhichTransferItsFrom stamp: 'SF 6/1/2023 16:42:47'!
PASSED!

!testRun: #TransferTest #test04TransferLegsKnowTheirValue stamp: 'SF 6/1/2023 16:42:47'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test01TreeStructureOfEmptyPortfolioOnlyShowsItsNameAndBalance stamp: 'SF 6/1/2023 16:42:51'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:42:51'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test03 stamp: 'SF 6/1/2023 16:42:51'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test04 stamp: 'SF 6/1/2023 16:42:51'!
PASSED!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:43:32'!
test02PortfolioWithAccountShowsItsNameAndAccountsNameAndSummaryOfAccountCorrectlyIntended

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi' with: '    Balance = 0'  with: '  Balance = 0') equals: report print.! !

!methodRemoval: TreeStructureWithSummaryTest #test02 stamp: 'SF 6/1/2023 16:43:36'!
test02

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi' with: '    Balance = 0'  with: '  Balance = 0') equals: report print.!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:44:19'!
test03PortfolioWithAccountsWithTransferShowsTheAccountsAndTransferCorrectlyIntended

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Transfer new from: juampisAccount to: santisAccount withValue: 1000000.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Salida por transferencia de 1000000.'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Entrada por transferencia de 1000000.'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.! !
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:44:24'!
test03PortfolioWithAccountsWithTransferShowsTheAccountsAndTransferCorrectlyIndented

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Transfer new from: juampisAccount to: santisAccount withValue: 1000000.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Salida por transferencia de 1000000.'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Entrada por transferencia de 1000000.'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.! !

!methodRemoval: TreeStructureWithSummaryTest #test03PortfolioWithAccountsWithTransferShowsTheAccountsAndTransferCorrectlyIntended stamp: 'SF 6/1/2023 16:44:26'!
test03PortfolioWithAccountsWithTransferShowsTheAccountsAndTransferCorrectlyIntended

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Transfer new from: juampisAccount to: santisAccount withValue: 1000000.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Salida por transferencia de 1000000.'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Entrada por transferencia de 1000000.'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:44:32'!
test02PortfolioWithAccountShowsItsNameAndAccountsNameAndSummaryOfAccountCorrectlyIndented

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi' with: '    Balance = 0'  with: '  Balance = 0') equals: report print.! !

!methodRemoval: TreeStructureWithSummaryTest #test02PortfolioWithAccountShowsItsNameAndAccountsNameAndSummaryOfAccountCorrectlyIntended stamp: 'SF 6/1/2023 16:44:34'!
test02PortfolioWithAccountShowsItsNameAndAccountsNameAndSummaryOfAccountCorrectlyIntended

	| portfolio account report |
	
	account := ReceptiveAccount named: 'Cuenta de Juampi'.
	
	portfolio := Portfolio named: 'Portfolio de Juampi' with: account.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	
	self assert: (OrderedCollection with: 'Portfolio de Juampi' with: '  Cuenta de Juampi' with: '    Balance = 0'  with: '  Balance = 0') equals: report print.!

!methodRemoval: TreeStructureWithSummaryTest #test03 stamp: 'SF 6/1/2023 16:44:37'!
test03

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Transfer new from: juampisAccount to: santisAccount withValue: 1000000.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Salida por transferencia de 1000000.'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Entrada por transferencia de 1000000.'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:44:59'!
test03PortfolioWithAccountsWithTransactionsShowsTheAccountsAndTransactionsCorrectlyIndented

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Withdraw register: 1000000 on: juampisAccount.
	Deposit register: 1000000 on: santisAccount.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Extracción por 1000000.'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Depósito por 1000000.'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.! !
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'SF 6/1/2023 16:45:04'!
test04PortfolioWithAccountsWithTransactionsShowsTheAccountsAndTransactionsCorrectlyIndented

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Withdraw register: 1000000 on: juampisAccount.
	Deposit register: 1000000 on: santisAccount.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Extracción por 1000000.'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Depósito por 1000000.'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.! !

!methodRemoval: TreeStructureWithSummaryTest #test03PortfolioWithAccountsWithTransactionsShowsTheAccountsAndTransactionsCorrectlyIndented stamp: 'SF 6/1/2023 16:45:06'!
test03PortfolioWithAccountsWithTransactionsShowsTheAccountsAndTransactionsCorrectlyIndented

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Withdraw register: 1000000 on: juampisAccount.
	Deposit register: 1000000 on: santisAccount.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Extracción por 1000000.'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Depósito por 1000000.'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.!

!methodRemoval: TreeStructureWithSummaryTest #test04 stamp: 'SF 6/1/2023 16:45:08'!
test04

	| portfolio juampisAccount santisAccount report expected|
	
	juampisAccount := ReceptiveAccount named: 'Cuenta de Juampi'.
	santisAccount := ReceptiveAccount named: 'Cuenta de Santi'.
	Withdraw register: 1000000 on: juampisAccount.
	Deposit register: 1000000 on: santisAccount.
	 
	portfolio := Portfolio named: 'Portfolio del grupo' with: juampisAccount with: santisAccount.
		
	report := TreeStructureWithSummary new ofAccount: portfolio.	
	expected := OrderedCollection new.
	expected add: 'Portfolio del grupo'.
	expected add: '  Cuenta de Juampi'.
	expected add: '    Extracción por 1000000.'.
	expected add: '    Balance = -1000000'.
	expected add: '  Cuenta de Santi'.
	expected add: '    Depósito por 1000000.'.
	expected add: '    Balance = 1000000'.
	expected add: '  Balance = 0'.
	self assert: expected equals: report print.!

----SNAPSHOT----(1 June 2023 16:45:42) CuisUniversity-5832.image priorSource: 10852313!