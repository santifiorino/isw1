

----STARTUP---- (11 June 2023 16:13:01) as C:\Users\Santii\Desktop\UBA\inge1\windows64\CuisUniversity-5832.image!


TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'sf 6/11/2023 16:15:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'sf 6/11/2023 16:17:03'!
aCardWithInvalidNumber

	^ Card new withName: 'Hernan'
	                    andNumber: 1
	                    andExpirationDate: self aFutureMonthOfYear
	                    andBalance: 1000000! !

(GregorianMonthOfYear current) next: 6*month!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:17:34'!
aFutureMonthOfYear

	^ (GregorianMonthOfYear current) next: 6*month! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:17:41'!
aPastMonthOfYear

	^ (GregorianMonthOfYear current) previous: 6*month! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:18:00'!
aValidCard

	^ Card new withName: 'Hernan'
	                    andNumber: 1234123412341234
	                    andExpirationDate: self aFutureMonthOfYear
	                    andBalance: 1000000! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:18:12'!
anExpiredCard

	^ Card new withName: 'Hernan'
	                    andNumber: 1234123412341234
	                    andExpirationDate: self aPastMonthOfYear
	                    andBalance: 1000000! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'sf 6/11/2023 16:18:35'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cartTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'sf 6/11/2023 16:18:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cartTest cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:18:32'!
test01checkoutOfEmptyCartRaisesInvalidCartError

	| aCart |

	aCart := cartTest createCart.

	self 
		should: [ cashier checkout: aCart with: self aValidCard ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCartErrorMessage.
			self assert: aCart isEmpty ].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'sf 6/11/2023 16:19:23'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cartTest cashier merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:19:22' overrides: 16961394!
setUp

	cartTest := CartTest new.
	merchantProcessor := MerchantProcessor new.
	cashier := Cashier new with: merchantProcessor! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:19:25' prior: 50625757 overrides: 16961394!
setUp

	cartTest := CartTest new.
	merchantProcessor := MerchantProcessor new.
	cashier := Cashier new with: merchantProcessor.! !

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:19:28'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:19:44'!
test02checkoutOfCartWithABookReturnsATicket

	| aCart |
	
	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	self assert: (cashier checkout: aCart with: self aValidCard)
		 equals: 0! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:19:52' prior: 50625776!
test02checkoutOfCartWithABookReturnsATicket

	| aCart |
	
	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	self assert: (cashier checkout: aCart with: self aValidCard)
	       equals: 0! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:20:06' prior: 50625182!
checkout: aCart with: aCardToPayWith
	self raiseErrorIfCartIsEmpty: aCart.
	(merchantProcessor processPaymentOf: 1 withCard: aCardToPayWith) ifFalse: [
		self error: self InvalidCardErrorMessage 
		].
	
	aCart dumpItems.
	^ 0

	! !

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicket stamp: 'sf 6/11/2023 16:20:10'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:20:51' prior: 50625786!
test02checkoutOfCartWithABookReturnsATicket

	| aCart |
	
	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	self assert: (cashier checkout: aCart with: self aValidCard)
	       equals: 100! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:20:59' prior: 50625796!
checkout: aCart with: aCardToPayWith
	self raiseErrorIfCartIsEmpty: aCart.
	(merchantProcessor processPaymentOf: 1 withCard: aCardToPayWith) ifFalse: [
		self error: self InvalidCardErrorMessage 
		].
	
	aCart dumpItems.
	^ 100

	! !

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicket stamp: 'sf 6/11/2023 16:21:03'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:21:07'!
test03checkoutOfCartWithABookEmptiesCart

	| aCart |
	
	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	cashier checkout: aCart with: self aValidCard.
	
	self assert: aCart isEmpty! !

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:21:07'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:21:57'!
test02checkoutOfCartWithABookReturnsATicketWithItsPrice

	| aCart |
	
	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	self assert: (cashier checkout: aCart with: self aValidCard)
	       equals: 100! !

!methodRemoval: CashierTest #test02checkoutOfCartWithABookReturnsATicket stamp: 'sf 6/11/2023 16:21:58'!
test02checkoutOfCartWithABookReturnsATicket

	| aCart |
	
	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	self assert: (cashier checkout: aCart with: self aValidCard)
	       equals: 100!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:22:42'!
test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice

	| aCart |
	
	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	self assert: (cashier checkout: aCart with: self aValidCard)
	       equals: 100! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:23:09' prior: 50625867!
test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice

	| aCart |
	
	aCart := cartTest createCart.
	aCart add: 10 of: cartTest itemSellByTheStore.
	
	self assert: (cashier checkout: aCart with: self aValidCard)
	       equals: 1000! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:24:27' prior: 50625820!
checkout: aCart with: aCardToPayWith

	| amountToPay |

	self raiseErrorIfCartIsEmpty: aCart.
	
	amountToPay := aCart getSubtotal.
	
	(merchantProcessor processPaymentOf: 1 withCard: aCardToPayWith) ifFalse: [
		self error: self InvalidCardErrorMessage 
		].
	
	aCart dumpItems.
	^ 100

	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:24:39' prior: 50625889!
checkout: aCart with: aCardToPayWith

	| amountToPay |

	self raiseErrorIfCartIsEmpty: aCart.
	
	amountToPay := aCart getSubtotal.
	
	(merchantProcessor processPaymentOf: amountToPay withCard: aCardToPayWith) ifFalse: [
		self error: self InvalidCardErrorMessage 
		].
	
	aCart dumpItems.
	^ 100

	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:26:02'!
getSubtotal

	^ items sum: [ :anItem | catalog at: anItem ]! !

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:26:08'!
FAILURE!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:26:08'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:26:23' prior: 50625878!
test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice

	| aCart |
	
	aCart := cartTest createCart.
	aCart add: 10 of: cartTest itemSellByTheStore.
	
	self assert: 1000
	       equals: (cashier checkout: aCart with: self aValidCard)! !

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:26:27'!
FAILURE!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:26:27'!
FAILURE!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:26:31'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:26:59' prior: 50625902!
checkout: aCart with: aCardToPayWith

	| amountToPay |

	self raiseErrorIfCartIsEmpty: aCart.
	
	amountToPay := aCart getSubtotal.
	
	(merchantProcessor processPaymentOf: amountToPay withCard: aCardToPayWith) ifFalse: [
		self error: self InvalidCardErrorMessage 
		].
	
	aCart dumpItems.
	^ amountToPay

	! !

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:27:03'!
PASSED!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:27:03'!
PASSED!

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:27:03'!
PASSED!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:27:03'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:27:50'!
test05checkoutWithExpiredCardRaisesInvalidCardError

	| aCart |

	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.

	self 
		should: [ cashier checkout: aCart with: self anExpiredCard ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCardErrorMessage.
			self deny: aCart isEmpty ].! !

!testRun: #CashierTest #test05checkoutWithExpiredCardRaisesInvalidCardError stamp: 'sf 6/11/2023 16:27:50'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:28:07'!
test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError

	| aCart |

	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.

	self 
		should: [ cashier checkout: aCart with: self aCardWithInvalidNumber ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCardErrorMessage.
			self deny: aCart isEmpty ].! !

!testRun: #CashierTest #test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError stamp: 'sf 6/11/2023 16:28:09'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:28:55'!
test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError

	| aCart |

	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.

	self 
		should: [ cashier checkout: aCart with: self aCardWith0Balance ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCardErrorMessage.
			self deny: aCart isEmpty ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:29:07'!
aCardWith0Balance

	^ Card new withName: 'Hernan'
	                    andNumber: 1234123412341234
	                    andExpirationDate: self aFutureMonthOfYear
	                    andBalance: 0! !

!testRun: #CashierTest #test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError stamp: 'sf 6/11/2023 16:29:11'!
PASSED!

----SNAPSHOT----(11 June 2023 16:29:23) CuisUniversity-5832.image priorSource: 9408470!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:30:57' prior: 50625392!
processPaymentOf: anAmountToPay withCard: aCardToPayWith

	(self checkIfCardIsExpired: aCardToPayWith) ifTrue: [ ^ false ].
	(self checkIfCardNumberIsInvalid: aCardToPayWith) ifTrue: [ ^ false ].
	(self checkIfCard: aCardToPayWith cantAfford: anAmountToPay) ifTrue: [ ^ false ].
	aCardToPayWith substractBalanceBy: anAmountToPay.
	^ true.! !
!Card methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:31:30'!
substractBalanceBy: anAmountToPay

	balance := balance - anAmountToPay! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:33:49'!
test08checkoutSubstractsTheAmountToPayFromCardsBalance

	| aCart |

	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.

	self 
		should: [ cashier checkout: aCart with: self aCardWith0Balance ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCardErrorMessage.
			self deny: aCart isEmpty ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:34:00' prior: 50625704!
aValidCard

	^ Card new withName: 'Hernan'
	                    andNumber: 1234123412341234
	                    andExpirationDate: self aFutureMonthOfYear
	                    andBalance: 100! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:34:20' prior: 50626066!
test08checkoutSubstractsTheAmountToPayFromCardsBalance

	| aCart aCard|

	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	

	self 
		should: [ cashier checkout: aCart with: self aCardWith0Balance ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCardErrorMessage.
			self deny: aCart isEmpty ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:34:37' prior: 50626091!
test08checkoutSubstractsTheAmountToPayFromCardsBalance

	| aCart aCard|

	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	aCard := self aValidCard.

	self 
		should: [ cashier checkout: aCart with: self aCardWith0Balance ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCardErrorMessage.
			self deny: aCart isEmpty ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:35:31' prior: 50626106!
test08checkoutSubstractsTheAmountToPayFromCardsBalance

	| aCart aCard|

	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	aCard := self aValidCard.
	cashier checkout: aCart with: aCard.
	
	aCart add: cartTest itemSellByTheStore.
	self 
		should: [ cashier checkout: aCart with: aCard ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCardErrorMessage.
			self deny: aCart isEmpty ].! !

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:35:32'!
PASSED!

!methodRemoval: Card #withName:andNumber:andExpirationDate: stamp: 'sf 6/11/2023 16:36:21'!
withName: anOwnersName andNumber: aCreditCardNumber andExpirationDate: anExpirationMonthofYear

	name := anOwnersName.
	number := aCreditCardNumber.
	expirationDate := anExpirationMonthofYear.!

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:36:23'!
PASSED!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:36:23'!
PASSED!

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:36:23'!
PASSED!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:36:23'!
ERROR!

!testRun: #CashierTest #test05checkoutWithExpiredCardRaisesInvalidCardError stamp: 'sf 6/11/2023 16:36:23'!
PASSED!

!testRun: #CashierTest #test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError stamp: 'sf 6/11/2023 16:36:23'!
PASSED!

!testRun: #CashierTest #test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError stamp: 'sf 6/11/2023 16:36:23'!
PASSED!

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:36:23'!
PASSED!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:36:23'!
ERROR!

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:36:39'!
PASSED!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:36:40'!
PASSED!

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:36:41'!
PASSED!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:36:43'!
ERROR!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:36:43'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:36:58' prior: 50626081!
aValidCard

	^ Card new withName: 'Hernan'
	                    andNumber: 1234123412341234
	                    andExpirationDate: self aFutureMonthOfYear
	                    andBalance: 1000! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sf 6/11/2023 16:37:11' prior: 50626122!
test08checkoutSubstractsTheAmountToPayFromCardsBalance

	| aCart aCard|

	aCart := cartTest createCart.
	aCart add: 10 of: cartTest itemSellByTheStore.
	
	aCard := self aValidCard.
	cashier checkout: aCart with: aCard.
	
	aCart add: cartTest itemSellByTheStore.
	self 
		should: [ cashier checkout: aCart with: aCard ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCardErrorMessage.
			self deny: aCart isEmpty ].! !

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:37:12'!
PASSED!

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:37:15'!
PASSED!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:37:15'!
PASSED!

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:37:15'!
PASSED!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:37:15'!
PASSED!

!testRun: #CashierTest #test05checkoutWithExpiredCardRaisesInvalidCardError stamp: 'sf 6/11/2023 16:37:15'!
PASSED!

!testRun: #CashierTest #test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError stamp: 'sf 6/11/2023 16:37:15'!
PASSED!

!testRun: #CashierTest #test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError stamp: 'sf 6/11/2023 16:37:15'!
PASSED!

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:37:15'!
PASSED!
!MerchantProcessor methodsFor: 'payments' stamp: 'sf 6/11/2023 16:44:21' prior: 50626048!
processPaymentOf: anAmountToPay withCard: aCardToPayWith

	self validateCard: aCardToPayWith forPaymentOf: anAmountToPay.
	aCardToPayWith substractBalanceBy: anAmountToPay.
	^ true.! !
!MerchantProcessor methodsFor: 'payments' stamp: 'sf 6/11/2023 16:44:29'!
validateCard: aCardToPayWith forPaymentOf: anAmountToPay

	(self checkIfCardIsExpired: aCardToPayWith) ifTrue: [ ^ false ].
	(self checkIfCardNumberIsInvalid: aCardToPayWith) ifTrue: [ ^ false ].
	(self checkIfCard: aCardToPayWith cantAfford: anAmountToPay) ifTrue: [ ^ false ].! !

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:44:36'!
PASSED!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:44:36'!
PASSED!

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:44:36'!
PASSED!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:44:36'!
PASSED!

!testRun: #CashierTest #test05checkoutWithExpiredCardRaisesInvalidCardError stamp: 'sf 6/11/2023 16:44:36'!
FAILURE!

!testRun: #CashierTest #test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError stamp: 'sf 6/11/2023 16:44:36'!
FAILURE!

!testRun: #CashierTest #test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError stamp: 'sf 6/11/2023 16:44:36'!
FAILURE!

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:44:36'!
FAILURE!
!MerchantProcessor methodsFor: 'validation' stamp: 'sf 6/11/2023 16:45:54' prior: 50626277!
validateCard: aCardToPayWith forPaymentOf: anAmountToPay

	^(self checkIfCardIsExpired: aCardToPayWith) and:
	   (self checkIfCardNumberIsInvalid: aCardToPayWith) and:
	   (self checkIfCard: aCardToPayWith cantAfford: anAmountToPay)! !
!MerchantProcessor methodsFor: 'payments' stamp: 'sf 6/11/2023 16:46:16' prior: 50626268!
processPaymentOf: anAmountToPay withCard: aCardToPayWith

	(self validateCard: aCardToPayWith forPaymentOf: anAmountToPay) ifFalse: [ ^false ].
	aCardToPayWith substractBalanceBy: anAmountToPay.
	^ true.! !

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:46:17'!
PASSED!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:46:17'!
ERROR!

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:46:17'!
ERROR!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:46:17'!
ERROR!

!testRun: #CashierTest #test05checkoutWithExpiredCardRaisesInvalidCardError stamp: 'sf 6/11/2023 16:46:17'!
PASSED!

!testRun: #CashierTest #test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError stamp: 'sf 6/11/2023 16:46:17'!
PASSED!

!testRun: #CashierTest #test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError stamp: 'sf 6/11/2023 16:46:17'!
PASSED!

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:46:17'!
ERROR!

true and: true and: false!

!methodRemoval: MerchantProcessor #validateCard:forPaymentOf: stamp: 'sf 6/11/2023 16:46:55'!
validateCard: aCardToPayWith forPaymentOf: anAmountToPay

	^(self checkIfCardIsExpired: aCardToPayWith) and:
	   (self checkIfCardNumberIsInvalid: aCardToPayWith) and:
	   (self checkIfCard: aCardToPayWith cantAfford: anAmountToPay)!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sf 6/11/2023 16:47:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sf 6/11/2023 16:47:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sf 6/11/2023 16:47:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sf 6/11/2023 16:47:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sf 6/11/2023 16:47:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sf 6/11/2023 16:47:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sf 6/11/2023 16:47:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sf 6/11/2023 16:47:26'!
PASSED!

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:47:26'!
PASSED!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:47:26'!
ERROR!

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:47:26'!
ERROR!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:47:26'!
ERROR!

!testRun: #CashierTest #test05checkoutWithExpiredCardRaisesInvalidCardError stamp: 'sf 6/11/2023 16:47:26'!
FAILURE!

!testRun: #CashierTest #test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError stamp: 'sf 6/11/2023 16:47:26'!
FAILURE!

!testRun: #CashierTest #test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError stamp: 'sf 6/11/2023 16:47:26'!
FAILURE!

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:47:26'!
ERROR!
!MerchantProcessor methodsFor: 'validation' stamp: 'sf 6/11/2023 16:48:38'!
validateCard: aCardToPayWith forPaymentOf: anAmountToPay

	^ ( self checkIfCard: aCardToPayWith cantAfford: anAmountToPay ) or:
	    ( self checkIfCardIsExpired: aCardToPayWith ) or:
	    ( self checkIfCardNumberIsInvalid: aCardToPayWith )! !

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:48:40'!
PASSED!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:48:40'!
ERROR!

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:48:40'!
ERROR!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:48:40'!
ERROR!

!testRun: #CashierTest #test05checkoutWithExpiredCardRaisesInvalidCardError stamp: 'sf 6/11/2023 16:48:40'!
FAILURE!

!testRun: #CashierTest #test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError stamp: 'sf 6/11/2023 16:48:40'!
FAILURE!

!testRun: #CashierTest #test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError stamp: 'sf 6/11/2023 16:48:40'!
FAILURE!

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:48:40'!
ERROR!
!MerchantProcessor methodsFor: 'payments' stamp: 'sf 6/11/2023 16:49:07' prior: 50626331!
processPaymentOf: anAmountToPay withCard: aCardToPayWith

	(self validateCard: aCardToPayWith forPaymentOf: anAmountToPay) ifTrue: [ ^false ].
	aCardToPayWith substractBalanceBy: anAmountToPay.
	^ true.! !

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:49:08'!
PASSED!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:49:08'!
PASSED!

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:49:08'!
PASSED!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:49:08'!
PASSED!

!testRun: #CashierTest #test05checkoutWithExpiredCardRaisesInvalidCardError stamp: 'sf 6/11/2023 16:49:08'!
PASSED!

!testRun: #CashierTest #test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError stamp: 'sf 6/11/2023 16:49:08'!
PASSED!

!testRun: #CashierTest #test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError stamp: 'sf 6/11/2023 16:49:08'!
PASSED!

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:49:08'!
PASSED!
!MerchantProcessor methodsFor: 'validation' stamp: 'sf 6/11/2023 16:49:36' prior: 50626438!
validateCard: aCardToPayWith forPaymentOf: anAmountToPay

	^ (( self checkIfCard: aCardToPayWith cantAfford: anAmountToPay ) or:
	     ( self checkIfCardIsExpired: aCardToPayWith ) or:
	     ( self checkIfCardNumberIsInvalid: aCardToPayWith )) not! !
!MerchantProcessor methodsFor: 'payments' stamp: 'sf 6/11/2023 16:49:50' prior: 50626479!
processPaymentOf: anAmountToPay withCard: aCardToPayWith

	(self validateCard: aCardToPayWith forPaymentOf: anAmountToPay) ifFalse: [ ^false ].
	aCardToPayWith substractBalanceBy: anAmountToPay.
	^ true.! !

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:49:56'!
PASSED!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:49:56'!
PASSED!

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:49:56'!
PASSED!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:49:56'!
PASSED!

!testRun: #CashierTest #test05checkoutWithExpiredCardRaisesInvalidCardError stamp: 'sf 6/11/2023 16:49:56'!
PASSED!

!testRun: #CashierTest #test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError stamp: 'sf 6/11/2023 16:49:56'!
PASSED!

!testRun: #CashierTest #test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError stamp: 'sf 6/11/2023 16:49:56'!
PASSED!

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:49:56'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'sf 6/11/2023 16:52:15'!
assertCheckoutOf: aCart raisesInvalidCardErrorWhenUsing: aCard
	self 
		should: [ cashier checkout: aCart with: aCard ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCardErrorMessage.
			self deny: aCart isEmpty ].! !
!CashierTest methodsFor: 'tests' stamp: 'sf 6/11/2023 16:52:22' prior: 50626569!
assertCheckoutOf: aCart raisesInvalidCardErrorWhenUsing: aCard

	self 
		should: [ cashier checkout: aCart with: aCard ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCardErrorMessage.
			self deny: aCart isEmpty ].! !
!CashierTest methodsFor: 'tests' stamp: 'sf 6/11/2023 16:52:49' prior: 50625979!
test05checkoutWithExpiredCardRaisesInvalidCardError

	| aCart |

	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	self assertCheckoutOf: aCart raisesInvalidCardErrorWhenUsing: self anExpiredCard.! !

!testRun: #CashierTest #test05checkoutWithExpiredCardRaisesInvalidCardError stamp: 'sf 6/11/2023 16:52:51'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'sf 6/11/2023 16:53:11' prior: 50625997!
test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError

	| aCart |

	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	self assertCheckoutOf: aCart raisesInvalidCardErrorWhenUsing: self aCardWithInvalidNumber.! !

!testRun: #CashierTest #test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError stamp: 'sf 6/11/2023 16:53:12'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'sf 6/11/2023 16:53:33' prior: 50626016!
test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError

	| aCart |

	aCart := cartTest createCart.
	aCart add: cartTest itemSellByTheStore.
	
	self assertCheckoutOf: aCart raisesInvalidCardErrorWhenUsing: self aCardWith0Balance.! !

!testRun: #CashierTest #test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError stamp: 'sf 6/11/2023 16:53:34'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'sf 6/11/2023 16:53:51' prior: 50626216!
test08checkoutSubstractsTheAmountToPayFromCardsBalance

	| aCart aCard|

	aCart := cartTest createCart.
	aCart add: 10 of: cartTest itemSellByTheStore.
	
	aCard := self aValidCard.
	cashier checkout: aCart with: aCard.
	
	aCart add: cartTest itemSellByTheStore.
	self assertCheckoutOf: aCart raisesInvalidCardErrorWhenUsing: aCard.! !

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:53:52'!
PASSED!

!testRun: #CashierTest #test01checkoutOfEmptyCartRaisesInvalidCartError stamp: 'sf 6/11/2023 16:53:54'!
PASSED!

!testRun: #CashierTest #test02checkoutOfCartWithABookReturnsATicketWithItsPrice stamp: 'sf 6/11/2023 16:53:54'!
PASSED!

!testRun: #CashierTest #test03checkoutOfCartWithABookEmptiesCart stamp: 'sf 6/11/2023 16:53:54'!
PASSED!

!testRun: #CashierTest #test04checkoutOfCartWithManyBookReturnsATicketWithTheSumOfTheirPrice stamp: 'sf 6/11/2023 16:53:54'!
PASSED!

!testRun: #CashierTest #test05checkoutWithExpiredCardRaisesInvalidCardError stamp: 'sf 6/11/2023 16:53:54'!
PASSED!

!testRun: #CashierTest #test06checkoutWithCardNumberWithInvalidFormatRaisesInvalidCardError stamp: 'sf 6/11/2023 16:53:54'!
PASSED!

!testRun: #CashierTest #test07checkoutWithCardWithouthEnoughBalanceRaisesInvalidCardError stamp: 'sf 6/11/2023 16:53:54'!
PASSED!

!testRun: #CashierTest #test08checkoutSubstractsTheAmountToPayFromCardsBalance stamp: 'sf 6/11/2023 16:53:54'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'sf 6/11/2023 16:54:22' prior: 50625736!
test01checkoutOfEmptyCartRaisesInvalidCartError

	| aCart |

	aCart := cartTest createCart.

	self 
		should: [ cashier checkout: aCart with: self aValidCard ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier InvalidCartErrorMessage.
			self assert: aCart isEmpty ].! !

----SNAPSHOT----(11 June 2023 16:55:17) CuisUniversity-5832.image priorSource: 9420587!

----SNAPSHOT----(11 June 2023 16:55:55) CuisUniversity-5832.image priorSource: 9441497!